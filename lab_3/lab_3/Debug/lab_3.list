
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a328  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a4c8  0800a4c8  0001a4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9b4  0800a9b4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9b4  0800a9b4  0001a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9bc  0800a9bc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a9c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001f8  0800abb8  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800abb8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a6  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002136  00000000  00000000  0002e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00009d53  00000000  00000000  00032348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003fb6  00000000  00000000  0003c09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00040051  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004a2c  00000000  00000000  000400a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4b0 	.word	0x0800a4b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a4b0 	.word	0x0800a4b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <DWT_Delay_Init+0x58>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <DWT_Delay_Init+0x58>)
 8001006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800100a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <DWT_Delay_Init+0x58>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <DWT_Delay_Init+0x58>)
 8001012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001016:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <DWT_Delay_Init+0x5c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <DWT_Delay_Init+0x5c>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <DWT_Delay_Init+0x5c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <DWT_Delay_Init+0x5c>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <DWT_Delay_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8001036:	bf00      	nop
  __NOP();
 8001038:	bf00      	nop
  __NOP();
 800103a:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <DWT_Delay_Init+0x5c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8001044:	2300      	movs	r3, #0
 8001046:	e000      	b.n	800104a <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8001048:	2301      	movs	r3, #1
  }
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000edf0 	.word	0xe000edf0
 8001058:	e0001000 	.word	0xe0001000

0800105c <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <DWT_Delay_us+0x40>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800106a:	f003 fb6b 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 800106e:	4603      	mov	r3, r0
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <DWT_Delay_us+0x44>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001080:	bf00      	nop
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <DWT_Delay_us+0x40>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3f8      	bcc.n	8001082 <DWT_Delay_us+0x26>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e0001000 	.word	0xe0001000
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <lcd16x2_enablePulse+0x34>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <lcd16x2_enablePulse+0x38>)
 80010ae:	8811      	ldrh	r1, [r2, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fee6 	bl	8003e84 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80010b8:	2014      	movs	r0, #20
 80010ba:	f7ff ffcf 	bl	800105c <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <lcd16x2_enablePulse+0x34>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <lcd16x2_enablePulse+0x38>)
 80010c4:	8811      	ldrh	r1, [r2, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fedb 	bl	8003e84 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80010ce:	203c      	movs	r0, #60	; 0x3c
 80010d0:	f7ff ffc4 	bl	800105c <DWT_Delay_us>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000214 	.word	0x20000214
 80010dc:	2000021a 	.word	0x2000021a

080010e0 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <lcd16x2_rs+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <lcd16x2_rs+0x28>)
 80010f0:	8811      	ldrh	r1, [r2, #0]
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fec5 	bl	8003e84 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000214 	.word	0x20000214
 8001108:	20000218 	.word	0x20000218

0800110c <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8001124:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <lcd16x2_write+0x198>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d05a      	beq.n	80011e2 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <lcd16x2_write+0x19c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <lcd16x2_write+0x1a0>)
 8001132:	8819      	ldrh	r1, [r3, #0]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f002 fea1 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001142:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <lcd16x2_write+0x19c>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <lcd16x2_write+0x1a4>)
 8001148:	8819      	ldrh	r1, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f002 fe96 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <lcd16x2_write+0x19c>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <lcd16x2_write+0x1a8>)
 800115e:	8819      	ldrh	r1, [r3, #0]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	f002 fe8b 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800116e:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <lcd16x2_write+0x19c>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <lcd16x2_write+0x1ac>)
 8001174:	8819      	ldrh	r1, [r3, #0]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	f002 fe80 	bl	8003e84 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <lcd16x2_write+0x1b0>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <lcd16x2_write+0x1b4>)
 800118a:	8819      	ldrh	r1, [r3, #0]
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f002 fe75 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <lcd16x2_write+0x1b0>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <lcd16x2_write+0x1b8>)
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	f002 fe6a 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80011b0:	4b42      	ldr	r3, [pc, #264]	; (80012bc <lcd16x2_write+0x1b0>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <lcd16x2_write+0x1bc>)
 80011b6:	8819      	ldrh	r1, [r3, #0]
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	f002 fe5f 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <lcd16x2_write+0x1b0>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <lcd16x2_write+0x1c0>)
 80011cc:	8819      	ldrh	r1, [r3, #0]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	f002 fe54 	bl	8003e84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80011dc:	f7ff ff62 	bl	80010a4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80011e0:	e05b      	b.n	800129a <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <lcd16x2_write+0x1b0>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <lcd16x2_write+0x1b4>)
 80011e8:	8819      	ldrh	r1, [r3, #0]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f002 fe46 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <lcd16x2_write+0x1b0>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <lcd16x2_write+0x1b8>)
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f002 fe3b 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <lcd16x2_write+0x1b0>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <lcd16x2_write+0x1bc>)
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	f002 fe30 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <lcd16x2_write+0x1b0>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <lcd16x2_write+0x1c0>)
 800122a:	8819      	ldrh	r1, [r3, #0]
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	f002 fe25 	bl	8003e84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800123a:	f7ff ff33 	bl	80010a4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <lcd16x2_write+0x1b0>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <lcd16x2_write+0x1b4>)
 8001244:	8819      	ldrh	r1, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	f002 fe18 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <lcd16x2_write+0x1b0>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <lcd16x2_write+0x1b8>)
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	f002 fe0d 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <lcd16x2_write+0x1b0>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <lcd16x2_write+0x1bc>)
 8001270:	8819      	ldrh	r1, [r3, #0]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	f002 fe02 	bl	8003e84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <lcd16x2_write+0x1b0>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <lcd16x2_write+0x1c0>)
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f002 fdf7 	bl	8003e84 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001296:	f7ff ff05 	bl	80010a4 <lcd16x2_enablePulse>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	2000021c 	.word	0x2000021c
 80012ac:	20000220 	.word	0x20000220
 80012b0:	20000222 	.word	0x20000222
 80012b4:	20000224 	.word	0x20000224
 80012b8:	20000226 	.word	0x20000226
 80012bc:	20000228 	.word	0x20000228
 80012c0:	2000022c 	.word	0x2000022c
 80012c4:	2000022e 	.word	0x2000022e
 80012c8:	20000230 	.word	0x20000230
 80012cc:	20000232 	.word	0x20000232

080012d0 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff00 	bl	80010e0 <lcd16x2_rs>
  lcd16x2_write(cmd);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff12 	bl	800110c <lcd16x2_write>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fef0 	bl	80010e0 <lcd16x2_rs>
  lcd16x2_write(data);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff02 	bl	800110c <lcd16x2_write>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fedc 	bl	80010e0 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <lcd16x2_write4+0x7c>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <lcd16x2_write4+0x80>)
 800132e:	8819      	ldrh	r1, [r3, #0]
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f002 fda3 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <lcd16x2_write4+0x7c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <lcd16x2_write4+0x84>)
 8001344:	8819      	ldrh	r1, [r3, #0]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	f002 fd98 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <lcd16x2_write4+0x7c>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <lcd16x2_write4+0x88>)
 800135a:	8819      	ldrh	r1, [r3, #0]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	f002 fd8d 	bl	8003e84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <lcd16x2_write4+0x7c>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <lcd16x2_write4+0x8c>)
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	f002 fd82 	bl	8003e84 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001380:	f7ff fe90 	bl	80010a4 <lcd16x2_enablePulse>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000228 	.word	0x20000228
 8001390:	2000022c 	.word	0x2000022c
 8001394:	2000022e 	.word	0x2000022e
 8001398:	20000230 	.word	0x20000230
 800139c:	20000232 	.word	0x20000232

080013a0 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	4613      	mov	r3, r2
 80013b0:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80013b2:	f7ff fe23 	bl	8000ffc <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <lcd16x2_init_4bits+0xa8>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80013bc:	4a23      	ldr	r2, [pc, #140]	; (800144c <lcd16x2_init_4bits+0xac>)
 80013be:	897b      	ldrh	r3, [r7, #10]
 80013c0:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <lcd16x2_init_4bits+0xb0>)
 80013c4:	893b      	ldrh	r3, [r7, #8]
 80013c6:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <lcd16x2_init_4bits+0xb4>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <lcd16x2_init_4bits+0xb8>)
 80013d0:	8b3b      	ldrh	r3, [r7, #24]
 80013d2:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <lcd16x2_init_4bits+0xbc>)
 80013d6:	8bbb      	ldrh	r3, [r7, #28]
 80013d8:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <lcd16x2_init_4bits+0xc0>)
 80013dc:	8c3b      	ldrh	r3, [r7, #32]
 80013de:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <lcd16x2_init_4bits+0xc4>)
 80013e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013e4:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <lcd16x2_init_4bits+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <lcd16x2_init_4bits+0xcc>)
 80013ee:	2228      	movs	r2, #40	; 0x28
 80013f0:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80013f2:	2014      	movs	r0, #20
 80013f4:	f001 fec6 	bl	8003184 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff ff89 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 80013fe:	2005      	movs	r0, #5
 8001400:	f001 fec0 	bl	8003184 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001404:	2003      	movs	r0, #3
 8001406:	f7ff ff83 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f001 feba 	bl	8003184 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff ff7d 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f001 feb4 	bl	8003184 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ff77 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f001 feae 	bl	8003184 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001428:	2028      	movs	r0, #40	; 0x28
 800142a:	f7ff ff51 	bl	80012d0 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800142e:	200f      	movs	r0, #15
 8001430:	f7ff ff4e 	bl	80012d0 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ff4b 	bl	80012d0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800143a:	2003      	movs	r0, #3
 800143c:	f001 fea2 	bl	8003184 <HAL_Delay>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000214 	.word	0x20000214
 800144c:	20000218 	.word	0x20000218
 8001450:	2000021a 	.word	0x2000021a
 8001454:	20000228 	.word	0x20000228
 8001458:	2000022c 	.word	0x2000022c
 800145c:	2000022e 	.word	0x2000022e
 8001460:	20000230 	.word	0x20000230
 8001464:	20000232 	.word	0x20000232
 8001468:	20000000 	.word	0x20000000
 800146c:	20000002 	.word	0x20000002

08001470 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001494:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff19 	bl	80012d0 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800149e:	e007      	b.n	80014b0 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014a6:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff10 	bl	80012d0 <lcd16x2_writeCommand>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ffd6 	bl	8001470 <lcd16x2_setCursor>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 80014cc:	2100      	movs	r1, #0
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff ffce 	bl	8001470 <lcd16x2_setCursor>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if(state)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00c      	beq.n	8001502 <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f043 0303 	orr.w	r3, r3, #3
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 80014f4:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fee8 	bl	80012d0 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8001500:	e00b      	b.n	800151a <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 800150e:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <lcd16x2_cursorShow+0x4c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fedb 	bl	80012d0 <lcd16x2_writeCommand>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000001 	.word	0x20000001

08001528 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fecf 	bl	80012d0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001532:	2003      	movs	r0, #3
 8001534:	f001 fe26 	bl	8003184 <HAL_Delay>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}

0800153c <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 800153c:	b40f      	push	{r0, r1, r2, r3}
 800153e:	b590      	push	{r4, r7, lr}
 8001540:	b089      	sub	sp, #36	; 0x24
 8001542:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001544:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001548:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001552:	4618      	mov	r0, r3
 8001554:	f006 f864 	bl	8007620 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001558:	2300      	movs	r3, #0
 800155a:	77fb      	strb	r3, [r7, #31]
 800155c:	e00b      	b.n	8001576 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800155e:	7ffb      	ldrb	r3, [r7, #31]
 8001560:	f107 0220 	add.w	r2, r7, #32
 8001564:	4413      	add	r3, r2
 8001566:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fec0 	bl	80012f0 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3301      	adds	r3, #1
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	7ffc      	ldrb	r4, [r7, #31]
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fe2f 	bl	80001e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	429c      	cmp	r4, r3
 8001586:	d202      	bcs.n	800158e <lcd16x2_printf+0x52>
 8001588:	7ffb      	ldrb	r3, [r7, #31]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d9e7      	bls.n	800155e <lcd16x2_printf+0x22>
  }
}
 800158e:	bf00      	nop
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001598:	b004      	add	sp, #16
 800159a:	4770      	bx	lr
 800159c:	0000      	movs	r0, r0
	...

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a4:	b0b8      	sub	sp, #224	; 0xe0
 80015a6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a8:	f001 fd7a 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ac:	f000 f976 	bl	800189c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b0:	f000 fc3e 	bl	8001e30 <MX_GPIO_Init>
  MX_ADC1_Init();
 80015b4:	f000 f9d2 	bl	800195c <MX_ADC1_Init>
  MX_TIM1_Init();
 80015b8:	f000 fa24 	bl	8001a04 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015bc:	f000 fa72 	bl	8001aa4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015c0:	f000 fafc 	bl	8001bbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80015c4:	f000 fb6e 	bl	8001ca4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80015c8:	f000 fbba 	bl	8001d40 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // begin transmitting 0% duty cycle PWM and timers
  HAL_TIM_Base_Start_IT(&htim2);
 80015cc:	48a6      	ldr	r0, [pc, #664]	; (8001868 <main+0x2c8>)
 80015ce:	f003 f915 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80015d2:	2100      	movs	r1, #0
 80015d4:	48a4      	ldr	r0, [pc, #656]	; (8001868 <main+0x2c8>)
 80015d6:	f003 fb81 	bl	8004cdc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim5);
 80015da:	48a4      	ldr	r0, [pc, #656]	; (800186c <main+0x2cc>)
 80015dc:	f003 f90e 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80015e0:	2104      	movs	r1, #4
 80015e2:	48a2      	ldr	r0, [pc, #648]	; (800186c <main+0x2cc>)
 80015e4:	f003 fb7a 	bl	8004cdc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 80015e8:	48a1      	ldr	r0, [pc, #644]	; (8001870 <main+0x2d0>)
 80015ea:	f003 f907 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80015ee:	2100      	movs	r1, #0
 80015f0:	489f      	ldr	r0, [pc, #636]	; (8001870 <main+0x2d0>)
 80015f2:	f003 fa23 	bl	8004a3c <HAL_TIM_OC_Start_IT>

  HAL_TIM_Base_Start_IT(&htim1);
 80015f6:	489f      	ldr	r0, [pc, #636]	; (8001874 <main+0x2d4>)
 80015f8:	f003 f900 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80015fc:	489e      	ldr	r0, [pc, #632]	; (8001878 <main+0x2d8>)
 80015fe:	f003 f8fd 	bl	80047fc <HAL_TIM_Base_Start_IT>

  // initialize LCD
  lcd16x2_init_4bits(GPIOB, LCD_RS_Pin, LCD_EN_Pin,
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	9303      	str	r3, [sp, #12]
 8001606:	2340      	movs	r3, #64	; 0x40
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2320      	movs	r3, #32
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	2310      	movs	r3, #16
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	4b9a      	ldr	r3, [pc, #616]	; (800187c <main+0x2dc>)
 8001614:	2201      	movs	r2, #1
 8001616:	2102      	movs	r1, #2
 8001618:	4899      	ldr	r0, [pc, #612]	; (8001880 <main+0x2e0>)
 800161a:	f7ff fec1 	bl	80013a0 <lcd16x2_init_4bits>
		  GPIOA, LCD_OUT4_Pin, LCD_OUT5_Pin, LCD_OUT6_Pin, LCD_OUT7_Pin);
  lcd16x2_cursorShow(false);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ff5a 	bl	80014d8 <lcd16x2_cursorShow>

  // initialize PID structs to control DC motors
  struct PID *pid_motor_r, pid1;
  pid_motor_r = &pid1;
 8001624:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001628:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  struct PID *pid_motor_l, pid2;
  pid_motor_l = &pid2;
 800162c:	463b      	mov	r3, r7
 800162e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  double K_p = 350;
 8001632:	a385      	add	r3, pc, #532	; (adr r3, 8001848 <main+0x2a8>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
  double K_i = 300;
 800163c:	a384      	add	r3, pc, #528	; (adr r3, 8001850 <main+0x2b0>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
  double K_d = 75;
 8001646:	a384      	add	r3, pc, #528	; (adr r3, 8001858 <main+0x2b8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
  int max_pulse = 1000;
 8001650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int min_pulse = -1000;
 8001658:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <main+0x2e4>)
 800165a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  init_pid(pid_motor_r, K_p, K_i, K_d, max_pulse, min_pulse);
 800165e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001666:	ed97 2b2a 	vldr	d2, [r7, #168]	; 0xa8
 800166a:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 800166e:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8001672:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001676:	f001 f978 	bl	800296a <init_pid>
  init_pid(pid_motor_l, K_p, K_i, K_d, max_pulse, min_pulse);
 800167a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800167e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001682:	ed97 2b2a 	vldr	d2, [r7, #168]	; 0xa8
 8001686:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 800168a:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800168e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001692:	f001 f96a 	bl	800296a <init_pid>

  // detect mode and set LEDs before loop
  if ( HAL_GPIO_ReadPin( GPIOA, GPIO_PIN_10 ) ) {
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	4878      	ldr	r0, [pc, #480]	; (800187c <main+0x2dc>)
 800169c:	f002 fbda 	bl	8003e54 <HAL_GPIO_ReadPin>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <main+0x11e>
	  mode = 1;
 80016a6:	4b78      	ldr	r3, [pc, #480]	; (8001888 <main+0x2e8>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOC, LED_OUT5_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2108      	movs	r1, #8
 80016b0:	4876      	ldr	r0, [pc, #472]	; (800188c <main+0x2ec>)
 80016b2:	f002 fbe7 	bl	8003e84 <HAL_GPIO_WritePin>
	  HAL_TIM_OC_DelayElapsedCallback(&htim3);
 80016b6:	486e      	ldr	r0, [pc, #440]	; (8001870 <main+0x2d0>)
 80016b8:	f000 fd52 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
 80016bc:	e002      	b.n	80016c4 <main+0x124>
  } else {
	  mode = 0;
 80016be:	4b72      	ldr	r3, [pc, #456]	; (8001888 <main+0x2e8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  if (mode == 1) {
 80016c4:	4b70      	ldr	r3, [pc, #448]	; (8001888 <main+0x2e8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d054      	beq.n	8001776 <main+0x1d6>
  		  pot1Voltage = get_pot_voltage(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f000 fe13 	bl	80022f8 <get_pot_voltage>
 80016d2:	ed87 0b26 	vstr	d0, [r7, #152]	; 0x98
  		  pot2Voltage = get_pot_voltage(2);
 80016d6:	2002      	movs	r0, #2
 80016d8:	f000 fe0e 	bl	80022f8 <get_pot_voltage>
 80016dc:	ed87 0b24 	vstr	d0, [r7, #144]	; 0x90

  		  rot_speed_l_set = get_rot_speed_set_l( pot1Voltage, pot2Voltage );
 80016e0:	ed97 1b24 	vldr	d1, [r7, #144]	; 0x90
 80016e4:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80016e8:	f000 fe94 	bl	8002414 <get_rot_speed_set_l>
 80016ec:	ed87 0b22 	vstr	d0, [r7, #136]	; 0x88
  		  rot_speed_r_set = get_rot_speed_set_r( pot1Voltage, pot2Voltage );
 80016f0:	ed97 1b24 	vldr	d1, [r7, #144]	; 0x90
 80016f4:	ed97 0b26 	vldr	d0, [r7, #152]	; 0x98
 80016f8:	f000 ff12 	bl	8002520 <get_rot_speed_set_r>
 80016fc:	ed87 0b20 	vstr	d0, [r7, #128]	; 0x80

  		  pid_motor_l->u = rot_speed_l_set;
 8001700:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001704:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001708:	e9c1 2308 	strd	r2, r3, [r1, #32]
  		  pid_motor_r->u = rot_speed_r_set;
 800170c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001710:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001714:	e9c1 2308 	strd	r2, r3, [r1, #32]

  		  pulse_l = set_pulse_PID(pid_motor_l, rot_speed_l_set, lrpm);
 8001718:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <main+0x2f0>)
 800171a:	ed93 7b00 	vldr	d7, [r3]
 800171e:	eeb0 1a47 	vmov.f32	s2, s14
 8001722:	eef0 1a67 	vmov.f32	s3, s15
 8001726:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 800172a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800172e:	f001 f960 	bl	80029f2 <set_pulse_PID>
 8001732:	ec53 2b10 	vmov	r2, r3, d0
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa15 	bl	8000b68 <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  		  pulse_r = set_pulse_PID(pid_motor_r, rot_speed_r_set, rrpm);
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <main+0x2f4>)
 8001746:	ed93 7b00 	vldr	d7, [r3]
 800174a:	eeb0 1a47 	vmov.f32	s2, s14
 800174e:	eef0 1a67 	vmov.f32	s3, s15
 8001752:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8001756:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800175a:	f001 f94a 	bl	80029f2 <set_pulse_PID>
 800175e:	ec53 2b10 	vmov	r2, r3, d0
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f9ff 	bl	8000b68 <__aeabi_d2iz>
 800176a:	4603      	mov	r3, r0
 800176c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  		  display_lcd();
 8001770:	f000 ffba 	bl	80026e8 <display_lcd>
 8001774:	e055      	b.n	8001822 <main+0x282>

  	  } else {

  		  // if low RPM turn off PWM signals
  		  if (fabs(lrpm) < 30.0) {
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <main+0x2f0>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	4614      	mov	r4, r2
 800177e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	4b44      	ldr	r3, [pc, #272]	; (8001898 <main+0x2f8>)
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7ff f9ae 	bl	8000aec <__aeabi_dcmplt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <main+0x1fe>
  			  pulse_l = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800179c:	e015      	b.n	80017ca <main+0x22a>
  		  } else {
  	  		  pulse_l = set_pulse_PID(pid_motor_l, 0, lrpm);
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <main+0x2f0>)
 80017a0:	ed93 7b00 	vldr	d7, [r3]
 80017a4:	eeb0 1a47 	vmov.f32	s2, s14
 80017a8:	eef0 1a67 	vmov.f32	s3, s15
 80017ac:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8001860 <main+0x2c0>
 80017b0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80017b4:	f001 f91d 	bl	80029f2 <set_pulse_PID>
 80017b8:	ec53 2b10 	vmov	r2, r3, d0
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f9d2 	bl	8000b68 <__aeabi_d2iz>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  		  }

  		  if (fabs(rrpm) < 30.0) {
 80017ca:	4b32      	ldr	r3, [pc, #200]	; (8001894 <main+0x2f4>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	4690      	mov	r8, r2
 80017d2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <main+0x2f8>)
 80017dc:	4640      	mov	r0, r8
 80017de:	4649      	mov	r1, r9
 80017e0:	f7ff f984 	bl	8000aec <__aeabi_dcmplt>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <main+0x252>
  			  pulse_r = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017f0:	e015      	b.n	800181e <main+0x27e>
  		  } else {
  	  		  pulse_r = set_pulse_PID(pid_motor_r, 0, rrpm);
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <main+0x2f4>)
 80017f4:	ed93 7b00 	vldr	d7, [r3]
 80017f8:	eeb0 1a47 	vmov.f32	s2, s14
 80017fc:	eef0 1a67 	vmov.f32	s3, s15
 8001800:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001860 <main+0x2c0>
 8001804:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001808:	f001 f8f3 	bl	80029f2 <set_pulse_PID>
 800180c:	ec53 2b10 	vmov	r2, r3, d0
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9a8 	bl	8000b68 <__aeabi_d2iz>
 8001818:	4603      	mov	r3, r0
 800181a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  		  }

  		  lcd16x2_clear();
 800181e:	f7ff fe83 	bl	8001528 <lcd16x2_clear>
  	  }

	  set_PWM_pulse( pulse_l, pulse_r );
 8001822:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001826:	f7fe fe85 	bl	8000534 <__aeabi_i2d>
 800182a:	4682      	mov	sl, r0
 800182c:	468b      	mov	fp, r1
 800182e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001832:	f7fe fe7f 	bl	8000534 <__aeabi_i2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	ec43 2b11 	vmov	d1, r2, r3
 800183e:	ec4b ab10 	vmov	d0, sl, fp
 8001842:	f000 fef3 	bl	800262c <set_PWM_pulse>
  	  if (mode == 1) {
 8001846:	e73d      	b.n	80016c4 <main+0x124>
 8001848:	00000000 	.word	0x00000000
 800184c:	4075e000 	.word	0x4075e000
 8001850:	00000000 	.word	0x00000000
 8001854:	4072c000 	.word	0x4072c000
 8001858:	00000000 	.word	0x00000000
 800185c:	4052c000 	.word	0x4052c000
	...
 8001868:	200003bc 	.word	0x200003bc
 800186c:	2000029c 	.word	0x2000029c
 8001870:	200002e4 	.word	0x200002e4
 8001874:	20000374 	.word	0x20000374
 8001878:	20000254 	.word	0x20000254
 800187c:	40020000 	.word	0x40020000
 8001880:	40020400 	.word	0x40020400
 8001884:	fffffc18 	.word	0xfffffc18
 8001888:	20000010 	.word	0x20000010
 800188c:	40020800 	.word	0x40020800
 8001890:	20000240 	.word	0x20000240
 8001894:	20000238 	.word	0x20000238
 8001898:	403e0000 	.word	0x403e0000

0800189c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b094      	sub	sp, #80	; 0x50
 80018a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a2:	f107 0320 	add.w	r3, r7, #32
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f004 f948 	bl	8005b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <SystemClock_Config+0xb8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a22      	ldr	r2, [pc, #136]	; (8001954 <SystemClock_Config+0xb8>)
 80018ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <SystemClock_Config+0xb8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <SystemClock_Config+0xbc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <SystemClock_Config+0xbc>)
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <SystemClock_Config+0xbc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fb03 	bl	8003f1c <HAL_RCC_OscConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800191c:	f001 f820 	bl	8002960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001920:	230f      	movs	r3, #15
 8001922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fd66 	bl	800440c <HAL_RCC_ClockConfig>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001946:	f001 f80b 	bl	8002960 <Error_Handler>
  }
}
 800194a:	bf00      	nop
 800194c:	3750      	adds	r7, #80	; 0x50
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000

0800195c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <MX_ADC1_Init+0xa0>)
 8001972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001974:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001976:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800197a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <MX_ADC1_Init+0x9c>)
 800197e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001982:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <MX_ADC1_Init+0x9c>)
 800198c:	2200      	movs	r2, #0
 800198e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <MX_ADC1_Init+0x9c>)
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <MX_ADC1_Init+0x9c>)
 800199a:	2200      	movs	r2, #0
 800199c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019a0:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <MX_ADC1_Init+0xa4>)
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019be:	480e      	ldr	r0, [pc, #56]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019c0:	f001 fc04 	bl	80031cc <HAL_ADC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80019ca:	f000 ffc9 	bl	8002960 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019ce:	230a      	movs	r3, #10
 80019d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019da:	463b      	mov	r3, r7
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <MX_ADC1_Init+0x9c>)
 80019e0:	f001 fd84 	bl	80034ec <HAL_ADC_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80019ea:	f000 ffb9 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000032c 	.word	0x2000032c
 80019fc:	40012000 	.word	0x40012000
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <MX_TIM1_Init+0x9c>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a28:	229f      	movs	r2, #159	; 0x9f
 8001a2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a4e:	f002 fe85 	bl	800475c <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a58:	f000 ff82 	bl	8002960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4619      	mov	r1, r3
 8001a68:	480c      	ldr	r0, [pc, #48]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a6a:	f003 fc05 	bl	8005278 <HAL_TIM_ConfigClockSource>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a74:	f000 ff74 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	4619      	mov	r1, r3
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_TIM1_Init+0x98>)
 8001a86:	f003 ffaf 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a90:	f000 ff66 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000374 	.word	0x20000374
 8001aa0:	40010000 	.word	0x40010000

08001aa4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab8:	f107 0320 	add.w	r3, r7, #32
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
 8001ad0:	615a      	str	r2, [r3, #20]
 8001ad2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001adc:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001ade:	229f      	movs	r2, #159	; 0x9f
 8001ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae2:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001ae8:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001aea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001afe:	f002 fe2d 	bl	800475c <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b08:	f000 ff2a 	bl	8002960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4827      	ldr	r0, [pc, #156]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b1a:	f003 fbad 	bl	8005278 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b24:	f000 ff1c 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b28:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b2a:	f003 f87d 	bl	8004c28 <HAL_TIM_PWM_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b34:	f000 ff14 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001b38:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b3a:	f002 fec1 	bl	80048c0 <HAL_TIM_OC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001b44:	f000 ff0c 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b50:	f107 0320 	add.w	r3, r7, #32
 8001b54:	4619      	mov	r1, r3
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b58:	f003 ff46 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8001b62:	f000 fefd 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b66:	2360      	movs	r3, #96	; 0x60
 8001b68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b80:	f003 fabc 	bl	80050fc <HAL_TIM_PWM_ConfigChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8001b8a:	f000 fee9 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001b9a:	f003 fa57 	bl	800504c <HAL_TIM_OC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001ba4:	f000 fedc 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM2_Init+0x114>)
 8001baa:	f001 f8bd 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3738      	adds	r7, #56	; 0x38
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200003bc 	.word	0x200003bc

08001bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <MX_TIM3_Init+0xe4>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 122;
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bf4:	227a      	movs	r2, #122	; 0x7a
 8001bf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bfe:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c12:	4822      	ldr	r0, [pc, #136]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c14:	f002 fda2 	bl	800475c <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c1e:	f000 fe9f 	bl	8002960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481b      	ldr	r0, [pc, #108]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c30:	f003 fb22 	bl	8005278 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c3a:	f000 fe91 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c3e:	4817      	ldr	r0, [pc, #92]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c40:	f002 fe3e 	bl	80048c0 <HAL_TIM_OC_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c4a:	f000 fe89 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c56:	f107 0320 	add.w	r3, r7, #32
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480f      	ldr	r0, [pc, #60]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c5e:	f003 fec3 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c68:	f000 fe7a 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001c70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_TIM3_Init+0xe0>)
 8001c86:	f003 f9e1 	bl	800504c <HAL_TIM_OC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c90:	f000 fe66 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3738      	adds	r7, #56	; 0x38
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200002e4 	.word	0x200002e4
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	463b      	mov	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	; (8001d3c <MX_TIM4_Init+0x98>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001cc8:	229f      	movs	r2, #159	; 0x9f
 8001cca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ce6:	4814      	ldr	r0, [pc, #80]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001ce8:	f002 fd38 	bl	800475c <HAL_TIM_Base_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001cf2:	f000 fe35 	bl	8002960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	480d      	ldr	r0, [pc, #52]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001d04:	f003 fab8 	bl	8005278 <HAL_TIM_ConfigClockSource>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d0e:	f000 fe27 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_TIM4_Init+0x94>)
 8001d20:	f003 fe62 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d2a:	f000 fe19 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000254 	.word	0x20000254
 8001d3c:	40000800 	.word	0x40000800

08001d40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d72:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <MX_TIM5_Init+0xec>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 159;
 8001d76:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d78:	229f      	movs	r2, #159	; 0x9f
 8001d7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001d82:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d88:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8a:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d96:	4824      	ldr	r0, [pc, #144]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001d98:	f002 fce0 	bl	800475c <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001da2:	f000 fddd 	bl	8002960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db0:	4619      	mov	r1, r3
 8001db2:	481d      	ldr	r0, [pc, #116]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001db4:	f003 fa60 	bl	8005278 <HAL_TIM_ConfigClockSource>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001dbe:	f000 fdcf 	bl	8002960 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001dc2:	4819      	ldr	r0, [pc, #100]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001dc4:	f002 ff30 	bl	8004c28 <HAL_TIM_PWM_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001dce:	f000 fdc7 	bl	8002960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dda:	f107 0320 	add.w	r3, r7, #32
 8001dde:	4619      	mov	r1, r3
 8001de0:	4811      	ldr	r0, [pc, #68]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001de2:	f003 fe01 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001dec:	f000 fdb8 	bl	8002960 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001df4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2204      	movs	r2, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001e0a:	f003 f977 	bl	80050fc <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001e14:	f000 fda4 	bl	8002960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM5_Init+0xe8>)
 8001e1a:	f000 ff85 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3738      	adds	r7, #56	; 0x38
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000029c 	.word	0x2000029c
 8001e2c:	40000c00 	.word	0x40000c00

08001e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	4b4f      	ldr	r3, [pc, #316]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	4b48      	ldr	r3, [pc, #288]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4b41      	ldr	r3, [pc, #260]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <MX_GPIO_Init+0x158>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	603b      	str	r3, [r7, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OUT5_GPIO_Port, LED_OUT5_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	483b      	ldr	r0, [pc, #236]	; (8001f8c <MX_GPIO_Init+0x15c>)
 8001ea0:	f001 fff0 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_OUT4_Pin|LCD_OUT5_Pin|LCD_OUT6_Pin|LCD_OUT7_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	21f0      	movs	r1, #240	; 0xf0
 8001ea8:	4839      	ldr	r0, [pc, #228]	; (8001f90 <MX_GPIO_Init+0x160>)
 8001eaa:	f001 ffeb 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_EN_Pin|LCD_RS_Pin|LCD_RW_Pin|MUX_SELECT2_Pin
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f24c 01f7 	movw	r1, #49399	; 0xc0f7
 8001eb4:	4837      	ldr	r0, [pc, #220]	; (8001f94 <MX_GPIO_Init+0x164>)
 8001eb6:	f001 ffe5 	bl	8003e84 <HAL_GPIO_WritePin>
                          |MUX_SELECT1_Pin|LED_OUT4_Pin|LED_OUT3_Pin|LED_OUT2_Pin
                          |LED_OUT1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_OUT5_Pin */
  GPIO_InitStruct.Pin = LED_OUT5_Pin;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_OUT5_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482e      	ldr	r0, [pc, #184]	; (8001f8c <MX_GPIO_Init+0x15c>)
 8001ed2:	f001 fe3b 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_OUT4_Pin LCD_OUT5_Pin LCD_OUT6_Pin LCD_OUT7_Pin */
  GPIO_InitStruct.Pin = LCD_OUT4_Pin|LCD_OUT5_Pin|LCD_OUT6_Pin|LCD_OUT7_Pin;
 8001ed6:	23f0      	movs	r3, #240	; 0xf0
 8001ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	4828      	ldr	r0, [pc, #160]	; (8001f90 <MX_GPIO_Init+0x160>)
 8001eee:	f001 fe2d 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_RW_Pin MUX_SELECT2_Pin
                           MUX_SELECT1_Pin LED_OUT4_Pin LED_OUT3_Pin LED_OUT2_Pin
                           LED_OUT1_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_RW_Pin|MUX_SELECT2_Pin
 8001ef2:	f24c 03f7 	movw	r3, #49399	; 0xc0f7
 8001ef6:	60fb      	str	r3, [r7, #12]
                          |MUX_SELECT1_Pin|LED_OUT4_Pin|LED_OUT3_Pin|LED_OUT2_Pin
                          |LED_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4822      	ldr	r0, [pc, #136]	; (8001f94 <MX_GPIO_Init+0x164>)
 8001f0c:	f001 fe1e 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_MOTOR_1_Q1_Pin DC_MOTOR_2_Q1_Pin */
  GPIO_InitStruct.Pin = DC_MOTOR_1_Q1_Pin|DC_MOTOR_2_Q1_Pin;
 8001f10:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <MX_GPIO_Init+0x168>)
 8001f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	4619      	mov	r1, r3
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <MX_GPIO_Init+0x15c>)
 8001f26:	f001 fe11 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_MOTOR_1_Q2_Pin DC_MOTOR_2_Q2_Pin */
  GPIO_InitStruct.Pin = DC_MOTOR_1_Q2_Pin|DC_MOTOR_2_Q2_Pin;
 8001f2a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <MX_GPIO_Init+0x15c>)
 8001f40:	f001 fe04 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_GPIO_Init+0x16c>)
 8001f4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 030c 	add.w	r3, r7, #12
 8001f56:	4619      	mov	r1, r3
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <MX_GPIO_Init+0x160>)
 8001f5a:	f001 fdf7 	bl	8003b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2017      	movs	r0, #23
 8001f64:	f001 fdbb 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f68:	2017      	movs	r0, #23
 8001f6a:	f001 fdd4 	bl	8003b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2028      	movs	r0, #40	; 0x28
 8001f74:	f001 fdb3 	bl	8003ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f78:	2028      	movs	r0, #40	; 0x28
 8001f7a:	f001 fdcc 	bl	8003b16 <HAL_NVIC_EnableIRQ>

}
 8001f7e:	bf00      	nop
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	10110000 	.word	0x10110000
 8001f9c:	10310000 	.word	0x10310000

08001fa0 <HAL_GPIO_EXTI_Callback>:

/**
  * @GPIO EXTI interrupt handler
  * @GPIO_Pin pin which calls the interrupt
  */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8001fa0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	80fb      	strh	r3, [r7, #6]
	// Q1 pin of left motor
	if ( GPIO_Pin == DC_MOTOR_1_Q1_Pin ) {
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d12c      	bne.n	800200c <HAL_GPIO_EXTI_Callback+0x6c>
		int cycle_count = __HAL_TIM_GET_COUNTER(&htim1);
 8001fb2:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_GPIO_EXTI_Callback+0x198>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	60bb      	str	r3, [r7, #8]
		lrpm = (double) 60.0/(1.0e-5*24.0*cycle_count);
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	f7fe faba 	bl	8000534 <__aeabi_i2d>
 8001fc0:	a35b      	add	r3, pc, #364	; (adr r3, 8002130 <HAL_GPIO_EXTI_Callback+0x190>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fb1f 	bl	8000608 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	495a      	ldr	r1, [pc, #360]	; (800213c <HAL_GPIO_EXTI_Callback+0x19c>)
 8001fd4:	f7fe fc42 	bl	800085c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4958      	ldr	r1, [pc, #352]	; (8002140 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001fde:	e9c1 2300 	strd	r2, r3, [r1]

		if ( HAL_GPIO_ReadPin( GPIOC, DC_MOTOR_1_Q2_Pin ) ) {
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	4857      	ldr	r0, [pc, #348]	; (8002144 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001fe6:	f001 ff35 	bl	8003e54 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_GPIO_EXTI_Callback+0x62>
			lrpm *= -1.0;
 8001ff0:	4b53      	ldr	r3, [pc, #332]	; (8002140 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001ffe:	e9c3 8900 	strd	r8, r9, [r3]
		}

		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002002:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_GPIO_EXTI_Callback+0x198>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2200      	movs	r2, #0
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOC, LED_OUT5_Pin, GPIO_PIN_RESET);
			__HAL_TIM_SET_COUNTER(&htim3, 0);
			HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);
		}
	}
}
 800200a:	e089      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x180>
	} else if ( GPIO_Pin == DC_MOTOR_2_Q1_Pin ) {
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002012:	d12d      	bne.n	8002070 <HAL_GPIO_EXTI_Callback+0xd0>
		int cycle_count = __HAL_TIM_GET_COUNTER(&htim4);
 8002014:	4b4c      	ldr	r3, [pc, #304]	; (8002148 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	60fb      	str	r3, [r7, #12]
		rrpm = (double)60.0/(1.0e-5*24.0*cycle_count);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7fe fa89 	bl	8000534 <__aeabi_i2d>
 8002022:	a343      	add	r3, pc, #268	; (adr r3, 8002130 <HAL_GPIO_EXTI_Callback+0x190>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe faee 	bl	8000608 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	f04f 0000 	mov.w	r0, #0
 8002034:	4941      	ldr	r1, [pc, #260]	; (800213c <HAL_GPIO_EXTI_Callback+0x19c>)
 8002036:	f7fe fc11 	bl	800085c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4943      	ldr	r1, [pc, #268]	; (800214c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002040:	e9c1 2300 	strd	r2, r3, [r1]
		if ( HAL_GPIO_ReadPin( GPIOC, DC_MOTOR_2_Q2_Pin ) ) {
 8002044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002048:	483e      	ldr	r0, [pc, #248]	; (8002144 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800204a:	f001 ff03 	bl	8003e54 <HAL_GPIO_ReadPin>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_GPIO_EXTI_Callback+0xc6>
			rrpm *= -1.0;
 8002054:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	4614      	mov	r4, r2
 800205c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_GPIO_EXTI_Callback+0x1ac>)
 8002062:	e9c3 4500 	strd	r4, r5, [r3]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002066:	4b38      	ldr	r3, [pc, #224]	; (8002148 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800206e:	e057      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x180>
	} else if ( GPIO_Pin == GPIO_PIN_10 ) {
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002076:	d153      	bne.n	8002120 <HAL_GPIO_EXTI_Callback+0x180>
		mode ^= 1;
 8002078:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800208e:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_GPIO_EXTI_Callback+0x198>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002098:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2200      	movs	r2, #0
 800209e:	625a      	str	r2, [r3, #36]	; 0x24
		if (mode) {
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01a      	beq.n	80020de <HAL_GPIO_EXTI_Callback+0x13e>
			rrpm = 0.0;
 80020a8:	4928      	ldr	r1, [pc, #160]	; (800214c <HAL_GPIO_EXTI_Callback+0x1ac>)
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9c1 2300 	strd	r2, r3, [r1]
			lrpm = 0.0;
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOC, LED_OUT5_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	2108      	movs	r1, #8
 80020c8:	481e      	ldr	r0, [pc, #120]	; (8002144 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80020ca:	f001 fedb 	bl	8003e84 <HAL_GPIO_WritePin>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80020ce:	2100      	movs	r1, #0
 80020d0:	4820      	ldr	r0, [pc, #128]	; (8002154 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80020d2:	f002 fcb3 	bl	8004a3c <HAL_TIM_OC_Start_IT>
			HAL_TIM_OC_DelayElapsedCallback(&htim3);
 80020d6:	481f      	ldr	r0, [pc, #124]	; (8002154 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80020d8:	f000 f842 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
}
 80020dc:	e020      	b.n	8002120 <HAL_GPIO_EXTI_Callback+0x180>
			HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
 80020de:	2200      	movs	r2, #0
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	481d      	ldr	r0, [pc, #116]	; (8002158 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020e4:	f001 fece 	bl	8003e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	481a      	ldr	r0, [pc, #104]	; (8002158 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020ee:	f001 fec9 	bl	8003e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2120      	movs	r1, #32
 80020f6:	4818      	ldr	r0, [pc, #96]	; (8002158 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80020f8:	f001 fec4 	bl	8003e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED_OUT4_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2110      	movs	r1, #16
 8002100:	4815      	ldr	r0, [pc, #84]	; (8002158 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8002102:	f001 febf 	bl	8003e84 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, LED_OUT5_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2108      	movs	r1, #8
 800210a:	480e      	ldr	r0, [pc, #56]	; (8002144 <HAL_GPIO_EXTI_Callback+0x1a4>)
 800210c:	f001 feba 	bl	8003e84 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002110:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);
 8002118:	2100      	movs	r1, #0
 800211a:	480e      	ldr	r0, [pc, #56]	; (8002154 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800211c:	f002 fc2a 	bl	8004974 <HAL_TIM_OC_Stop>
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800212a:	bf00      	nop
 800212c:	f3af 8000 	nop.w
 8002130:	4d551d6a 	.word	0x4d551d6a
 8002134:	3f2f7510 	.word	0x3f2f7510
 8002138:	20000374 	.word	0x20000374
 800213c:	404e0000 	.word	0x404e0000
 8002140:	20000240 	.word	0x20000240
 8002144:	40020800 	.word	0x40020800
 8002148:	20000254 	.word	0x20000254
 800214c:	20000238 	.word	0x20000238
 8002150:	20000010 	.word	0x20000010
 8002154:	200002e4 	.word	0x200002e4
 8002158:	40020400 	.word	0x40020400
 800215c:	00000000 	.word	0x00000000

08002160 <HAL_TIM_OC_DelayElapsedCallback>:

/**
  * @Timer interrupt handler
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if (htim == &htim3) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d149      	bne.n	8002204 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
	  if (mode) {
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d045      	beq.n	8002204 <HAL_TIM_OC_DelayElapsedCallback+0xa4>
		  double battery_voltage = get_battery_voltage();
 8002178:	f000 f91a 	bl	80023b0 <get_battery_voltage>
 800217c:	ed87 0b02 	vstr	d0, [r7, #8]
		  uint8_t LED_state;

		  if (battery_voltage >= 0.9*VBAT_MAX) {
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 8002182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002186:	a322      	add	r3, pc, #136	; (adr r3, 8002210 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fa3c 	bl	8000608 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002198:	f7fe fcbc 	bl	8000b14 <__aeabi_dcmpge>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_TIM_OC_DelayElapsedCallback+0x48>
			  LED_state = 0b1000;
 80021a2:	2308      	movs	r3, #8
 80021a4:	75fb      	strb	r3, [r7, #23]
 80021a6:	e029      	b.n	80021fc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
		  } else if (battery_voltage >= 0.8*VBAT_MAX) {
 80021a8:	4b21      	ldr	r3, [pc, #132]	; (8002230 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80021aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ae:	a31a      	add	r3, pc, #104	; (adr r3, 8002218 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fa28 	bl	8000608 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021c0:	f7fe fca8 	bl	8000b14 <__aeabi_dcmpge>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <HAL_TIM_OC_DelayElapsedCallback+0x70>
			  LED_state = 0b0100;
 80021ca:	2304      	movs	r3, #4
 80021cc:	75fb      	strb	r3, [r7, #23]
 80021ce:	e015      	b.n	80021fc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
		  } else if (battery_voltage >= 0.6*VBAT_MAX) {
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
 80021d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d6:	a312      	add	r3, pc, #72	; (adr r3, 8002220 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021e8:	f7fe fc94 	bl	8000b14 <__aeabi_dcmpge>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_TIM_OC_DelayElapsedCallback+0x98>
			  LED_state = 0b0010;
 80021f2:	2302      	movs	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
 80021f6:	e001      	b.n	80021fc <HAL_TIM_OC_DelayElapsedCallback+0x9c>
		  } else {
			  LED_state = 0b0001;
 80021f8:	2301      	movs	r3, #1
 80021fa:	75fb      	strb	r3, [r7, #23]
		  }

		  set_battery_indicator_leds(LED_state);
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fb18 	bl	8002834 <set_battery_indicator_leds>
	  }
  }
}
 8002204:	bf00      	nop
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	f3af 8000 	nop.w
 8002210:	cccccccd 	.word	0xcccccccd
 8002214:	3feccccc 	.word	0x3feccccc
 8002218:	9999999a 	.word	0x9999999a
 800221c:	3fe99999 	.word	0x3fe99999
 8002220:	33333333 	.word	0x33333333
 8002224:	3fe33333 	.word	0x3fe33333
 8002228:	200002e4 	.word	0x200002e4
 800222c:	20000010 	.word	0x20000010
 8002230:	20000008 	.word	0x20000008

08002234 <select_ADC_CH10>:
/**
  * @Select channel 10 of the ADC
  * @Param none
  */
void select_ADC_CH10(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800223a:	463b      	mov	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_10;
 8002246:	230a      	movs	r3, #10
 8002248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002252:	463b      	mov	r3, r7
 8002254:	4619      	mov	r1, r3
 8002256:	4806      	ldr	r0, [pc, #24]	; (8002270 <select_ADC_CH10+0x3c>)
 8002258:	f001 f948 	bl	80034ec <HAL_ADC_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <select_ADC_CH10+0x32>
  {
	Error_Handler();
 8002262:	f000 fb7d 	bl	8002960 <Error_Handler>
  }
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000032c 	.word	0x2000032c

08002274 <select_ADC_CH11>:

/**
  * @Select channel 11 of the ADC
  * @Param none
  */
void select_ADC_CH11(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800227a:	463b      	mov	r3, r7
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8002286:	230b      	movs	r3, #11
 8002288:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002292:	463b      	mov	r3, r7
 8002294:	4619      	mov	r1, r3
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <select_ADC_CH11+0x3c>)
 8002298:	f001 f928 	bl	80034ec <HAL_ADC_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <select_ADC_CH11+0x32>
  {
	Error_Handler();
 80022a2:	f000 fb5d 	bl	8002960 <Error_Handler>
  }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000032c 	.word	0x2000032c

080022b4 <select_ADC_CH12>:

/**
  * @Select channel 12 of the ADC
  * @Param none
  */
void select_ADC_CH12(void) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_12;
 80022c6:	230c      	movs	r3, #12
 80022c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d2:	463b      	mov	r3, r7
 80022d4:	4619      	mov	r1, r3
 80022d6:	4806      	ldr	r0, [pc, #24]	; (80022f0 <select_ADC_CH12+0x3c>)
 80022d8:	f001 f908 	bl	80034ec <HAL_ADC_ConfigChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <select_ADC_CH12+0x32>
  {
	Error_Handler();
 80022e2:	f000 fb3d 	bl	8002960 <Error_Handler>
  }
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000032c 	.word	0x2000032c
 80022f4:	00000000 	.word	0x00000000

080022f8 <get_pot_voltage>:

/**
  * @Return rounded value of potentiometer voltage
  * @pot = 1 for speed potentiometer, 2 for steering potentiometer
  */
double get_pot_voltage( int pot ) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	if (pot == 1) {
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <get_pot_voltage+0x14>
		select_ADC_CH11();
 8002306:	f7ff ffb5 	bl	8002274 <select_ADC_CH11>
 800230a:	e004      	b.n	8002316 <get_pot_voltage+0x1e>
	} else if (pot == 2) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d101      	bne.n	8002316 <get_pot_voltage+0x1e>
		select_ADC_CH12();
 8002312:	f7ff ffcf 	bl	80022b4 <select_ADC_CH12>
	}

	HAL_ADC_Start(&hadc1);
 8002316:	4824      	ldr	r0, [pc, #144]	; (80023a8 <get_pot_voltage+0xb0>)
 8002318:	f000 ff9c 	bl	8003254 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	4821      	ldr	r0, [pc, #132]	; (80023a8 <get_pot_voltage+0xb0>)
 8002322:	f001 f84b 	bl	80033bc <HAL_ADC_PollForConversion>
	uint8_t sample = HAL_ADC_GetValue(&hadc1);
 8002326:	4820      	ldr	r0, [pc, #128]	; (80023a8 <get_pot_voltage+0xb0>)
 8002328:	f001 f8d3 	bl	80034d2 <HAL_ADC_GetValue>
 800232c:	4603      	mov	r3, r0
 800232e:	75fb      	strb	r3, [r7, #23]

	double ret = (double) sample*(3.3/255.0);
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f8ee 	bl	8000514 <__aeabi_ui2d>
 8002338:	a319      	add	r3, pc, #100	; (adr r3, 80023a0 <get_pot_voltage+0xa8>)
 800233a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233e:	f7fe f963 	bl	8000608 <__aeabi_dmul>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	e9c7 2302 	strd	r2, r3, [r7, #8]
	ret = roundf(ret*10)/10.0;
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <get_pot_voltage+0xb4>)
 8002350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002354:	f7fe f958 	bl	8000608 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fc4a 	bl	8000bf8 <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	ee00 3a10 	vmov	s0, r3
 800236a:	f008 f87b 	bl	800a464 <roundf>
 800236e:	ee10 3a10 	vmov	r3, s0
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8f0 	bl	8000558 <__aeabi_f2d>
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <get_pot_voltage+0xb4>)
 800237e:	f7fe fa6d 	bl	800085c <__aeabi_ddiv>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ret;
 800238a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002392:	eeb0 0a47 	vmov.f32	s0, s14
 8002396:	eef0 0a67 	vmov.f32	s1, s15
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	4db41a81 	.word	0x4db41a81
 80023a4:	3f8a80e7 	.word	0x3f8a80e7
 80023a8:	2000032c 	.word	0x2000032c
 80023ac:	40240000 	.word	0x40240000

080023b0 <get_battery_voltage>:

/**
  * @Measure the voltage of the battery sensor circuit
  * @Param none
  */
double get_battery_voltage(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
	select_ADC_CH10();
 80023b6:	f7ff ff3d 	bl	8002234 <select_ADC_CH10>
	HAL_ADC_Start(&hadc1);
 80023ba:	4815      	ldr	r0, [pc, #84]	; (8002410 <get_battery_voltage+0x60>)
 80023bc:	f000 ff4a 	bl	8003254 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	4812      	ldr	r0, [pc, #72]	; (8002410 <get_battery_voltage+0x60>)
 80023c6:	f000 fff9 	bl	80033bc <HAL_ADC_PollForConversion>
	uint8_t sample = HAL_ADC_GetValue(&hadc1);
 80023ca:	4811      	ldr	r0, [pc, #68]	; (8002410 <get_battery_voltage+0x60>)
 80023cc:	f001 f881 	bl	80034d2 <HAL_ADC_GetValue>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
	double ret = (double) sample*(12.0/255.0);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f89c 	bl	8000514 <__aeabi_ui2d>
 80023dc:	a30a      	add	r3, pc, #40	; (adr r3, 8002408 <get_battery_voltage+0x58>)
 80023de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e2:	f7fe f911 	bl	8000608 <__aeabi_dmul>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	e9c7 2300 	strd	r2, r3, [r7]

	return ret;
 80023ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80023f6:	eeb0 0a47 	vmov.f32	s0, s14
 80023fa:	eef0 0a67 	vmov.f32	s1, s15
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	18181818 	.word	0x18181818
 800240c:	3fa81818 	.word	0x3fa81818
 8002410:	2000032c 	.word	0x2000032c

08002414 <get_rot_speed_set_l>:
  * 		based off the potentiometer voltages
  * @Param:
  * pot1Voltage - voltage of speed potentiometer
  * pot2Voltage - voltage of steering potentiometer
  */
double get_rot_speed_set_l( double pot1Voltage, double pot2Voltage ) {
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0
 800241a:	ed87 0b02 	vstr	d0, [r7, #8]
 800241e:	ed87 1b00 	vstr	d1, [r7]
	double speed_setting = (pot1Voltage - 1.5)*10.0/1.5;
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <get_rot_speed_set_l+0x100>)
 8002428:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800242c:	f7fd ff34 	bl	8000298 <__aeabi_dsub>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <get_rot_speed_set_l+0x104>)
 800243e:	f7fe f8e3 	bl	8000608 <__aeabi_dmul>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	4b31      	ldr	r3, [pc, #196]	; (8002514 <get_rot_speed_set_l+0x100>)
 8002450:	f7fe fa04 	bl	800085c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double steer_setting = (pot2Voltage - 1.5)*10.0/1.5;
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <get_rot_speed_set_l+0x100>)
 8002462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002466:	f7fd ff17 	bl	8000298 <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4610      	mov	r0, r2
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b28      	ldr	r3, [pc, #160]	; (8002518 <get_rot_speed_set_l+0x104>)
 8002478:	f7fe f8c6 	bl	8000608 <__aeabi_dmul>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <get_rot_speed_set_l+0x100>)
 800248a:	f7fe f9e7 	bl	800085c <__aeabi_ddiv>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double rot_speed;
	double speed_factor = 4*speed_setting;
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <get_rot_speed_set_l+0x108>)
 800249c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024a0:	f7fe f8b2 	bl	8000608 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// turning right
	if (steer_setting >= 0.0) {
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024b8:	f7fe fb2c 	bl	8000b14 <__aeabi_dcmpge>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <get_rot_speed_set_l+0xc6>
		rot_speed = speed_factor*10;
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <get_rot_speed_set_l+0x104>)
 80024c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024cc:	f7fe f89c 	bl	8000608 <__aeabi_dmul>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80024d8:	e010      	b.n	80024fc <get_rot_speed_set_l+0xe8>
	// turning left
	} else {
		rot_speed = speed_factor*(10 + steer_setting);
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <get_rot_speed_set_l+0x104>)
 80024e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e4:	f7fd feda 	bl	800029c <__adddf3>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024f0:	f7fe f88a 	bl	8000608 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	return rot_speed;
 80024fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002500:	ec43 2b17 	vmov	d7, r2, r3
}
 8002504:	eeb0 0a47 	vmov.f32	s0, s14
 8002508:	eef0 0a67 	vmov.f32	s1, s15
 800250c:	3730      	adds	r7, #48	; 0x30
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	3ff80000 	.word	0x3ff80000
 8002518:	40240000 	.word	0x40240000
 800251c:	40100000 	.word	0x40100000

08002520 <get_rot_speed_set_r>:
  * 		based off the potentiometer voltages
  * @Param:
  * pot1Voltage - voltage of speed potentiometer
  * pot2Voltage - voltage of steering potentiometer
  */
double get_rot_speed_set_r( double pot1Voltage, double pot2Voltage ) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	ed87 0b02 	vstr	d0, [r7, #8]
 800252a:	ed87 1b00 	vstr	d1, [r7]
	double speed_setting = (pot1Voltage - 1.5)*10.0/1.5;
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <get_rot_speed_set_r+0x100>)
 8002534:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002538:	f7fd feae 	bl	8000298 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4b36      	ldr	r3, [pc, #216]	; (8002624 <get_rot_speed_set_r+0x104>)
 800254a:	f7fe f85d 	bl	8000608 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	4b31      	ldr	r3, [pc, #196]	; (8002620 <get_rot_speed_set_r+0x100>)
 800255c:	f7fe f97e 	bl	800085c <__aeabi_ddiv>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double steer_setting = (pot2Voltage - 1.5)*10.0/1.5;
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <get_rot_speed_set_r+0x100>)
 800256e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002572:	f7fd fe91 	bl	8000298 <__aeabi_dsub>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b28      	ldr	r3, [pc, #160]	; (8002624 <get_rot_speed_set_r+0x104>)
 8002584:	f7fe f840 	bl	8000608 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <get_rot_speed_set_r+0x100>)
 8002596:	f7fe f961 	bl	800085c <__aeabi_ddiv>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double rot_speed;
	double speed_factor = 4*speed_setting;
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b20      	ldr	r3, [pc, #128]	; (8002628 <get_rot_speed_set_r+0x108>)
 80025a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025ac:	f7fe f82c 	bl	8000608 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// turning right
	if (steer_setting >= 0.0) {
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025c4:	f7fe faa6 	bl	8000b14 <__aeabi_dcmpge>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <get_rot_speed_set_r+0xd2>
		rot_speed = speed_factor*(10 - steer_setting);
 80025ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	4913      	ldr	r1, [pc, #76]	; (8002624 <get_rot_speed_set_r+0x104>)
 80025d8:	f7fd fe5e 	bl	8000298 <__aeabi_dsub>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025e4:	f7fe f810 	bl	8000608 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80025f0:	e00a      	b.n	8002608 <get_rot_speed_set_r+0xe8>
	// turning left
	} else {
		rot_speed = speed_factor*10;
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <get_rot_speed_set_r+0x104>)
 80025f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025fc:	f7fe f804 	bl	8000608 <__aeabi_dmul>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	return rot_speed;
 8002608:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800260c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002610:	eeb0 0a47 	vmov.f32	s0, s14
 8002614:	eef0 0a67 	vmov.f32	s1, s15
 8002618:	3730      	adds	r7, #48	; 0x30
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	3ff80000 	.word	0x3ff80000
 8002624:	40240000 	.word	0x40240000
 8002628:	40100000 	.word	0x40100000

0800262c <set_PWM_pulse>:
  * 	and set the MUX select based on positive/negative pulse values
  * @Param:
  * pulse_l - duty cycle of left DC motor PWM signal
  * pulse_r - duty cycle of right DC motor PWM signal
  */
void set_PWM_pulse( double pulse_l, double pulse_r ) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	ed87 0b02 	vstr	d0, [r7, #8]
 8002636:	ed87 1b00 	vstr	d1, [r7]
	if ( pulse_l <= 0.0 ){
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002646:	f7fe fa5b 	bl	8000b00 <__aeabi_dcmple>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d006      	beq.n	800265e <set_PWM_pulse+0x32>
		HAL_GPIO_WritePin(GPIOB, MUX_SELECT1_Pin, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002656:	4821      	ldr	r0, [pc, #132]	; (80026dc <set_PWM_pulse+0xb0>)
 8002658:	f001 fc14 	bl	8003e84 <HAL_GPIO_WritePin>
 800265c:	e005      	b.n	800266a <set_PWM_pulse+0x3e>
	} else {
		HAL_GPIO_WritePin(GPIOB, MUX_SELECT1_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002664:	481d      	ldr	r0, [pc, #116]	; (80026dc <set_PWM_pulse+0xb0>)
 8002666:	f001 fc0d 	bl	8003e84 <HAL_GPIO_WritePin>
	}

	if ( pulse_r <= 0.0 ){
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002676:	f7fe fa43 	bl	8000b00 <__aeabi_dcmple>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d006      	beq.n	800268e <set_PWM_pulse+0x62>
		HAL_GPIO_WritePin(GPIOB, MUX_SELECT2_Pin, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002686:	4815      	ldr	r0, [pc, #84]	; (80026dc <set_PWM_pulse+0xb0>)
 8002688:	f001 fbfc 	bl	8003e84 <HAL_GPIO_WritePin>
 800268c:	e005      	b.n	800269a <set_PWM_pulse+0x6e>
	} else {
		HAL_GPIO_WritePin(GPIOB, MUX_SELECT2_Pin, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <set_PWM_pulse+0xb0>)
 8002696:	f001 fbf5 	bl	8003e84 <HAL_GPIO_WritePin>
	}


	int pulse_li = (int) pulse_l;
 800269a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800269e:	f7fe fa63 	bl	8000b68 <__aeabi_d2iz>
 80026a2:	4603      	mov	r3, r0
 80026a4:	617b      	str	r3, [r7, #20]
	int pulse_ri = (int) pulse_r;
 80026a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026aa:	f7fe fa5d 	bl	8000b68 <__aeabi_d2iz>
 80026ae:	4603      	mov	r3, r0
 80026b0:	613b      	str	r3, [r7, #16]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, abs(pulse_li));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026b8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <set_PWM_pulse+0xb4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, abs(pulse_ri));
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80026c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <set_PWM_pulse+0xb8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80026d2:	bf00      	nop
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020400 	.word	0x40020400
 80026e0:	200003bc 	.word	0x200003bc
 80026e4:	2000029c 	.word	0x2000029c

080026e8 <display_lcd>:

/**
  * @Display text on the LCD in Run Mode
  * @Param none
  */
void display_lcd() {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
	if (!mode) {
 80026ee:	4b48      	ldr	r3, [pc, #288]	; (8002810 <display_lcd+0x128>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	f083 0301 	eor.w	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 8085 	bne.w	8002808 <display_lcd+0x120>
		return;
	}

	lcd16x2_1stLine();
 80026fe:	f7fe fedb 	bl	80014b8 <lcd16x2_1stLine>
	lcd16x2_printf("LRPM|  ON  |RRPM");
 8002702:	4844      	ldr	r0, [pc, #272]	; (8002814 <display_lcd+0x12c>)
 8002704:	f7fe ff1a 	bl	800153c <lcd16x2_printf>
	lcd16x2_2ndLine();
 8002708:	f7fe fede 	bl	80014c8 <lcd16x2_2ndLine>
	int wheel_lrpm = round(lrpm/6);
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <display_lcd+0x130>)
 800270e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <display_lcd+0x134>)
 8002718:	f7fe f8a0 	bl	800085c <__aeabi_ddiv>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	ec43 2b17 	vmov	d7, r2, r3
 8002724:	eeb0 0a47 	vmov.f32	s0, s14
 8002728:	eef0 0a67 	vmov.f32	s1, s15
 800272c:	f007 fe54 	bl	800a3d8 <round>
 8002730:	ec53 2b10 	vmov	r2, r3, d0
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa16 	bl	8000b68 <__aeabi_d2iz>
 800273c:	4603      	mov	r3, r0
 800273e:	607b      	str	r3, [r7, #4]
	int wheel_rrpm = round(rrpm/6);
 8002740:	4b37      	ldr	r3, [pc, #220]	; (8002820 <display_lcd+0x138>)
 8002742:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <display_lcd+0x134>)
 800274c:	f7fe f886 	bl	800085c <__aeabi_ddiv>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b17 	vmov	d7, r2, r3
 8002758:	eeb0 0a47 	vmov.f32	s0, s14
 800275c:	eef0 0a67 	vmov.f32	s1, s15
 8002760:	f007 fe3a 	bl	800a3d8 <round>
 8002764:	ec53 2b10 	vmov	r2, r3, d0
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe f9fc 	bl	8000b68 <__aeabi_d2iz>
 8002770:	4603      	mov	r3, r0
 8002772:	603b      	str	r3, [r7, #0]

	int n_spaces = 16;
 8002774:	2310      	movs	r3, #16
 8002776:	60fb      	str	r3, [r7, #12]
	if (abs(wheel_lrpm/10) > 0) {
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <display_lcd+0x13c>)
 800277c:	fb82 1203 	smull	r1, r2, r2, r3
 8002780:	1092      	asrs	r2, r2, #2
 8002782:	17db      	asrs	r3, r3, #31
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	bfb8      	it	lt
 800278a:	425b      	neglt	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	dd03      	ble.n	8002798 <display_lcd+0xb0>
		n_spaces -= 2;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b02      	subs	r3, #2
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e002      	b.n	800279e <display_lcd+0xb6>
	} else {
		n_spaces -= 1;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3b01      	subs	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
	}
	if (abs(wheel_lrpm/10) > 0) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a20      	ldr	r2, [pc, #128]	; (8002824 <display_lcd+0x13c>)
 80027a2:	fb82 1203 	smull	r1, r2, r2, r3
 80027a6:	1092      	asrs	r2, r2, #2
 80027a8:	17db      	asrs	r3, r3, #31
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bfb8      	it	lt
 80027b0:	425b      	neglt	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	dd03      	ble.n	80027be <display_lcd+0xd6>
		n_spaces -= 2;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3b02      	subs	r3, #2
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e002      	b.n	80027c4 <display_lcd+0xdc>
	} else {
		n_spaces -= 1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
	}
	if (wheel_lrpm < 0) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da02      	bge.n	80027d0 <display_lcd+0xe8>
		n_spaces -= 1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
	}
	if (wheel_rrpm < 0) {
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da02      	bge.n	80027dc <display_lcd+0xf4>
		n_spaces -= 1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
	}

	lcd16x2_printf("%d", wheel_lrpm);
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4812      	ldr	r0, [pc, #72]	; (8002828 <display_lcd+0x140>)
 80027e0:	f7fe feac 	bl	800153c <lcd16x2_printf>
	for (int i = 0; i < n_spaces; i++) {
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	e005      	b.n	80027f6 <display_lcd+0x10e>
		lcd16x2_printf(" ");
 80027ea:	4810      	ldr	r0, [pc, #64]	; (800282c <display_lcd+0x144>)
 80027ec:	f7fe fea6 	bl	800153c <lcd16x2_printf>
	for (int i = 0; i < n_spaces; i++) {
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	dbf5      	blt.n	80027ea <display_lcd+0x102>
	}
	lcd16x2_printf("%d     ", wheel_rrpm);
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	480b      	ldr	r0, [pc, #44]	; (8002830 <display_lcd+0x148>)
 8002802:	f7fe fe9b 	bl	800153c <lcd16x2_printf>
 8002806:	e000      	b.n	800280a <display_lcd+0x122>
		return;
 8002808:	bf00      	nop
}
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000010 	.word	0x20000010
 8002814:	0800a4c8 	.word	0x0800a4c8
 8002818:	20000240 	.word	0x20000240
 800281c:	40180000 	.word	0x40180000
 8002820:	20000238 	.word	0x20000238
 8002824:	66666667 	.word	0x66666667
 8002828:	0800a4dc 	.word	0x0800a4dc
 800282c:	0800a4e0 	.word	0x0800a4e0
 8002830:	0800a4e4 	.word	0x0800a4e4

08002834 <set_battery_indicator_leds>:

/**
  * @Set the state of all LEDs based on the mode and battery voltage
  * @Param battery_voltage sensed from battery sensor circuit
  */
void set_battery_indicator_leds(uint8_t LED_state) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	if (LED_state == 0) {
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d114      	bne.n	800286e <set_battery_indicator_leds+0x3a>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	4844      	ldr	r0, [pc, #272]	; (800295c <set_battery_indicator_leds+0x128>)
 800284a:	f001 fb1b 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
 800284e:	2200      	movs	r2, #0
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	4842      	ldr	r0, [pc, #264]	; (800295c <set_battery_indicator_leds+0x128>)
 8002854:	f001 fb16 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2120      	movs	r1, #32
 800285c:	483f      	ldr	r0, [pc, #252]	; (800295c <set_battery_indicator_leds+0x128>)
 800285e:	f001 fb11 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT4_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	2110      	movs	r1, #16
 8002866:	483d      	ldr	r0, [pc, #244]	; (800295c <set_battery_indicator_leds+0x128>)
 8002868:	f001 fb0c 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_TogglePin(GPIOB, LED_OUT4_Pin);
	}
}
 800286c:	e072      	b.n	8002954 <set_battery_indicator_leds+0x120>
	} else if (LED_state&0b1000 && ( (LED_state^0b1000) == 0)) {
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <set_battery_indicator_leds+0x74>
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	2b08      	cmp	r3, #8
 800287c:	d114      	bne.n	80028a8 <set_battery_indicator_leds+0x74>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_SET);
 800287e:	2201      	movs	r2, #1
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	4836      	ldr	r0, [pc, #216]	; (800295c <set_battery_indicator_leds+0x128>)
 8002884:	f001 fafe 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	4833      	ldr	r0, [pc, #204]	; (800295c <set_battery_indicator_leds+0x128>)
 800288e:	f001 faf9 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	2120      	movs	r1, #32
 8002896:	4831      	ldr	r0, [pc, #196]	; (800295c <set_battery_indicator_leds+0x128>)
 8002898:	f001 faf4 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT4_Pin, GPIO_PIN_RESET);
 800289c:	2200      	movs	r2, #0
 800289e:	2110      	movs	r1, #16
 80028a0:	482e      	ldr	r0, [pc, #184]	; (800295c <set_battery_indicator_leds+0x128>)
 80028a2:	f001 faef 	bl	8003e84 <HAL_GPIO_WritePin>
 80028a6:	e055      	b.n	8002954 <set_battery_indicator_leds+0x120>
	} else if (LED_state&0b0100 && ( (LED_state^0b0100) == 0)) {
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <set_battery_indicator_leds+0xae>
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d114      	bne.n	80028e2 <set_battery_indicator_leds+0xae>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	4827      	ldr	r0, [pc, #156]	; (800295c <set_battery_indicator_leds+0x128>)
 80028be:	f001 fae1 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	4825      	ldr	r0, [pc, #148]	; (800295c <set_battery_indicator_leds+0x128>)
 80028c8:	f001 fadc 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
 80028cc:	2200      	movs	r2, #0
 80028ce:	2120      	movs	r1, #32
 80028d0:	4822      	ldr	r0, [pc, #136]	; (800295c <set_battery_indicator_leds+0x128>)
 80028d2:	f001 fad7 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT4_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2110      	movs	r1, #16
 80028da:	4820      	ldr	r0, [pc, #128]	; (800295c <set_battery_indicator_leds+0x128>)
 80028dc:	f001 fad2 	bl	8003e84 <HAL_GPIO_WritePin>
 80028e0:	e038      	b.n	8002954 <set_battery_indicator_leds+0x120>
	} else if (LED_state&0b0010 && ( (LED_state^0b0010) == 0)) {
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <set_battery_indicator_leds+0xe8>
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d114      	bne.n	800291c <set_battery_indicator_leds+0xe8>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	4819      	ldr	r0, [pc, #100]	; (800295c <set_battery_indicator_leds+0x128>)
 80028f8:	f001 fac4 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
 80028fc:	2200      	movs	r2, #0
 80028fe:	2140      	movs	r1, #64	; 0x40
 8002900:	4816      	ldr	r0, [pc, #88]	; (800295c <set_battery_indicator_leds+0x128>)
 8002902:	f001 fabf 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	2120      	movs	r1, #32
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <set_battery_indicator_leds+0x128>)
 800290c:	f001 faba 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT4_Pin, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	2110      	movs	r1, #16
 8002914:	4811      	ldr	r0, [pc, #68]	; (800295c <set_battery_indicator_leds+0x128>)
 8002916:	f001 fab5 	bl	8003e84 <HAL_GPIO_WritePin>
 800291a:	e01b      	b.n	8002954 <set_battery_indicator_leds+0x120>
	} else if (LED_state&0x0001 && ( (LED_state^0b0001) == 0)) {
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d016      	beq.n	8002954 <set_battery_indicator_leds+0x120>
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d113      	bne.n	8002954 <set_battery_indicator_leds+0x120>
		HAL_GPIO_WritePin(GPIOB, LED_OUT1_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	480a      	ldr	r0, [pc, #40]	; (800295c <set_battery_indicator_leds+0x128>)
 8002932:	f001 faa7 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT2_Pin, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	4808      	ldr	r0, [pc, #32]	; (800295c <set_battery_indicator_leds+0x128>)
 800293c:	f001 faa2 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LED_OUT3_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	2120      	movs	r1, #32
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <set_battery_indicator_leds+0x128>)
 8002946:	f001 fa9d 	bl	8003e84 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(GPIOB, LED_OUT4_Pin);
 800294a:	2110      	movs	r1, #16
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <set_battery_indicator_leds+0x128>)
 800294e:	f001 fab2 	bl	8003eb6 <HAL_GPIO_TogglePin>
}
 8002952:	e7ff      	b.n	8002954 <set_battery_indicator_leds+0x120>
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40020400 	.word	0x40020400

08002960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002964:	b672      	cpsid	i
}
 8002966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002968:	e7fe      	b.n	8002968 <Error_Handler+0x8>

0800296a <init_pid>:
 *      Author: bcimring
 */

#include "pid.h"

void init_pid(struct PID *controller, double K_p, double K_i, double K_d, int max, int min) {
 800296a:	b580      	push	{r7, lr}
 800296c:	b08a      	sub	sp, #40	; 0x28
 800296e:	af00      	add	r7, sp, #0
 8002970:	6278      	str	r0, [r7, #36]	; 0x24
 8002972:	ed87 0b06 	vstr	d0, [r7, #24]
 8002976:	ed87 1b04 	vstr	d1, [r7, #16]
 800297a:	ed87 2b02 	vstr	d2, [r7, #8]
 800297e:	6239      	str	r1, [r7, #32]
 8002980:	607a      	str	r2, [r7, #4]
	controller->K_p = K_p;
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	e9c1 2302 	strd	r2, r3, [r1, #8]
	controller->K_i = K_i;
 800298c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800298e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002992:	e9c1 2300 	strd	r2, r3, [r1]
	controller->K_d = K_d;
 8002996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800299c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	controller->e = 0.0;
 80029a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	controller->u = 0.0;
 80029ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	controller->i = 0.0;
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	controller->max = max;
 80029ca:	6a38      	ldr	r0, [r7, #32]
 80029cc:	f7fd fdb2 	bl	8000534 <__aeabi_i2d>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	controller->min = min;
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fd fdaa 	bl	8000534 <__aeabi_i2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80029ea:	bf00      	nop
 80029ec:	3728      	adds	r7, #40	; 0x28
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <set_pulse_PID>:

double set_pulse_PID(struct PID *pid, double sp, double pv) {
 80029f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f6:	b08c      	sub	sp, #48	; 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6178      	str	r0, [r7, #20]
 80029fc:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a00:	ed87 1b00 	vstr	d1, [r7]
	double e_prev = pid->e;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->e = sp - pv;
 8002a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a16:	f7fd fc3f 	bl	8000298 <__aeabi_dsub>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	6979      	ldr	r1, [r7, #20]
 8002a20:	e9c1 2306 	strd	r2, r3, [r1, #24]
	double tmp_i = pid->i + pid->e;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a30:	f7fd fc34 	bl	800029c <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double out = pid->K_p *(pid->e)  +  pid->K_i * (tmp_i)  +  pid->K_d *(pid->e - e_prev);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a48:	f7fd fdde 	bl	8000608 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a5e:	f7fd fdd3 	bl	8000608 <__aeabi_dmul>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4620      	mov	r0, r4
 8002a68:	4629      	mov	r1, r5
 8002a6a:	f7fd fc17 	bl	800029c <__adddf3>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a86:	f7fd fc07 	bl	8000298 <__aeabi_dsub>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fdb9 	bl	8000608 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	f7fd fbfd 	bl	800029c <__adddf3>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (( out < pid->max ) && ( out > pid->min )) {
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ab0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ab4:	f7fe f81a 	bl	8000aec <__aeabi_dcmplt>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00f      	beq.n	8002ade <set_pulse_PID+0xec>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ac4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac8:	f7fe f82e 	bl	8000b28 <__aeabi_dcmpgt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <set_pulse_PID+0xec>
		pid->i = tmp_i;
 8002ad2:	6979      	ldr	r1, [r7, #20]
 8002ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8002adc:	e01e      	b.n	8002b1c <set_pulse_PID+0x12a>
	} else if ( out >= pid->max ) {
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ae4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ae8:	f7fe f814 	bl	8000b14 <__aeabi_dcmpge>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <set_pulse_PID+0x10c>
		out = pid->max;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002af8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002afc:	e00e      	b.n	8002b1c <set_pulse_PID+0x12a>
	} else if ( out <= pid->min ) {
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b08:	f7fd fffa 	bl	8000b00 <__aeabi_dcmple>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <set_pulse_PID+0x12a>
		out = pid->min;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	}

	return out;
 8002b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b20:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b24:	eeb0 0a47 	vmov.f32	s0, s14
 8002b28:	eef0 0a67 	vmov.f32	s1, s15
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b48:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4a:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_MspInit+0x4c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800

08002b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_ADC_MspInit+0x7c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d127      	bne.n	8002bf6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a15      	ldr	r2, [pc, #84]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a0e      	ldr	r2, [pc, #56]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_ADC_MspInit+0x80>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = BAT_IN_Pin|POT_IN1_Pin|POT_IN2_Pin;
 8002bde:	2307      	movs	r3, #7
 8002be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002be2:	2303      	movs	r3, #3
 8002be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4805      	ldr	r0, [pc, #20]	; (8002c08 <HAL_ADC_MspInit+0x84>)
 8002bf2:	f000 ffab 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002bf6:	bf00      	nop
 8002bf8:	3728      	adds	r7, #40	; 0x28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40012000 	.word	0x40012000
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020800 	.word	0x40020800

08002c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_TIM_Base_MspInit+0x108>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c3a:	e066      	b.n	8002d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d116      	bne.n	8002c74 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a32      	ldr	r2, [pc, #200]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	61bb      	str	r3, [r7, #24]
 8002c60:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	201c      	movs	r0, #28
 8002c68:	f000 ff39 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c6c:	201c      	movs	r0, #28
 8002c6e:	f000 ff52 	bl	8003b16 <HAL_NVIC_EnableIRQ>
}
 8002c72:	e04a      	b.n	8002d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <HAL_TIM_Base_MspInit+0x110>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d116      	bne.n	8002cac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	201d      	movs	r0, #29
 8002ca0:	f000 ff1d 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ca4:	201d      	movs	r0, #29
 8002ca6:	f000 ff36 	bl	8003b16 <HAL_NVIC_EnableIRQ>
}
 8002caa:	e02e      	b.n	8002d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM4)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <HAL_TIM_Base_MspInit+0x114>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
}
 8002cd2:	e01a      	b.n	8002d0a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM5)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	; (8002d24 <HAL_TIM_Base_MspInit+0x118>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d115      	bne.n	8002d0a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_TIM_Base_MspInit+0x10c>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2032      	movs	r0, #50	; 0x32
 8002d00:	f000 feed 	bl	8003ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d04:	2032      	movs	r0, #50	; 0x32
 8002d06:	f000 ff06 	bl	8003b16 <HAL_NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40000800 	.word	0x40000800
 8002d24:	40000c00 	.word	0x40000c00

08002d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d11e      	bne.n	8002d88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b22      	ldr	r3, [pc, #136]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_CH1_Pin;
 8002d66:	2301      	movs	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d76:	2301      	movs	r3, #1
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH1_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4816      	ldr	r0, [pc, #88]	; (8002ddc <HAL_TIM_MspPostInit+0xb4>)
 8002d82:	f000 fee3 	bl	8003b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d86:	e022      	b.n	8002dce <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <HAL_TIM_MspPostInit+0xb8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d11d      	bne.n	8002dce <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_TIM_MspPostInit+0xb0>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_CH2_Pin;
 8002dae:	2302      	movs	r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_CH2_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f107 0314 	add.w	r3, r7, #20
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <HAL_TIM_MspPostInit+0xb4>)
 8002dca:	f000 febf 	bl	8003b4c <HAL_GPIO_Init>
}
 8002dce:	bf00      	nop
 8002dd0:	3728      	adds	r7, #40	; 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	40000c00 	.word	0x40000c00

08002de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <NMI_Handler+0x4>

08002dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <MemManage_Handler+0x4>

08002df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <BusFault_Handler+0x4>

08002dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <UsageFault_Handler+0x4>

08002e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e30:	f000 f988 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e3c:	2040      	movs	r0, #64	; 0x40
 8002e3e:	f001 f855 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e46:	f001 f851 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM2_IRQHandler+0x10>)
 8002e56:	f001 fff1 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200003bc 	.word	0x200003bc

08002e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM3_IRQHandler+0x10>)
 8002e6a:	f001 ffe7 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200002e4 	.word	0x200002e4

08002e78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002e7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e80:	f001 f834 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <TIM5_IRQHandler+0x10>)
 8002e8e:	f001 ffd5 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000029c 	.word	0x2000029c

08002e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
	return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_kill>:

int _kill(int pid, int sig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eb6:	f002 fe19 	bl	8005aec <__errno>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2216      	movs	r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
	return -1;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_exit>:

void _exit (int status)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffe7 	bl	8002eac <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ede:	e7fe      	b.n	8002ede <_exit+0x12>

08002ee0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	e00a      	b.n	8002f08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ef2:	f3af 8000 	nop.w
 8002ef6:	4601      	mov	r1, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60ba      	str	r2, [r7, #8]
 8002efe:	b2ca      	uxtb	r2, r1
 8002f00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	3301      	adds	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dbf0      	blt.n	8002ef2 <_read+0x12>
	}

return len;
 8002f10:	687b      	ldr	r3, [r7, #4]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e009      	b.n	8002f40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dbf1      	blt.n	8002f2c <_write+0x12>
	}
	return len;
 8002f48:	687b      	ldr	r3, [r7, #4]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_close>:

int _close(int file)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
	return -1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f7a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <_isatty>:

int _isatty(int file)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
	return 1;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
	return 0;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	; (8003018 <_sbrk+0x5c>)
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <_sbrk+0x60>)
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <_sbrk+0x64>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <_sbrk+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fec:	f002 fd7e 	bl	8005aec <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e009      	b.n	8003010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	; (8003020 <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <_sbrk+0x64>)
 800300c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20018000 	.word	0x20018000
 800301c:	00000400 	.word	0x00000400
 8003020:	20000248 	.word	0x20000248
 8003024:	20000418 	.word	0x20000418

08003028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <SystemInit+0x20>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <SystemInit+0x20>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800304c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003084 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003052:	490e      	ldr	r1, [pc, #56]	; (800308c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003058:	e002      	b.n	8003060 <LoopCopyDataInit>

0800305a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800305c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305e:	3304      	adds	r3, #4

08003060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003064:	d3f9      	bcc.n	800305a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003068:	4c0b      	ldr	r4, [pc, #44]	; (8003098 <LoopFillZerobss+0x26>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800306c:	e001      	b.n	8003072 <LoopFillZerobss>

0800306e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003070:	3204      	adds	r2, #4

08003072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003074:	d3fb      	bcc.n	800306e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003076:	f7ff ffd7 	bl	8003028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307a:	f002 fd3d 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800307e:	f7fe fa8f 	bl	80015a0 <main>
  bx  lr    
 8003082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003084:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800308c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003090:	0800a9c4 	.word	0x0800a9c4
  ldr r2, =_sbss
 8003094:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003098:	20000418 	.word	0x20000418

0800309c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800309c:	e7fe      	b.n	800309c <ADC_IRQHandler>
	...

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_Init+0x40>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_Init+0x40>)
 80030b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_Init+0x40>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 fcfd 	bl	8003ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f000 f808 	bl	80030e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7ff fd2e 	bl	8002b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_InitTick+0x54>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x58>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fd15 	bl	8003b32 <HAL_SYSTICK_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e00e      	b.n	8003130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d80a      	bhi.n	800312e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003118:	2200      	movs	r2, #0
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f000 fcdd 	bl	8003ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <HAL_InitTick+0x5c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000014 	.word	0x20000014
 800313c:	2000001c 	.word	0x2000001c
 8003140:	20000018 	.word	0x20000018

08003144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_IncTick+0x20>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x24>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <HAL_IncTick+0x24>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000001c 	.word	0x2000001c
 8003168:	20000404 	.word	0x20000404

0800316c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return uwTick;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <HAL_GetTick+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000404 	.word	0x20000404

08003184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff ffee 	bl	800316c <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d005      	beq.n	80031aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <HAL_Delay+0x44>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031aa:	bf00      	nop
 80031ac:	f7ff ffde 	bl	800316c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d8f7      	bhi.n	80031ac <HAL_Delay+0x28>
  {
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000001c 	.word	0x2000001c

080031cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e033      	b.n	800324a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fcca 	bl	8002b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003212:	f023 0302 	bic.w	r3, r3, #2
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa86 	bl	8003730 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	e001      	b.n	8003240 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADC_Start+0x1a>
 800326a:	2302      	movs	r3, #2
 800326c:	e097      	b.n	800339e <HAL_ADC_Start+0x14a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d018      	beq.n	80032b6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003294:	4b45      	ldr	r3, [pc, #276]	; (80033ac <HAL_ADC_Start+0x158>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a45      	ldr	r2, [pc, #276]	; (80033b0 <HAL_ADC_Start+0x15c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0c9a      	lsrs	r2, r3, #18
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80032a8:	e002      	b.n	80032b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f9      	bne.n	80032aa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d15f      	bne.n	8003384 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d007      	beq.n	80032f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d106      	bne.n	8003312 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f023 0206 	bic.w	r2, r3, #6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
 8003310:	e002      	b.n	8003318 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_ADC_Start+0x160>)
 8003322:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800332c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10f      	bne.n	800335a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d129      	bne.n	800339c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e020      	b.n	800339c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_ADC_Start+0x164>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d11b      	bne.n	800339c <HAL_ADC_Start+0x148>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d114      	bne.n	800339c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	e00b      	b.n	800339c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000014 	.word	0x20000014
 80033b0:	431bde83 	.word	0x431bde83
 80033b4:	40012300 	.word	0x40012300
 80033b8:	40012000 	.word	0x40012000

080033bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d8:	d113      	bne.n	8003402 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e8:	d10b      	bne.n	8003402 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e063      	b.n	80034ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003402:	f7ff feb3 	bl	800316c <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003408:	e021      	b.n	800344e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d01d      	beq.n	800344e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_ADC_PollForConversion+0x6c>
 8003418:	f7ff fea8 	bl	800316c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d212      	bcs.n	800344e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d00b      	beq.n	800344e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0204 	orr.w	r2, r3, #4
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e03d      	b.n	80034ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b02      	cmp	r3, #2
 800345a:	d1d6      	bne.n	800340a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0212 	mvn.w	r2, #18
 8003464:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d123      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11f      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d111      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d105      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	f043 0201 	orr.w	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1c>
 8003504:	2302      	movs	r3, #2
 8003506:	e105      	b.n	8003714 <HAL_ADC_ConfigChannel+0x228>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b09      	cmp	r3, #9
 8003516:	d925      	bls.n	8003564 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	3b1e      	subs	r3, #30
 800352e:	2207      	movs	r2, #7
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43da      	mvns	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	400a      	ands	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	4618      	mov	r0, r3
 8003550:	4603      	mov	r3, r0
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4403      	add	r3, r0
 8003556:	3b1e      	subs	r3, #30
 8003558:	409a      	lsls	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	e022      	b.n	80035aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	2207      	movs	r2, #7
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43da      	mvns	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	400a      	ands	r2, r1
 8003586:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6919      	ldr	r1, [r3, #16]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	b29b      	uxth	r3, r3
 8003598:	4618      	mov	r0, r3
 800359a:	4603      	mov	r3, r0
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4403      	add	r3, r0
 80035a0:	409a      	lsls	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d824      	bhi.n	80035fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3b05      	subs	r3, #5
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4618      	mov	r0, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	3b05      	subs	r3, #5
 80035ee:	fa00 f203 	lsl.w	r2, r0, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34
 80035fa:	e04c      	b.n	8003696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d824      	bhi.n	800364e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	3b23      	subs	r3, #35	; 0x23
 8003616:	221f      	movs	r2, #31
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43da      	mvns	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	400a      	ands	r2, r1
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	4618      	mov	r0, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b23      	subs	r3, #35	; 0x23
 8003640:	fa00 f203 	lsl.w	r2, r0, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
 800364c:	e023      	b.n	8003696 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	3b41      	subs	r3, #65	; 0x41
 8003660:	221f      	movs	r2, #31
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43da      	mvns	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	400a      	ands	r2, r1
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	4618      	mov	r0, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	3b41      	subs	r3, #65	; 0x41
 800368a:	fa00 f203 	lsl.w	r2, r0, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_ADC_ConfigChannel+0x234>)
 8003698:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a21      	ldr	r2, [pc, #132]	; (8003724 <HAL_ADC_ConfigChannel+0x238>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d109      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1cc>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b12      	cmp	r3, #18
 80036aa:	d105      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_ADC_ConfigChannel+0x238>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d123      	bne.n	800370a <HAL_ADC_ConfigChannel+0x21e>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b10      	cmp	r3, #16
 80036c8:	d003      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x1e6>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b11      	cmp	r3, #17
 80036d0:	d11b      	bne.n	800370a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d111      	bne.n	800370a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_ADC_ConfigChannel+0x23c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_ADC_ConfigChannel+0x240>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	0c9a      	lsrs	r2, r3, #18
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036fc:	e002      	b.n	8003704 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3b01      	subs	r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f9      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40012300 	.word	0x40012300
 8003724:	40012000 	.word	0x40012000
 8003728:	20000014 	.word	0x20000014
 800372c:	431bde83 	.word	0x431bde83

08003730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <ADC_Init+0x1f0>)
 800373a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	431a      	orrs	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	021a      	lsls	r2, r3, #8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6859      	ldr	r1, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	4a58      	ldr	r2, [pc, #352]	; (8003924 <ADC_Init+0x1f4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	e00f      	b.n	800382e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800381c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800382c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0202 	bic.w	r2, r2, #2
 800383c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6899      	ldr	r1, [r3, #8]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7e1b      	ldrb	r3, [r3, #24]
 8003848:	005a      	lsls	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01b      	beq.n	8003894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800386a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800387a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	3b01      	subs	r3, #1
 8003888:	035a      	lsls	r2, r3, #13
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e007      	b.n	80038a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	3b01      	subs	r3, #1
 80038c0:	051a      	lsls	r2, r3, #20
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038e6:	025a      	lsls	r2, r3, #9
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6899      	ldr	r1, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	029a      	lsls	r2, r3, #10
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40012300 	.word	0x40012300
 8003924:	0f000001 	.word	0x0f000001

08003928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800395a:	4a04      	ldr	r2, [pc, #16]	; (800396c <__NVIC_SetPriorityGrouping+0x44>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60d3      	str	r3, [r2, #12]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <__NVIC_GetPriorityGrouping+0x18>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 0307 	and.w	r3, r3, #7
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0b      	blt.n	80039b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4907      	ldr	r1, [pc, #28]	; (80039c4 <__NVIC_EnableIRQ+0x38>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	095b      	lsrs	r3, r3, #5
 80039ac:	2001      	movs	r0, #1
 80039ae:	fa00 f202 	lsl.w	r2, r0, r2
 80039b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db0a      	blt.n	80039f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	490c      	ldr	r1, [pc, #48]	; (8003a14 <__NVIC_SetPriority+0x4c>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	0112      	lsls	r2, r2, #4
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	440b      	add	r3, r1
 80039ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039f0:	e00a      	b.n	8003a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4908      	ldr	r1, [pc, #32]	; (8003a18 <__NVIC_SetPriority+0x50>)
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	3b04      	subs	r3, #4
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	440b      	add	r3, r1
 8003a06:	761a      	strb	r2, [r3, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000e100 	.word	0xe000e100
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f1c3 0307 	rsb	r3, r3, #7
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	bf28      	it	cs
 8003a3a:	2304      	movcs	r3, #4
 8003a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2b06      	cmp	r3, #6
 8003a44:	d902      	bls.n	8003a4c <NVIC_EncodePriority+0x30>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3b03      	subs	r3, #3
 8003a4a:	e000      	b.n	8003a4e <NVIC_EncodePriority+0x32>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43da      	mvns	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	401a      	ands	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a64:	f04f 31ff 	mov.w	r1, #4294967295
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43d9      	mvns	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	4313      	orrs	r3, r2
         );
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3724      	adds	r7, #36	; 0x24
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a94:	d301      	bcc.n	8003a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a96:	2301      	movs	r3, #1
 8003a98:	e00f      	b.n	8003aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <SysTick_Config+0x40>)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa2:	210f      	movs	r1, #15
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	f7ff ff8e 	bl	80039c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <SysTick_Config+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab2:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <SysTick_Config+0x40>)
 8003ab4:	2207      	movs	r2, #7
 8003ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000e010 	.word	0xe000e010

08003ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff29 	bl	8003928 <__NVIC_SetPriorityGrouping>
}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003af0:	f7ff ff3e 	bl	8003970 <__NVIC_GetPriorityGrouping>
 8003af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	6978      	ldr	r0, [r7, #20]
 8003afc:	f7ff ff8e 	bl	8003a1c <NVIC_EncodePriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff5d 	bl	80039c8 <__NVIC_SetPriority>
}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff31 	bl	800398c <__NVIC_EnableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ffa2 	bl	8003a84 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e159      	b.n	8003e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8148 	bne.w	8003e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d130      	bne.n	8003c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0201 	and.w	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d017      	beq.n	8003c3c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d123      	bne.n	8003c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a2 	beq.w	8003e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4a56      	ldr	r2, [pc, #344]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x2f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d019      	beq.n	8003d4e <HAL_GPIO_Init+0x202>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a48      	ldr	r2, [pc, #288]	; (8003e40 <HAL_GPIO_Init+0x2f4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0x1fe>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_GPIO_Init+0x2f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_GPIO_Init+0x2fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x1f6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_GPIO_Init+0x1f2>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e008      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e006      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d42:	2303      	movs	r3, #3
 8003d44:	e004      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e002      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f002 0203 	and.w	r2, r2, #3
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d60:	4935      	ldr	r1, [pc, #212]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	f67f aea2 	bls.w	8003b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020c00 	.word	0x40020c00
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe f848 	bl	8001fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e264      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3a:	4ba3      	ldr	r3, [pc, #652]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f46:	4ba0      	ldr	r3, [pc, #640]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d112      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4b9d      	ldr	r3, [pc, #628]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b99      	ldr	r3, [pc, #612]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e23f      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b91      	ldr	r3, [pc, #580]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a90      	ldr	r2, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b8b      	ldr	r3, [pc, #556]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a8a      	ldr	r2, [pc, #552]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b88      	ldr	r3, [pc, #544]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a87      	ldr	r2, [pc, #540]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a83      	ldr	r2, [pc, #524]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b81      	ldr	r3, [pc, #516]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a80      	ldr	r2, [pc, #512]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7ff f8ca 	bl	800316c <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7ff f8c6 	bl	800316c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e204      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffc:	f7ff f8b6 	bl	800316c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7ff f8b2 	bl	800316c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e1f0      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d063      	beq.n	80040fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403e:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d11c      	bne.n	8004084 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404a:	4b5f      	ldr	r3, [pc, #380]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d116      	bne.n	8004084 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004056:	4b5c      	ldr	r3, [pc, #368]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_RCC_OscConfig+0x152>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e1c4      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b56      	ldr	r3, [pc, #344]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4952      	ldr	r1, [pc, #328]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	e03a      	b.n	80040fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408c:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <HAL_RCC_OscConfig+0x2b0>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7ff f86b 	bl	800316c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409a:	f7ff f867 	bl	800316c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e1a5      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	4b46      	ldr	r3, [pc, #280]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4940      	ldr	r1, [pc, #256]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	e015      	b.n	80040fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_OscConfig+0x2b0>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7ff f84a 	bl	800316c <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040dc:	f7ff f846 	bl	800316c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e184      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d030      	beq.n	8004168 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410e:	4b30      	ldr	r3, [pc, #192]	; (80041d0 <HAL_RCC_OscConfig+0x2b4>)
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7ff f82a 	bl	800316c <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411c:	f7ff f826 	bl	800316c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e164      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
 800413a:	e015      	b.n	8004168 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x2b4>)
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7ff f813 	bl	800316c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414a:	f7ff f80f 	bl	800316c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e14d      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80a0 	beq.w	80042b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10f      	bne.n	80041a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a0e      	ldr	r2, [pc, #56]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x2b8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d121      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_RCC_OscConfig+0x2b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <HAL_RCC_OscConfig+0x2b8>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fe ffd5 	bl	800316c <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e011      	b.n	80041ea <HAL_RCC_OscConfig+0x2ce>
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	42470000 	.word	0x42470000
 80041d0:	42470e80 	.word	0x42470e80
 80041d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fe ffc8 	bl	800316c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e106      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x4e4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d106      	bne.n	800420c <HAL_RCC_OscConfig+0x2f0>
 80041fe:	4b81      	ldr	r3, [pc, #516]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	e01c      	b.n	8004246 <HAL_RCC_OscConfig+0x32a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d10c      	bne.n	800422e <HAL_RCC_OscConfig+0x312>
 8004214:	4b7b      	ldr	r3, [pc, #492]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	4a7a      	ldr	r2, [pc, #488]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800421a:	f043 0304 	orr.w	r3, r3, #4
 800421e:	6713      	str	r3, [r2, #112]	; 0x70
 8004220:	4b78      	ldr	r3, [pc, #480]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004224:	4a77      	ldr	r2, [pc, #476]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6713      	str	r3, [r2, #112]	; 0x70
 800422c:	e00b      	b.n	8004246 <HAL_RCC_OscConfig+0x32a>
 800422e:	4b75      	ldr	r3, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a74      	ldr	r2, [pc, #464]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
 800423a:	4b72      	ldr	r3, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a71      	ldr	r2, [pc, #452]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fe ff8d 	bl	800316c <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fe ff89 	bl	800316c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e0c5      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b65      	ldr	r3, [pc, #404]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCC_OscConfig+0x33a>
 8004278:	e014      	b.n	80042a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427a:	f7fe ff77 	bl	800316c <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fe ff73 	bl	800316c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0af      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004298:	4b5a      	ldr	r3, [pc, #360]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d105      	bne.n	80042b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042aa:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 809b 	beq.w	80043f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c0:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d05c      	beq.n	8004386 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d141      	bne.n	8004358 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d4:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x4ec>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe ff47 	bl	800316c <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fe ff43 	bl	800316c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e081      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f4:	4b43      	ldr	r3, [pc, #268]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	019b      	lsls	r3, r3, #6
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	3b01      	subs	r3, #1
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	061b      	lsls	r3, r3, #24
 8004324:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432a:	4b37      	ldr	r3, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x4ec>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe ff1c 	bl	800316c <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe ff18 	bl	800316c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e056      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b2e      	ldr	r3, [pc, #184]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x41c>
 8004356:	e04e      	b.n	80043f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004358:	4b2b      	ldr	r3, [pc, #172]	; (8004408 <HAL_RCC_OscConfig+0x4ec>)
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435e:	f7fe ff05 	bl	800316c <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fe ff01 	bl	800316c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e03f      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x44a>
 8004384:	e037      	b.n	80043f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e032      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d028      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d121      	bne.n	80043f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d11a      	bne.n	80043f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c2:	4013      	ands	r3, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d111      	bne.n	80043f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	3b01      	subs	r3, #1
 80043dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d001      	beq.n	80043f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40007000 	.word	0x40007000
 8004404:	40023800 	.word	0x40023800
 8004408:	42470060 	.word	0x42470060

0800440c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0cc      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004420:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d90c      	bls.n	8004448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0b8      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d020      	beq.n	8004496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004460:	4b59      	ldr	r3, [pc, #356]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a58      	ldr	r2, [pc, #352]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800446a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004478:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a52      	ldr	r2, [pc, #328]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004484:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	494d      	ldr	r1, [pc, #308]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	4313      	orrs	r3, r2
 8004494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d044      	beq.n	800452c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044aa:	4b47      	ldr	r3, [pc, #284]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d119      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e07f      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b3f      	ldr	r3, [pc, #252]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e06f      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e067      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4934      	ldr	r1, [pc, #208]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044fc:	f7fe fe36 	bl	800316c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fe fe32 	bl	800316c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e04f      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 020c 	and.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	429a      	cmp	r2, r3
 800452a:	d1eb      	bne.n	8004504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800452c:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d20c      	bcs.n	8004554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e032      	b.n	80045ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004560:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4916      	ldr	r1, [pc, #88]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	4313      	orrs	r3, r2
 8004570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	490e      	ldr	r1, [pc, #56]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004592:	f000 f821 	bl	80045d8 <HAL_RCC_GetSysClockFreq>
 8004596:	4602      	mov	r2, r0
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	490a      	ldr	r1, [pc, #40]	; (80045cc <HAL_RCC_ClockConfig+0x1c0>)
 80045a4:	5ccb      	ldrb	r3, [r1, r3]
 80045a6:	fa22 f303 	lsr.w	r3, r2, r3
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1c4>)
 80045ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ae:	4b09      	ldr	r3, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe fd96 	bl	80030e4 <HAL_InitTick>

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023c00 	.word	0x40023c00
 80045c8:	40023800 	.word	0x40023800
 80045cc:	0800a4ec 	.word	0x0800a4ec
 80045d0:	20000014 	.word	0x20000014
 80045d4:	20000018 	.word	0x20000018

080045d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045de:	2100      	movs	r1, #0
 80045e0:	6079      	str	r1, [r7, #4]
 80045e2:	2100      	movs	r1, #0
 80045e4:	60f9      	str	r1, [r7, #12]
 80045e6:	2100      	movs	r1, #0
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045ea:	2100      	movs	r1, #0
 80045ec:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ee:	4952      	ldr	r1, [pc, #328]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f0:	6889      	ldr	r1, [r1, #8]
 80045f2:	f001 010c 	and.w	r1, r1, #12
 80045f6:	2908      	cmp	r1, #8
 80045f8:	d00d      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x3e>
 80045fa:	2908      	cmp	r1, #8
 80045fc:	f200 8094 	bhi.w	8004728 <HAL_RCC_GetSysClockFreq+0x150>
 8004600:	2900      	cmp	r1, #0
 8004602:	d002      	beq.n	800460a <HAL_RCC_GetSysClockFreq+0x32>
 8004604:	2904      	cmp	r1, #4
 8004606:	d003      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x38>
 8004608:	e08e      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800460a:	4b4c      	ldr	r3, [pc, #304]	; (800473c <HAL_RCC_GetSysClockFreq+0x164>)
 800460c:	60bb      	str	r3, [r7, #8]
       break;
 800460e:	e08e      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004610:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCC_GetSysClockFreq+0x168>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	e08b      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004616:	4948      	ldr	r1, [pc, #288]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 8004618:	6849      	ldr	r1, [r1, #4]
 800461a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800461e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004620:	4945      	ldr	r1, [pc, #276]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 8004622:	6849      	ldr	r1, [r1, #4]
 8004624:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004628:	2900      	cmp	r1, #0
 800462a:	d024      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462c:	4942      	ldr	r1, [pc, #264]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 800462e:	6849      	ldr	r1, [r1, #4]
 8004630:	0989      	lsrs	r1, r1, #6
 8004632:	4608      	mov	r0, r1
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f240 14ff 	movw	r4, #511	; 0x1ff
 800463c:	f04f 0500 	mov.w	r5, #0
 8004640:	ea00 0204 	and.w	r2, r0, r4
 8004644:	ea01 0305 	and.w	r3, r1, r5
 8004648:	493d      	ldr	r1, [pc, #244]	; (8004740 <HAL_RCC_GetSysClockFreq+0x168>)
 800464a:	fb01 f003 	mul.w	r0, r1, r3
 800464e:	2100      	movs	r1, #0
 8004650:	fb01 f102 	mul.w	r1, r1, r2
 8004654:	1844      	adds	r4, r0, r1
 8004656:	493a      	ldr	r1, [pc, #232]	; (8004740 <HAL_RCC_GetSysClockFreq+0x168>)
 8004658:	fba2 0101 	umull	r0, r1, r2, r1
 800465c:	1863      	adds	r3, r4, r1
 800465e:	4619      	mov	r1, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	461a      	mov	r2, r3
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	f7fc fb16 	bl	8000c98 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4613      	mov	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e04a      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	461a      	mov	r2, r3
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004686:	f04f 0100 	mov.w	r1, #0
 800468a:	ea02 0400 	and.w	r4, r2, r0
 800468e:	ea03 0501 	and.w	r5, r3, r1
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	014b      	lsls	r3, r1, #5
 80046a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046a4:	0142      	lsls	r2, r0, #5
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	1b00      	subs	r0, r0, r4
 80046ac:	eb61 0105 	sbc.w	r1, r1, r5
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	018b      	lsls	r3, r1, #6
 80046ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046be:	0182      	lsls	r2, r0, #6
 80046c0:	1a12      	subs	r2, r2, r0
 80046c2:	eb63 0301 	sbc.w	r3, r3, r1
 80046c6:	f04f 0000 	mov.w	r0, #0
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	00d9      	lsls	r1, r3, #3
 80046d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046d4:	00d0      	lsls	r0, r2, #3
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	1912      	adds	r2, r2, r4
 80046dc:	eb45 0303 	adc.w	r3, r5, r3
 80046e0:	f04f 0000 	mov.w	r0, #0
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	0299      	lsls	r1, r3, #10
 80046ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ee:	0290      	lsls	r0, r2, #10
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4610      	mov	r0, r2
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f7fc faca 	bl	8000c98 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCC_GetSysClockFreq+0x160>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	3301      	adds	r3, #1
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	60bb      	str	r3, [r7, #8]
      break;
 8004726:	e002      	b.n	800472e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <HAL_RCC_GetSysClockFreq+0x164>)
 800472a:	60bb      	str	r3, [r7, #8]
      break;
 800472c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800472e:	68bb      	ldr	r3, [r7, #8]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bdb0      	pop	{r4, r5, r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400
 8004740:	017d7840 	.word	0x017d7840

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b03      	ldr	r3, [pc, #12]	; (8004758 <HAL_RCC_GetHCLKFreq+0x14>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000014 	.word	0x20000014

0800475c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e041      	b.n	80047f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe fa42 	bl	8002c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fe58 	bl	8005450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e044      	b.n	800489e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x6c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483e:	d013      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x6c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1a      	ldr	r2, [pc, #104]	; (80048b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x6c>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x6c>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a17      	ldr	r2, [pc, #92]	; (80048b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_TIM_Base_Start_IT+0x6c>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a16      	ldr	r2, [pc, #88]	; (80048bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d111      	bne.n	800488c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b06      	cmp	r3, #6
 8004878:	d010      	beq.n	800489c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	e007      	b.n	800489c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40014000 	.word	0x40014000

080048c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f839 	bl	800495e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fda6 	bl	8005450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
	...

08004974 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f808 	bl	800599c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <HAL_TIM_OC_Stop+0xc4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d117      	bne.n	80049c6 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	f241 1311 	movw	r3, #4369	; 0x1111
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10f      	bne.n	80049c6 <HAL_TIM_OC_Stop+0x52>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	f240 4344 	movw	r3, #1092	; 0x444
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_OC_Stop+0x52>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <HAL_TIM_OC_Stop+0x82>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a1a      	ldr	r2, [r3, #32]
 80049dc:	f240 4344 	movw	r3, #1092	; 0x444
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d107      	bne.n	80049f6 <HAL_TIM_OC_Stop+0x82>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_OC_Stop+0x92>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	e013      	b.n	8004a2e <HAL_TIM_OC_Stop+0xba>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_OC_Stop+0xa2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a14:	e00b      	b.n	8004a2e <HAL_TIM_OC_Stop+0xba>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_OC_Stop+0xb2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a24:	e003      	b.n	8004a2e <HAL_TIM_OC_Stop+0xba>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40010000 	.word	0x40010000

08004a3c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_TIM_OC_Start_IT+0x24>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e022      	b.n	8004aa6 <HAL_TIM_OC_Start_IT+0x6a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d109      	bne.n	8004a7a <HAL_TIM_OC_Start_IT+0x3e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	bf14      	ite	ne
 8004a72:	2301      	movne	r3, #1
 8004a74:	2300      	moveq	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e015      	b.n	8004aa6 <HAL_TIM_OC_Start_IT+0x6a>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d109      	bne.n	8004a94 <HAL_TIM_OC_Start_IT+0x58>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	bf14      	ite	ne
 8004a8c:	2301      	movne	r3, #1
 8004a8e:	2300      	moveq	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	e008      	b.n	8004aa6 <HAL_TIM_OC_Start_IT+0x6a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	bf14      	ite	ne
 8004aa0:	2301      	movne	r3, #1
 8004aa2:	2300      	moveq	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e0ae      	b.n	8004c0c <HAL_TIM_OC_Start_IT+0x1d0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_OC_Start_IT+0x82>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004abc:	e013      	b.n	8004ae6 <HAL_TIM_OC_Start_IT+0xaa>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_OC_Start_IT+0x92>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_OC_Start_IT+0xaa>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d104      	bne.n	8004ade <HAL_TIM_OC_Start_IT+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	e003      	b.n	8004ae6 <HAL_TIM_OC_Start_IT+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d841      	bhi.n	8004b70 <HAL_TIM_OC_Start_IT+0x134>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_OC_Start_IT+0xb8>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b71 	.word	0x08004b71
 8004afc:	08004b71 	.word	0x08004b71
 8004b00:	08004b71 	.word	0x08004b71
 8004b04:	08004b3b 	.word	0x08004b3b
 8004b08:	08004b71 	.word	0x08004b71
 8004b0c:	08004b71 	.word	0x08004b71
 8004b10:	08004b71 	.word	0x08004b71
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b71 	.word	0x08004b71
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004b71 	.word	0x08004b71
 8004b24:	08004b5f 	.word	0x08004b5f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0202 	orr.w	r2, r2, #2
 8004b36:	60da      	str	r2, [r3, #12]
      break;
 8004b38:	e01b      	b.n	8004b72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0204 	orr.w	r2, r2, #4
 8004b48:	60da      	str	r2, [r3, #12]
      break;
 8004b4a:	e012      	b.n	8004b72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0208 	orr.w	r2, r2, #8
 8004b5a:	60da      	str	r2, [r3, #12]
      break;
 8004b5c:	e009      	b.n	8004b72 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0210 	orr.w	r2, r2, #16
 8004b6c:	60da      	str	r2, [r3, #12]
      break;
 8004b6e:	e000      	b.n	8004b72 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8004b70:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 ff0e 	bl	800599c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a23      	ldr	r2, [pc, #140]	; (8004c14 <HAL_TIM_OC_Start_IT+0x1d8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d107      	bne.n	8004b9a <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <HAL_TIM_OC_Start_IT+0x1d8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x19a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bac:	d013      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x19a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_OC_Start_IT+0x1dc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x19a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <HAL_TIM_OC_Start_IT+0x1e0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x19a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a16      	ldr	r2, [pc, #88]	; (8004c20 <HAL_TIM_OC_Start_IT+0x1e4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIM_OC_Start_IT+0x19a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <HAL_TIM_OC_Start_IT+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d010      	beq.n	8004c0a <HAL_TIM_OC_Start_IT+0x1ce>
    {
      __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e007      	b.n	8004c0a <HAL_TIM_OC_Start_IT+0x1ce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40010000 	.word	0x40010000
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40000c00 	.word	0x40000c00
 8004c24:	40014000 	.word	0x40014000

08004c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e041      	b.n	8004cbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f839 	bl	8004cc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f000 fbf2 	bl	8005450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start+0x24>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e022      	b.n	8004d46 <HAL_TIM_PWM_Start+0x6a>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d109      	bne.n	8004d1a <HAL_TIM_PWM_Start+0x3e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	bf14      	ite	ne
 8004d12:	2301      	movne	r3, #1
 8004d14:	2300      	moveq	r3, #0
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	e015      	b.n	8004d46 <HAL_TIM_PWM_Start+0x6a>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d109      	bne.n	8004d34 <HAL_TIM_PWM_Start+0x58>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e008      	b.n	8004d46 <HAL_TIM_PWM_Start+0x6a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	bf14      	ite	ne
 8004d40:	2301      	movne	r3, #1
 8004d42:	2300      	moveq	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e068      	b.n	8004e20 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x82>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d5c:	e013      	b.n	8004d86 <HAL_TIM_PWM_Start+0xaa>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d104      	bne.n	8004d6e <HAL_TIM_PWM_Start+0x92>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d6c:	e00b      	b.n	8004d86 <HAL_TIM_PWM_Start+0xaa>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_PWM_Start+0xa2>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d7c:	e003      	b.n	8004d86 <HAL_TIM_PWM_Start+0xaa>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 fe04 	bl	800599c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <HAL_TIM_PWM_Start+0x14c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d107      	bne.n	8004dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_TIM_PWM_Start+0x14c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d018      	beq.n	8004dea <HAL_TIM_PWM_Start+0x10e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d013      	beq.n	8004dea <HAL_TIM_PWM_Start+0x10e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <HAL_TIM_PWM_Start+0x150>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_TIM_PWM_Start+0x10e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_TIM_PWM_Start+0x154>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_TIM_PWM_Start+0x10e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIM_PWM_Start+0x158>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_TIM_PWM_Start+0x10e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <HAL_TIM_PWM_Start+0x15c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d111      	bne.n	8004e0e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b06      	cmp	r3, #6
 8004dfa:	d010      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0c:	e007      	b.n	8004e1e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0201 	orr.w	r2, r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40010000 	.word	0x40010000
 8004e2c:	40000400 	.word	0x40000400
 8004e30:	40000800 	.word	0x40000800
 8004e34:	40000c00 	.word	0x40000c00
 8004e38:	40014000 	.word	0x40014000

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0202 	mvn.w	r2, #2
 8004e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fac8 	bl	8005414 <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fd f96a 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 facb 	bl	8005428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa9e 	bl	8005414 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fd f940 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 faa1 	bl	8005428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0208 	mvn.w	r2, #8
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2204      	movs	r2, #4
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa74 	bl	8005414 <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fd f916 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fa77 	bl	8005428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d122      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0310 	and.w	r3, r3, #16
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d11b      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0210 	mvn.w	r2, #16
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2208      	movs	r2, #8
 8004f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa4a 	bl	8005414 <HAL_TIM_IC_CaptureCallback>
 8004f80:	e005      	b.n	8004f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd f8ec 	bl	8002160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fa4d 	bl	8005428 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0201 	mvn.w	r2, #1
 8004fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa20 	bl	8005400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b80      	cmp	r3, #128	; 0x80
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fd76 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 fa12 	bl	800543c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b20      	cmp	r3, #32
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b20      	cmp	r3, #32
 8005032:	d107      	bne.n	8005044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0220 	mvn.w	r2, #32
 800503c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fd40 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005062:	2302      	movs	r3, #2
 8005064:	e046      	b.n	80050f4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2b0c      	cmp	r3, #12
 8005072:	d839      	bhi.n	80050e8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005074:	a201      	add	r2, pc, #4	; (adr r2, 800507c <HAL_TIM_OC_ConfigChannel+0x30>)
 8005076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507a:	bf00      	nop
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050e9 	.word	0x080050e9
 8005084:	080050e9 	.word	0x080050e9
 8005088:	080050e9 	.word	0x080050e9
 800508c:	080050bf 	.word	0x080050bf
 8005090:	080050e9 	.word	0x080050e9
 8005094:	080050e9 	.word	0x080050e9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050cd 	.word	0x080050cd
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050db 	.word	0x080050db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fa4a 	bl	8005550 <TIM_OC1_SetConfig>
      break;
 80050bc:	e015      	b.n	80050ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68b9      	ldr	r1, [r7, #8]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 faa9 	bl	800561c <TIM_OC2_SetConfig>
      break;
 80050ca:	e00e      	b.n	80050ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fb0e 	bl	80056f4 <TIM_OC3_SetConfig>
      break;
 80050d8:	e007      	b.n	80050ea <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fb71 	bl	80057c8 <TIM_OC4_SetConfig>
      break;
 80050e6:	e000      	b.n	80050ea <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80050e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ac      	b.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	f200 809f 	bhi.w	8005264 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	08005161 	.word	0x08005161
 8005130:	08005265 	.word	0x08005265
 8005134:	08005265 	.word	0x08005265
 8005138:	08005265 	.word	0x08005265
 800513c:	080051a1 	.word	0x080051a1
 8005140:	08005265 	.word	0x08005265
 8005144:	08005265 	.word	0x08005265
 8005148:	08005265 	.word	0x08005265
 800514c:	080051e3 	.word	0x080051e3
 8005150:	08005265 	.word	0x08005265
 8005154:	08005265 	.word	0x08005265
 8005158:	08005265 	.word	0x08005265
 800515c:	08005223 	.word	0x08005223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f000 f9f2 	bl	8005550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0208 	orr.w	r2, r2, #8
 800517a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0204 	bic.w	r2, r2, #4
 800518a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6999      	ldr	r1, [r3, #24]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	619a      	str	r2, [r3, #24]
      break;
 800519e:	e062      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fa38 	bl	800561c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	619a      	str	r2, [r3, #24]
      break;
 80051e0:	e041      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fa83 	bl	80056f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f042 0208 	orr.w	r2, r2, #8
 80051fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69da      	ldr	r2, [r3, #28]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0204 	bic.w	r2, r2, #4
 800520c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69d9      	ldr	r1, [r3, #28]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	61da      	str	r2, [r3, #28]
      break;
 8005220:	e021      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 facd 	bl	80057c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	021a      	lsls	r2, r3, #8
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	61da      	str	r2, [r3, #28]
      break;
 8005262:	e000      	b.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005288:	2b01      	cmp	r3, #1
 800528a:	d101      	bne.n	8005290 <HAL_TIM_ConfigClockSource+0x18>
 800528c:	2302      	movs	r3, #2
 800528e:	e0b3      	b.n	80053f8 <HAL_TIM_ConfigClockSource+0x180>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	d03e      	beq.n	8005348 <HAL_TIM_ConfigClockSource+0xd0>
 80052ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ce:	f200 8087 	bhi.w	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d6:	f000 8085 	beq.w	80053e4 <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052de:	d87f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 80052e0:	2b70      	cmp	r3, #112	; 0x70
 80052e2:	d01a      	beq.n	800531a <HAL_TIM_ConfigClockSource+0xa2>
 80052e4:	2b70      	cmp	r3, #112	; 0x70
 80052e6:	d87b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 80052e8:	2b60      	cmp	r3, #96	; 0x60
 80052ea:	d050      	beq.n	800538e <HAL_TIM_ConfigClockSource+0x116>
 80052ec:	2b60      	cmp	r3, #96	; 0x60
 80052ee:	d877      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 80052f0:	2b50      	cmp	r3, #80	; 0x50
 80052f2:	d03c      	beq.n	800536e <HAL_TIM_ConfigClockSource+0xf6>
 80052f4:	2b50      	cmp	r3, #80	; 0x50
 80052f6:	d873      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d058      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x136>
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d86f      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	d064      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x156>
 8005304:	2b30      	cmp	r3, #48	; 0x30
 8005306:	d86b      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 8005308:	2b20      	cmp	r3, #32
 800530a:	d060      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x156>
 800530c:	2b20      	cmp	r3, #32
 800530e:	d867      	bhi.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05c      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x156>
 8005314:	2b10      	cmp	r3, #16
 8005316:	d05a      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005318:	e062      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6899      	ldr	r1, [r3, #8]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f000 fb17 	bl	800595c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800533c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	609a      	str	r2, [r3, #8]
      break;
 8005346:	e04e      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6899      	ldr	r1, [r3, #8]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f000 fb00 	bl	800595c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800536a:	609a      	str	r2, [r3, #8]
      break;
 800536c:	e03b      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6859      	ldr	r1, [r3, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	461a      	mov	r2, r3
 800537c:	f000 fa74 	bl	8005868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2150      	movs	r1, #80	; 0x50
 8005386:	4618      	mov	r0, r3
 8005388:	f000 facd 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 800538c:	e02b      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	461a      	mov	r2, r3
 800539c:	f000 fa93 	bl	80058c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2160      	movs	r1, #96	; 0x60
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fabd 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80053ac:	e01b      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 fa54 	bl	8005868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 faad 	bl	8005926 <TIM_ITRx_SetConfig>
      break;
 80053cc:	e00b      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 faa4 	bl	8005926 <TIM_ITRx_SetConfig>
        break;
 80053de:	e002      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a34      	ldr	r2, [pc, #208]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a31      	ldr	r2, [pc, #196]	; (8005538 <TIM_Base_SetConfig+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a30      	ldr	r2, [pc, #192]	; (800553c <TIM_Base_SetConfig+0xec>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x38>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2f      	ldr	r2, [pc, #188]	; (8005540 <TIM_Base_SetConfig+0xf0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <TIM_Base_SetConfig+0xe8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a21      	ldr	r2, [pc, #132]	; (800553c <TIM_Base_SetConfig+0xec>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a20      	ldr	r2, [pc, #128]	; (8005540 <TIM_Base_SetConfig+0xf0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <TIM_Base_SetConfig+0xf4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1e      	ldr	r2, [pc, #120]	; (8005548 <TIM_Base_SetConfig+0xf8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <TIM_Base_SetConfig+0xfc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a08      	ldr	r2, [pc, #32]	; (8005534 <TIM_Base_SetConfig+0xe4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d103      	bne.n	8005520 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	615a      	str	r2, [r3, #20]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 0302 	bic.w	r3, r3, #2
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a1c      	ldr	r2, [pc, #112]	; (8005618 <TIM_OC1_SetConfig+0xc8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10c      	bne.n	80055c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0308 	bic.w	r3, r3, #8
 80055b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <TIM_OC1_SetConfig+0xc8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d111      	bne.n	80055f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000

0800561c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f023 0210 	bic.w	r2, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <TIM_OC2_SetConfig+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d10d      	bne.n	8005698 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <TIM_OC2_SetConfig+0xd4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d113      	bne.n	80056c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40010000 	.word	0x40010000

080056f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10d      	bne.n	800576e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d113      	bne.n	800579e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	621a      	str	r2, [r3, #32]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	40010000 	.word	0x40010000

080057c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a10      	ldr	r2, [pc, #64]	; (8005864 <TIM_OC4_SetConfig+0x9c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d109      	bne.n	800583c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000

08005868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 030a 	bic.w	r3, r3, #10
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f023 0210 	bic.w	r2, r3, #16
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	621a      	str	r2, [r3, #32]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005926:	b480      	push	{r7}
 8005928:	b085      	sub	sp, #20
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	f043 0307 	orr.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	431a      	orrs	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4313      	orrs	r3, r2
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	bf00      	nop
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
}
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e050      	b.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d013      	beq.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a16      	ldr	r2, [pc, #88]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a15      	ldr	r2, [pc, #84]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d10c      	bne.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800
 8005abc:	40000c00 	.word	0x40000c00
 8005ac0:	40014000 	.word	0x40014000

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000020 	.word	0x20000020

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	4d0d      	ldr	r5, [pc, #52]	; (8005b30 <__libc_init_array+0x38>)
 8005afc:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005afe:	1b64      	subs	r4, r4, r5
 8005b00:	10a4      	asrs	r4, r4, #2
 8005b02:	2600      	movs	r6, #0
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	4d0b      	ldr	r5, [pc, #44]	; (8005b38 <__libc_init_array+0x40>)
 8005b0a:	4c0c      	ldr	r4, [pc, #48]	; (8005b3c <__libc_init_array+0x44>)
 8005b0c:	f004 fcd0 	bl	800a4b0 <_init>
 8005b10:	1b64      	subs	r4, r4, r5
 8005b12:	10a4      	asrs	r4, r4, #2
 8005b14:	2600      	movs	r6, #0
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b20:	4798      	blx	r3
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2a:	4798      	blx	r3
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	0800a9bc 	.word	0x0800a9bc
 8005b34:	0800a9bc 	.word	0x0800a9bc
 8005b38:	0800a9bc 	.word	0x0800a9bc
 8005b3c:	0800a9c0 	.word	0x0800a9c0

08005b40 <memset>:
 8005b40:	4402      	add	r2, r0
 8005b42:	4603      	mov	r3, r0
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d100      	bne.n	8005b4a <memset+0xa>
 8005b48:	4770      	bx	lr
 8005b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4e:	e7f9      	b.n	8005b44 <memset+0x4>

08005b50 <__cvt>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	ec55 4b10 	vmov	r4, r5, d0
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	460e      	mov	r6, r1
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	462b      	mov	r3, r5
 8005b60:	bfbb      	ittet	lt
 8005b62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b66:	461d      	movlt	r5, r3
 8005b68:	2300      	movge	r3, #0
 8005b6a:	232d      	movlt	r3, #45	; 0x2d
 8005b6c:	700b      	strb	r3, [r1, #0]
 8005b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b74:	4691      	mov	r9, r2
 8005b76:	f023 0820 	bic.w	r8, r3, #32
 8005b7a:	bfbc      	itt	lt
 8005b7c:	4622      	movlt	r2, r4
 8005b7e:	4614      	movlt	r4, r2
 8005b80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b84:	d005      	beq.n	8005b92 <__cvt+0x42>
 8005b86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b8a:	d100      	bne.n	8005b8e <__cvt+0x3e>
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	2102      	movs	r1, #2
 8005b90:	e000      	b.n	8005b94 <__cvt+0x44>
 8005b92:	2103      	movs	r1, #3
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	ab02      	add	r3, sp, #8
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	ec45 4b10 	vmov	d0, r4, r5
 8005ba0:	4653      	mov	r3, sl
 8005ba2:	4632      	mov	r2, r6
 8005ba4:	f001 fdd4 	bl	8007750 <_dtoa_r>
 8005ba8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bac:	4607      	mov	r7, r0
 8005bae:	d102      	bne.n	8005bb6 <__cvt+0x66>
 8005bb0:	f019 0f01 	tst.w	r9, #1
 8005bb4:	d022      	beq.n	8005bfc <__cvt+0xac>
 8005bb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bba:	eb07 0906 	add.w	r9, r7, r6
 8005bbe:	d110      	bne.n	8005be2 <__cvt+0x92>
 8005bc0:	783b      	ldrb	r3, [r7, #0]
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d10a      	bne.n	8005bdc <__cvt+0x8c>
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	4620      	mov	r0, r4
 8005bcc:	4629      	mov	r1, r5
 8005bce:	f7fa ff83 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bd2:	b918      	cbnz	r0, 8005bdc <__cvt+0x8c>
 8005bd4:	f1c6 0601 	rsb	r6, r6, #1
 8005bd8:	f8ca 6000 	str.w	r6, [sl]
 8005bdc:	f8da 3000 	ldr.w	r3, [sl]
 8005be0:	4499      	add	r9, r3
 8005be2:	2200      	movs	r2, #0
 8005be4:	2300      	movs	r3, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bee:	b108      	cbz	r0, 8005bf4 <__cvt+0xa4>
 8005bf0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bf4:	2230      	movs	r2, #48	; 0x30
 8005bf6:	9b03      	ldr	r3, [sp, #12]
 8005bf8:	454b      	cmp	r3, r9
 8005bfa:	d307      	bcc.n	8005c0c <__cvt+0xbc>
 8005bfc:	9b03      	ldr	r3, [sp, #12]
 8005bfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c00:	1bdb      	subs	r3, r3, r7
 8005c02:	4638      	mov	r0, r7
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	b004      	add	sp, #16
 8005c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	9103      	str	r1, [sp, #12]
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e7f0      	b.n	8005bf6 <__cvt+0xa6>

08005c14 <__exponent>:
 8005c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c16:	4603      	mov	r3, r0
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	bfb8      	it	lt
 8005c1c:	4249      	neglt	r1, r1
 8005c1e:	f803 2b02 	strb.w	r2, [r3], #2
 8005c22:	bfb4      	ite	lt
 8005c24:	222d      	movlt	r2, #45	; 0x2d
 8005c26:	222b      	movge	r2, #43	; 0x2b
 8005c28:	2909      	cmp	r1, #9
 8005c2a:	7042      	strb	r2, [r0, #1]
 8005c2c:	dd2a      	ble.n	8005c84 <__exponent+0x70>
 8005c2e:	f10d 0407 	add.w	r4, sp, #7
 8005c32:	46a4      	mov	ip, r4
 8005c34:	270a      	movs	r7, #10
 8005c36:	46a6      	mov	lr, r4
 8005c38:	460a      	mov	r2, r1
 8005c3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c3e:	fb07 1516 	mls	r5, r7, r6, r1
 8005c42:	3530      	adds	r5, #48	; 0x30
 8005c44:	2a63      	cmp	r2, #99	; 0x63
 8005c46:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c4e:	4631      	mov	r1, r6
 8005c50:	dcf1      	bgt.n	8005c36 <__exponent+0x22>
 8005c52:	3130      	adds	r1, #48	; 0x30
 8005c54:	f1ae 0502 	sub.w	r5, lr, #2
 8005c58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c5c:	1c44      	adds	r4, r0, #1
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4561      	cmp	r1, ip
 8005c62:	d30a      	bcc.n	8005c7a <__exponent+0x66>
 8005c64:	f10d 0209 	add.w	r2, sp, #9
 8005c68:	eba2 020e 	sub.w	r2, r2, lr
 8005c6c:	4565      	cmp	r5, ip
 8005c6e:	bf88      	it	hi
 8005c70:	2200      	movhi	r2, #0
 8005c72:	4413      	add	r3, r2
 8005c74:	1a18      	subs	r0, r3, r0
 8005c76:	b003      	add	sp, #12
 8005c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c82:	e7ed      	b.n	8005c60 <__exponent+0x4c>
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	3130      	adds	r1, #48	; 0x30
 8005c88:	7083      	strb	r3, [r0, #2]
 8005c8a:	70c1      	strb	r1, [r0, #3]
 8005c8c:	1d03      	adds	r3, r0, #4
 8005c8e:	e7f1      	b.n	8005c74 <__exponent+0x60>

08005c90 <_printf_float>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ed2d 8b02 	vpush	{d8}
 8005c98:	b08d      	sub	sp, #52	; 0x34
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	461f      	mov	r7, r3
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	f002 feaf 	bl	8008a08 <_localeconv_r>
 8005caa:	f8d0 a000 	ldr.w	sl, [r0]
 8005cae:	4650      	mov	r0, sl
 8005cb0:	f7fa fa96 	bl	80001e0 <strlen>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8005cc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cc4:	3307      	adds	r3, #7
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	f103 0208 	add.w	r2, r3, #8
 8005cce:	f8c8 2000 	str.w	r2, [r8]
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ce8:	ee08 0a10 	vmov	s16, r0
 8005cec:	4b9f      	ldr	r3, [pc, #636]	; (8005f6c <_printf_float+0x2dc>)
 8005cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf6:	f7fa ff21 	bl	8000b3c <__aeabi_dcmpun>
 8005cfa:	bb88      	cbnz	r0, 8005d60 <_printf_float+0xd0>
 8005cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d00:	4b9a      	ldr	r3, [pc, #616]	; (8005f6c <_printf_float+0x2dc>)
 8005d02:	f04f 32ff 	mov.w	r2, #4294967295
 8005d06:	f7fa fefb 	bl	8000b00 <__aeabi_dcmple>
 8005d0a:	bb48      	cbnz	r0, 8005d60 <_printf_float+0xd0>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4640      	mov	r0, r8
 8005d12:	4649      	mov	r1, r9
 8005d14:	f7fa feea 	bl	8000aec <__aeabi_dcmplt>
 8005d18:	b110      	cbz	r0, 8005d20 <_printf_float+0x90>
 8005d1a:	232d      	movs	r3, #45	; 0x2d
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d20:	4b93      	ldr	r3, [pc, #588]	; (8005f70 <_printf_float+0x2e0>)
 8005d22:	4894      	ldr	r0, [pc, #592]	; (8005f74 <_printf_float+0x2e4>)
 8005d24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d28:	bf94      	ite	ls
 8005d2a:	4698      	movls	r8, r3
 8005d2c:	4680      	movhi	r8, r0
 8005d2e:	2303      	movs	r3, #3
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	f023 0204 	bic.w	r2, r3, #4
 8005d38:	6022      	str	r2, [r4, #0]
 8005d3a:	f04f 0900 	mov.w	r9, #0
 8005d3e:	9700      	str	r7, [sp, #0]
 8005d40:	4633      	mov	r3, r6
 8005d42:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f9d8 	bl	80060fc <_printf_common>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f040 8090 	bne.w	8005e72 <_printf_float+0x1e2>
 8005d52:	f04f 30ff 	mov.w	r0, #4294967295
 8005d56:	b00d      	add	sp, #52	; 0x34
 8005d58:	ecbd 8b02 	vpop	{d8}
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	4649      	mov	r1, r9
 8005d68:	f7fa fee8 	bl	8000b3c <__aeabi_dcmpun>
 8005d6c:	b140      	cbz	r0, 8005d80 <_printf_float+0xf0>
 8005d6e:	464b      	mov	r3, r9
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfbc      	itt	lt
 8005d74:	232d      	movlt	r3, #45	; 0x2d
 8005d76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d7a:	487f      	ldr	r0, [pc, #508]	; (8005f78 <_printf_float+0x2e8>)
 8005d7c:	4b7f      	ldr	r3, [pc, #508]	; (8005f7c <_printf_float+0x2ec>)
 8005d7e:	e7d1      	b.n	8005d24 <_printf_float+0x94>
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d86:	9206      	str	r2, [sp, #24]
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	d13f      	bne.n	8005e0c <_printf_float+0x17c>
 8005d8c:	2306      	movs	r3, #6
 8005d8e:	6063      	str	r3, [r4, #4]
 8005d90:	9b05      	ldr	r3, [sp, #20]
 8005d92:	6861      	ldr	r1, [r4, #4]
 8005d94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005da2:	ab09      	add	r3, sp, #36	; 0x24
 8005da4:	ec49 8b10 	vmov	d0, r8, r9
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	6022      	str	r2, [r4, #0]
 8005dac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005db0:	4628      	mov	r0, r5
 8005db2:	f7ff fecd 	bl	8005b50 <__cvt>
 8005db6:	9b06      	ldr	r3, [sp, #24]
 8005db8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dba:	2b47      	cmp	r3, #71	; 0x47
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	d108      	bne.n	8005dd2 <_printf_float+0x142>
 8005dc0:	1cc8      	adds	r0, r1, #3
 8005dc2:	db02      	blt.n	8005dca <_printf_float+0x13a>
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	dd41      	ble.n	8005e4e <_printf_float+0x1be>
 8005dca:	f1ab 0b02 	sub.w	fp, fp, #2
 8005dce:	fa5f fb8b 	uxtb.w	fp, fp
 8005dd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dd6:	d820      	bhi.n	8005e1a <_printf_float+0x18a>
 8005dd8:	3901      	subs	r1, #1
 8005dda:	465a      	mov	r2, fp
 8005ddc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005de0:	9109      	str	r1, [sp, #36]	; 0x24
 8005de2:	f7ff ff17 	bl	8005c14 <__exponent>
 8005de6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005de8:	1813      	adds	r3, r2, r0
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	4681      	mov	r9, r0
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	dc02      	bgt.n	8005df8 <_printf_float+0x168>
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	07d2      	lsls	r2, r2, #31
 8005df6:	d501      	bpl.n	8005dfc <_printf_float+0x16c>
 8005df8:	3301      	adds	r3, #1
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d09c      	beq.n	8005d3e <_printf_float+0xae>
 8005e04:	232d      	movs	r3, #45	; 0x2d
 8005e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0a:	e798      	b.n	8005d3e <_printf_float+0xae>
 8005e0c:	9a06      	ldr	r2, [sp, #24]
 8005e0e:	2a47      	cmp	r2, #71	; 0x47
 8005e10:	d1be      	bne.n	8005d90 <_printf_float+0x100>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1bc      	bne.n	8005d90 <_printf_float+0x100>
 8005e16:	2301      	movs	r3, #1
 8005e18:	e7b9      	b.n	8005d8e <_printf_float+0xfe>
 8005e1a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e1e:	d118      	bne.n	8005e52 <_printf_float+0x1c2>
 8005e20:	2900      	cmp	r1, #0
 8005e22:	6863      	ldr	r3, [r4, #4]
 8005e24:	dd0b      	ble.n	8005e3e <_printf_float+0x1ae>
 8005e26:	6121      	str	r1, [r4, #16]
 8005e28:	b913      	cbnz	r3, 8005e30 <_printf_float+0x1a0>
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	07d0      	lsls	r0, r2, #31
 8005e2e:	d502      	bpl.n	8005e36 <_printf_float+0x1a6>
 8005e30:	3301      	adds	r3, #1
 8005e32:	440b      	add	r3, r1
 8005e34:	6123      	str	r3, [r4, #16]
 8005e36:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e38:	f04f 0900 	mov.w	r9, #0
 8005e3c:	e7de      	b.n	8005dfc <_printf_float+0x16c>
 8005e3e:	b913      	cbnz	r3, 8005e46 <_printf_float+0x1b6>
 8005e40:	6822      	ldr	r2, [r4, #0]
 8005e42:	07d2      	lsls	r2, r2, #31
 8005e44:	d501      	bpl.n	8005e4a <_printf_float+0x1ba>
 8005e46:	3302      	adds	r3, #2
 8005e48:	e7f4      	b.n	8005e34 <_printf_float+0x1a4>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e7f2      	b.n	8005e34 <_printf_float+0x1a4>
 8005e4e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e54:	4299      	cmp	r1, r3
 8005e56:	db05      	blt.n	8005e64 <_printf_float+0x1d4>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	6121      	str	r1, [r4, #16]
 8005e5c:	07d8      	lsls	r0, r3, #31
 8005e5e:	d5ea      	bpl.n	8005e36 <_printf_float+0x1a6>
 8005e60:	1c4b      	adds	r3, r1, #1
 8005e62:	e7e7      	b.n	8005e34 <_printf_float+0x1a4>
 8005e64:	2900      	cmp	r1, #0
 8005e66:	bfd4      	ite	le
 8005e68:	f1c1 0202 	rsble	r2, r1, #2
 8005e6c:	2201      	movgt	r2, #1
 8005e6e:	4413      	add	r3, r2
 8005e70:	e7e0      	b.n	8005e34 <_printf_float+0x1a4>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	055a      	lsls	r2, r3, #21
 8005e76:	d407      	bmi.n	8005e88 <_printf_float+0x1f8>
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4628      	mov	r0, r5
 8005e80:	47b8      	blx	r7
 8005e82:	3001      	adds	r0, #1
 8005e84:	d12c      	bne.n	8005ee0 <_printf_float+0x250>
 8005e86:	e764      	b.n	8005d52 <_printf_float+0xc2>
 8005e88:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e8c:	f240 80e0 	bls.w	8006050 <_printf_float+0x3c0>
 8005e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa fe1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d034      	beq.n	8005f0a <_printf_float+0x27a>
 8005ea0:	4a37      	ldr	r2, [pc, #220]	; (8005f80 <_printf_float+0x2f0>)
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f af51 	beq.w	8005d52 <_printf_float+0xc2>
 8005eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	db02      	blt.n	8005ebe <_printf_float+0x22e>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	07d8      	lsls	r0, r3, #31
 8005ebc:	d510      	bpl.n	8005ee0 <_printf_float+0x250>
 8005ebe:	ee18 3a10 	vmov	r3, s16
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	4631      	mov	r1, r6
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f af41 	beq.w	8005d52 <_printf_float+0xc2>
 8005ed0:	f04f 0800 	mov.w	r8, #0
 8005ed4:	f104 091a 	add.w	r9, r4, #26
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4543      	cmp	r3, r8
 8005ede:	dc09      	bgt.n	8005ef4 <_printf_float+0x264>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	079b      	lsls	r3, r3, #30
 8005ee4:	f100 8105 	bmi.w	80060f2 <_printf_float+0x462>
 8005ee8:	68e0      	ldr	r0, [r4, #12]
 8005eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eec:	4298      	cmp	r0, r3
 8005eee:	bfb8      	it	lt
 8005ef0:	4618      	movlt	r0, r3
 8005ef2:	e730      	b.n	8005d56 <_printf_float+0xc6>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	464a      	mov	r2, r9
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	f43f af27 	beq.w	8005d52 <_printf_float+0xc2>
 8005f04:	f108 0801 	add.w	r8, r8, #1
 8005f08:	e7e6      	b.n	8005ed8 <_printf_float+0x248>
 8005f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dc39      	bgt.n	8005f84 <_printf_float+0x2f4>
 8005f10:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <_printf_float+0x2f0>)
 8005f12:	2301      	movs	r3, #1
 8005f14:	4631      	mov	r1, r6
 8005f16:	4628      	mov	r0, r5
 8005f18:	47b8      	blx	r7
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f43f af19 	beq.w	8005d52 <_printf_float+0xc2>
 8005f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d102      	bne.n	8005f2e <_printf_float+0x29e>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	d5d8      	bpl.n	8005ee0 <_printf_float+0x250>
 8005f2e:	ee18 3a10 	vmov	r3, s16
 8005f32:	4652      	mov	r2, sl
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	f43f af09 	beq.w	8005d52 <_printf_float+0xc2>
 8005f40:	f04f 0900 	mov.w	r9, #0
 8005f44:	f104 0a1a 	add.w	sl, r4, #26
 8005f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	454b      	cmp	r3, r9
 8005f4e:	dc01      	bgt.n	8005f54 <_printf_float+0x2c4>
 8005f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f52:	e792      	b.n	8005e7a <_printf_float+0x1ea>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4652      	mov	r2, sl
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f aef7 	beq.w	8005d52 <_printf_float+0xc2>
 8005f64:	f109 0901 	add.w	r9, r9, #1
 8005f68:	e7ee      	b.n	8005f48 <_printf_float+0x2b8>
 8005f6a:	bf00      	nop
 8005f6c:	7fefffff 	.word	0x7fefffff
 8005f70:	0800a500 	.word	0x0800a500
 8005f74:	0800a504 	.word	0x0800a504
 8005f78:	0800a50c 	.word	0x0800a50c
 8005f7c:	0800a508 	.word	0x0800a508
 8005f80:	0800a510 	.word	0x0800a510
 8005f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	bfa8      	it	ge
 8005f8c:	461a      	movge	r2, r3
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	4691      	mov	r9, r2
 8005f92:	dc37      	bgt.n	8006004 <_printf_float+0x374>
 8005f94:	f04f 0b00 	mov.w	fp, #0
 8005f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9c:	f104 021a 	add.w	r2, r4, #26
 8005fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa2:	9305      	str	r3, [sp, #20]
 8005fa4:	eba3 0309 	sub.w	r3, r3, r9
 8005fa8:	455b      	cmp	r3, fp
 8005faa:	dc33      	bgt.n	8006014 <_printf_float+0x384>
 8005fac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	db3b      	blt.n	800602c <_printf_float+0x39c>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	07da      	lsls	r2, r3, #31
 8005fb8:	d438      	bmi.n	800602c <_printf_float+0x39c>
 8005fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fbc:	9b05      	ldr	r3, [sp, #20]
 8005fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	eba2 0901 	sub.w	r9, r2, r1
 8005fc6:	4599      	cmp	r9, r3
 8005fc8:	bfa8      	it	ge
 8005fca:	4699      	movge	r9, r3
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	dc35      	bgt.n	800603e <_printf_float+0x3ae>
 8005fd2:	f04f 0800 	mov.w	r8, #0
 8005fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fda:	f104 0a1a 	add.w	sl, r4, #26
 8005fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	eba3 0309 	sub.w	r3, r3, r9
 8005fe8:	4543      	cmp	r3, r8
 8005fea:	f77f af79 	ble.w	8005ee0 <_printf_float+0x250>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	4652      	mov	r2, sl
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	f43f aeaa 	beq.w	8005d52 <_printf_float+0xc2>
 8005ffe:	f108 0801 	add.w	r8, r8, #1
 8006002:	e7ec      	b.n	8005fde <_printf_float+0x34e>
 8006004:	4613      	mov	r3, r2
 8006006:	4631      	mov	r1, r6
 8006008:	4642      	mov	r2, r8
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	d1c0      	bne.n	8005f94 <_printf_float+0x304>
 8006012:	e69e      	b.n	8005d52 <_printf_float+0xc2>
 8006014:	2301      	movs	r3, #1
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	9205      	str	r2, [sp, #20]
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	f43f ae97 	beq.w	8005d52 <_printf_float+0xc2>
 8006024:	9a05      	ldr	r2, [sp, #20]
 8006026:	f10b 0b01 	add.w	fp, fp, #1
 800602a:	e7b9      	b.n	8005fa0 <_printf_float+0x310>
 800602c:	ee18 3a10 	vmov	r3, s16
 8006030:	4652      	mov	r2, sl
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	d1be      	bne.n	8005fba <_printf_float+0x32a>
 800603c:	e689      	b.n	8005d52 <_printf_float+0xc2>
 800603e:	9a05      	ldr	r2, [sp, #20]
 8006040:	464b      	mov	r3, r9
 8006042:	4442      	add	r2, r8
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	d1c1      	bne.n	8005fd2 <_printf_float+0x342>
 800604e:	e680      	b.n	8005d52 <_printf_float+0xc2>
 8006050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006052:	2a01      	cmp	r2, #1
 8006054:	dc01      	bgt.n	800605a <_printf_float+0x3ca>
 8006056:	07db      	lsls	r3, r3, #31
 8006058:	d538      	bpl.n	80060cc <_printf_float+0x43c>
 800605a:	2301      	movs	r3, #1
 800605c:	4642      	mov	r2, r8
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f ae74 	beq.w	8005d52 <_printf_float+0xc2>
 800606a:	ee18 3a10 	vmov	r3, s16
 800606e:	4652      	mov	r2, sl
 8006070:	4631      	mov	r1, r6
 8006072:	4628      	mov	r0, r5
 8006074:	47b8      	blx	r7
 8006076:	3001      	adds	r0, #1
 8006078:	f43f ae6b 	beq.w	8005d52 <_printf_float+0xc2>
 800607c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006080:	2200      	movs	r2, #0
 8006082:	2300      	movs	r3, #0
 8006084:	f7fa fd28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006088:	b9d8      	cbnz	r0, 80060c2 <_printf_float+0x432>
 800608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608c:	f108 0201 	add.w	r2, r8, #1
 8006090:	3b01      	subs	r3, #1
 8006092:	4631      	mov	r1, r6
 8006094:	4628      	mov	r0, r5
 8006096:	47b8      	blx	r7
 8006098:	3001      	adds	r0, #1
 800609a:	d10e      	bne.n	80060ba <_printf_float+0x42a>
 800609c:	e659      	b.n	8005d52 <_printf_float+0xc2>
 800609e:	2301      	movs	r3, #1
 80060a0:	4652      	mov	r2, sl
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae52 	beq.w	8005d52 <_printf_float+0xc2>
 80060ae:	f108 0801 	add.w	r8, r8, #1
 80060b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b4:	3b01      	subs	r3, #1
 80060b6:	4543      	cmp	r3, r8
 80060b8:	dcf1      	bgt.n	800609e <_printf_float+0x40e>
 80060ba:	464b      	mov	r3, r9
 80060bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060c0:	e6dc      	b.n	8005e7c <_printf_float+0x1ec>
 80060c2:	f04f 0800 	mov.w	r8, #0
 80060c6:	f104 0a1a 	add.w	sl, r4, #26
 80060ca:	e7f2      	b.n	80060b2 <_printf_float+0x422>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4642      	mov	r2, r8
 80060d0:	e7df      	b.n	8006092 <_printf_float+0x402>
 80060d2:	2301      	movs	r3, #1
 80060d4:	464a      	mov	r2, r9
 80060d6:	4631      	mov	r1, r6
 80060d8:	4628      	mov	r0, r5
 80060da:	47b8      	blx	r7
 80060dc:	3001      	adds	r0, #1
 80060de:	f43f ae38 	beq.w	8005d52 <_printf_float+0xc2>
 80060e2:	f108 0801 	add.w	r8, r8, #1
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060ea:	1a5b      	subs	r3, r3, r1
 80060ec:	4543      	cmp	r3, r8
 80060ee:	dcf0      	bgt.n	80060d2 <_printf_float+0x442>
 80060f0:	e6fa      	b.n	8005ee8 <_printf_float+0x258>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	f104 0919 	add.w	r9, r4, #25
 80060fa:	e7f4      	b.n	80060e6 <_printf_float+0x456>

080060fc <_printf_common>:
 80060fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	4616      	mov	r6, r2
 8006102:	4699      	mov	r9, r3
 8006104:	688a      	ldr	r2, [r1, #8]
 8006106:	690b      	ldr	r3, [r1, #16]
 8006108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800610c:	4293      	cmp	r3, r2
 800610e:	bfb8      	it	lt
 8006110:	4613      	movlt	r3, r2
 8006112:	6033      	str	r3, [r6, #0]
 8006114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006118:	4607      	mov	r7, r0
 800611a:	460c      	mov	r4, r1
 800611c:	b10a      	cbz	r2, 8006122 <_printf_common+0x26>
 800611e:	3301      	adds	r3, #1
 8006120:	6033      	str	r3, [r6, #0]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	0699      	lsls	r1, r3, #26
 8006126:	bf42      	ittt	mi
 8006128:	6833      	ldrmi	r3, [r6, #0]
 800612a:	3302      	addmi	r3, #2
 800612c:	6033      	strmi	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	f015 0506 	ands.w	r5, r5, #6
 8006134:	d106      	bne.n	8006144 <_printf_common+0x48>
 8006136:	f104 0a19 	add.w	sl, r4, #25
 800613a:	68e3      	ldr	r3, [r4, #12]
 800613c:	6832      	ldr	r2, [r6, #0]
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	42ab      	cmp	r3, r5
 8006142:	dc26      	bgt.n	8006192 <_printf_common+0x96>
 8006144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006148:	1e13      	subs	r3, r2, #0
 800614a:	6822      	ldr	r2, [r4, #0]
 800614c:	bf18      	it	ne
 800614e:	2301      	movne	r3, #1
 8006150:	0692      	lsls	r2, r2, #26
 8006152:	d42b      	bmi.n	80061ac <_printf_common+0xb0>
 8006154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006158:	4649      	mov	r1, r9
 800615a:	4638      	mov	r0, r7
 800615c:	47c0      	blx	r8
 800615e:	3001      	adds	r0, #1
 8006160:	d01e      	beq.n	80061a0 <_printf_common+0xa4>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	68e5      	ldr	r5, [r4, #12]
 8006166:	6832      	ldr	r2, [r6, #0]
 8006168:	f003 0306 	and.w	r3, r3, #6
 800616c:	2b04      	cmp	r3, #4
 800616e:	bf08      	it	eq
 8006170:	1aad      	subeq	r5, r5, r2
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	bf0c      	ite	eq
 8006178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800617c:	2500      	movne	r5, #0
 800617e:	4293      	cmp	r3, r2
 8006180:	bfc4      	itt	gt
 8006182:	1a9b      	subgt	r3, r3, r2
 8006184:	18ed      	addgt	r5, r5, r3
 8006186:	2600      	movs	r6, #0
 8006188:	341a      	adds	r4, #26
 800618a:	42b5      	cmp	r5, r6
 800618c:	d11a      	bne.n	80061c4 <_printf_common+0xc8>
 800618e:	2000      	movs	r0, #0
 8006190:	e008      	b.n	80061a4 <_printf_common+0xa8>
 8006192:	2301      	movs	r3, #1
 8006194:	4652      	mov	r2, sl
 8006196:	4649      	mov	r1, r9
 8006198:	4638      	mov	r0, r7
 800619a:	47c0      	blx	r8
 800619c:	3001      	adds	r0, #1
 800619e:	d103      	bne.n	80061a8 <_printf_common+0xac>
 80061a0:	f04f 30ff 	mov.w	r0, #4294967295
 80061a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a8:	3501      	adds	r5, #1
 80061aa:	e7c6      	b.n	800613a <_printf_common+0x3e>
 80061ac:	18e1      	adds	r1, r4, r3
 80061ae:	1c5a      	adds	r2, r3, #1
 80061b0:	2030      	movs	r0, #48	; 0x30
 80061b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061b6:	4422      	add	r2, r4
 80061b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061c0:	3302      	adds	r3, #2
 80061c2:	e7c7      	b.n	8006154 <_printf_common+0x58>
 80061c4:	2301      	movs	r3, #1
 80061c6:	4622      	mov	r2, r4
 80061c8:	4649      	mov	r1, r9
 80061ca:	4638      	mov	r0, r7
 80061cc:	47c0      	blx	r8
 80061ce:	3001      	adds	r0, #1
 80061d0:	d0e6      	beq.n	80061a0 <_printf_common+0xa4>
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7d9      	b.n	800618a <_printf_common+0x8e>
	...

080061d8 <_printf_i>:
 80061d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061dc:	460c      	mov	r4, r1
 80061de:	4691      	mov	r9, r2
 80061e0:	7e27      	ldrb	r7, [r4, #24]
 80061e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061e4:	2f78      	cmp	r7, #120	; 0x78
 80061e6:	4680      	mov	r8, r0
 80061e8:	469a      	mov	sl, r3
 80061ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061ee:	d807      	bhi.n	8006200 <_printf_i+0x28>
 80061f0:	2f62      	cmp	r7, #98	; 0x62
 80061f2:	d80a      	bhi.n	800620a <_printf_i+0x32>
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	f000 80d8 	beq.w	80063aa <_printf_i+0x1d2>
 80061fa:	2f58      	cmp	r7, #88	; 0x58
 80061fc:	f000 80a3 	beq.w	8006346 <_printf_i+0x16e>
 8006200:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006208:	e03a      	b.n	8006280 <_printf_i+0xa8>
 800620a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800620e:	2b15      	cmp	r3, #21
 8006210:	d8f6      	bhi.n	8006200 <_printf_i+0x28>
 8006212:	a001      	add	r0, pc, #4	; (adr r0, 8006218 <_printf_i+0x40>)
 8006214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006218:	08006271 	.word	0x08006271
 800621c:	08006285 	.word	0x08006285
 8006220:	08006201 	.word	0x08006201
 8006224:	08006201 	.word	0x08006201
 8006228:	08006201 	.word	0x08006201
 800622c:	08006201 	.word	0x08006201
 8006230:	08006285 	.word	0x08006285
 8006234:	08006201 	.word	0x08006201
 8006238:	08006201 	.word	0x08006201
 800623c:	08006201 	.word	0x08006201
 8006240:	08006201 	.word	0x08006201
 8006244:	08006391 	.word	0x08006391
 8006248:	080062b5 	.word	0x080062b5
 800624c:	08006373 	.word	0x08006373
 8006250:	08006201 	.word	0x08006201
 8006254:	08006201 	.word	0x08006201
 8006258:	080063b3 	.word	0x080063b3
 800625c:	08006201 	.word	0x08006201
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006201 	.word	0x08006201
 8006268:	08006201 	.word	0x08006201
 800626c:	0800637b 	.word	0x0800637b
 8006270:	680b      	ldr	r3, [r1, #0]
 8006272:	1d1a      	adds	r2, r3, #4
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	600a      	str	r2, [r1, #0]
 8006278:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800627c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006280:	2301      	movs	r3, #1
 8006282:	e0a3      	b.n	80063cc <_printf_i+0x1f4>
 8006284:	6825      	ldr	r5, [r4, #0]
 8006286:	6808      	ldr	r0, [r1, #0]
 8006288:	062e      	lsls	r6, r5, #24
 800628a:	f100 0304 	add.w	r3, r0, #4
 800628e:	d50a      	bpl.n	80062a6 <_printf_i+0xce>
 8006290:	6805      	ldr	r5, [r0, #0]
 8006292:	600b      	str	r3, [r1, #0]
 8006294:	2d00      	cmp	r5, #0
 8006296:	da03      	bge.n	80062a0 <_printf_i+0xc8>
 8006298:	232d      	movs	r3, #45	; 0x2d
 800629a:	426d      	negs	r5, r5
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a0:	485e      	ldr	r0, [pc, #376]	; (800641c <_printf_i+0x244>)
 80062a2:	230a      	movs	r3, #10
 80062a4:	e019      	b.n	80062da <_printf_i+0x102>
 80062a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062aa:	6805      	ldr	r5, [r0, #0]
 80062ac:	600b      	str	r3, [r1, #0]
 80062ae:	bf18      	it	ne
 80062b0:	b22d      	sxthne	r5, r5
 80062b2:	e7ef      	b.n	8006294 <_printf_i+0xbc>
 80062b4:	680b      	ldr	r3, [r1, #0]
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	1d18      	adds	r0, r3, #4
 80062ba:	6008      	str	r0, [r1, #0]
 80062bc:	0628      	lsls	r0, r5, #24
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0xec>
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	e002      	b.n	80062ca <_printf_i+0xf2>
 80062c4:	0669      	lsls	r1, r5, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0xe8>
 80062c8:	881d      	ldrh	r5, [r3, #0]
 80062ca:	4854      	ldr	r0, [pc, #336]	; (800641c <_printf_i+0x244>)
 80062cc:	2f6f      	cmp	r7, #111	; 0x6f
 80062ce:	bf0c      	ite	eq
 80062d0:	2308      	moveq	r3, #8
 80062d2:	230a      	movne	r3, #10
 80062d4:	2100      	movs	r1, #0
 80062d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062da:	6866      	ldr	r6, [r4, #4]
 80062dc:	60a6      	str	r6, [r4, #8]
 80062de:	2e00      	cmp	r6, #0
 80062e0:	bfa2      	ittt	ge
 80062e2:	6821      	ldrge	r1, [r4, #0]
 80062e4:	f021 0104 	bicge.w	r1, r1, #4
 80062e8:	6021      	strge	r1, [r4, #0]
 80062ea:	b90d      	cbnz	r5, 80062f0 <_printf_i+0x118>
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	d04d      	beq.n	800638c <_printf_i+0x1b4>
 80062f0:	4616      	mov	r6, r2
 80062f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062f6:	fb03 5711 	mls	r7, r3, r1, r5
 80062fa:	5dc7      	ldrb	r7, [r0, r7]
 80062fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006300:	462f      	mov	r7, r5
 8006302:	42bb      	cmp	r3, r7
 8006304:	460d      	mov	r5, r1
 8006306:	d9f4      	bls.n	80062f2 <_printf_i+0x11a>
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10b      	bne.n	8006324 <_printf_i+0x14c>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07df      	lsls	r7, r3, #31
 8006310:	d508      	bpl.n	8006324 <_printf_i+0x14c>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	6861      	ldr	r1, [r4, #4]
 8006316:	4299      	cmp	r1, r3
 8006318:	bfde      	ittt	le
 800631a:	2330      	movle	r3, #48	; 0x30
 800631c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006324:	1b92      	subs	r2, r2, r6
 8006326:	6122      	str	r2, [r4, #16]
 8006328:	f8cd a000 	str.w	sl, [sp]
 800632c:	464b      	mov	r3, r9
 800632e:	aa03      	add	r2, sp, #12
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff fee2 	bl	80060fc <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	d14c      	bne.n	80063d6 <_printf_i+0x1fe>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	b004      	add	sp, #16
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	4835      	ldr	r0, [pc, #212]	; (800641c <_printf_i+0x244>)
 8006348:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	680e      	ldr	r6, [r1, #0]
 8006350:	061f      	lsls	r7, r3, #24
 8006352:	f856 5b04 	ldr.w	r5, [r6], #4
 8006356:	600e      	str	r6, [r1, #0]
 8006358:	d514      	bpl.n	8006384 <_printf_i+0x1ac>
 800635a:	07d9      	lsls	r1, r3, #31
 800635c:	bf44      	itt	mi
 800635e:	f043 0320 	orrmi.w	r3, r3, #32
 8006362:	6023      	strmi	r3, [r4, #0]
 8006364:	b91d      	cbnz	r5, 800636e <_printf_i+0x196>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	f023 0320 	bic.w	r3, r3, #32
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	2310      	movs	r3, #16
 8006370:	e7b0      	b.n	80062d4 <_printf_i+0xfc>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	2378      	movs	r3, #120	; 0x78
 800637c:	4828      	ldr	r0, [pc, #160]	; (8006420 <_printf_i+0x248>)
 800637e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006382:	e7e3      	b.n	800634c <_printf_i+0x174>
 8006384:	065e      	lsls	r6, r3, #25
 8006386:	bf48      	it	mi
 8006388:	b2ad      	uxthmi	r5, r5
 800638a:	e7e6      	b.n	800635a <_printf_i+0x182>
 800638c:	4616      	mov	r6, r2
 800638e:	e7bb      	b.n	8006308 <_printf_i+0x130>
 8006390:	680b      	ldr	r3, [r1, #0]
 8006392:	6826      	ldr	r6, [r4, #0]
 8006394:	6960      	ldr	r0, [r4, #20]
 8006396:	1d1d      	adds	r5, r3, #4
 8006398:	600d      	str	r5, [r1, #0]
 800639a:	0635      	lsls	r5, r6, #24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	d501      	bpl.n	80063a4 <_printf_i+0x1cc>
 80063a0:	6018      	str	r0, [r3, #0]
 80063a2:	e002      	b.n	80063aa <_printf_i+0x1d2>
 80063a4:	0671      	lsls	r1, r6, #25
 80063a6:	d5fb      	bpl.n	80063a0 <_printf_i+0x1c8>
 80063a8:	8018      	strh	r0, [r3, #0]
 80063aa:	2300      	movs	r3, #0
 80063ac:	6123      	str	r3, [r4, #16]
 80063ae:	4616      	mov	r6, r2
 80063b0:	e7ba      	b.n	8006328 <_printf_i+0x150>
 80063b2:	680b      	ldr	r3, [r1, #0]
 80063b4:	1d1a      	adds	r2, r3, #4
 80063b6:	600a      	str	r2, [r1, #0]
 80063b8:	681e      	ldr	r6, [r3, #0]
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	2100      	movs	r1, #0
 80063be:	4630      	mov	r0, r6
 80063c0:	f7f9 ff16 	bl	80001f0 <memchr>
 80063c4:	b108      	cbz	r0, 80063ca <_printf_i+0x1f2>
 80063c6:	1b80      	subs	r0, r0, r6
 80063c8:	6060      	str	r0, [r4, #4]
 80063ca:	6863      	ldr	r3, [r4, #4]
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	2300      	movs	r3, #0
 80063d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063d4:	e7a8      	b.n	8006328 <_printf_i+0x150>
 80063d6:	6923      	ldr	r3, [r4, #16]
 80063d8:	4632      	mov	r2, r6
 80063da:	4649      	mov	r1, r9
 80063dc:	4640      	mov	r0, r8
 80063de:	47d0      	blx	sl
 80063e0:	3001      	adds	r0, #1
 80063e2:	d0ab      	beq.n	800633c <_printf_i+0x164>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	d413      	bmi.n	8006412 <_printf_i+0x23a>
 80063ea:	68e0      	ldr	r0, [r4, #12]
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	4298      	cmp	r0, r3
 80063f0:	bfb8      	it	lt
 80063f2:	4618      	movlt	r0, r3
 80063f4:	e7a4      	b.n	8006340 <_printf_i+0x168>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4632      	mov	r2, r6
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	47d0      	blx	sl
 8006400:	3001      	adds	r0, #1
 8006402:	d09b      	beq.n	800633c <_printf_i+0x164>
 8006404:	3501      	adds	r5, #1
 8006406:	68e3      	ldr	r3, [r4, #12]
 8006408:	9903      	ldr	r1, [sp, #12]
 800640a:	1a5b      	subs	r3, r3, r1
 800640c:	42ab      	cmp	r3, r5
 800640e:	dcf2      	bgt.n	80063f6 <_printf_i+0x21e>
 8006410:	e7eb      	b.n	80063ea <_printf_i+0x212>
 8006412:	2500      	movs	r5, #0
 8006414:	f104 0619 	add.w	r6, r4, #25
 8006418:	e7f5      	b.n	8006406 <_printf_i+0x22e>
 800641a:	bf00      	nop
 800641c:	0800a512 	.word	0x0800a512
 8006420:	0800a523 	.word	0x0800a523

08006424 <_scanf_float>:
 8006424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006428:	b087      	sub	sp, #28
 800642a:	4617      	mov	r7, r2
 800642c:	9303      	str	r3, [sp, #12]
 800642e:	688b      	ldr	r3, [r1, #8]
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006436:	bf83      	ittte	hi
 8006438:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800643c:	195b      	addhi	r3, r3, r5
 800643e:	9302      	strhi	r3, [sp, #8]
 8006440:	2300      	movls	r3, #0
 8006442:	bf86      	itte	hi
 8006444:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006448:	608b      	strhi	r3, [r1, #8]
 800644a:	9302      	strls	r3, [sp, #8]
 800644c:	680b      	ldr	r3, [r1, #0]
 800644e:	468b      	mov	fp, r1
 8006450:	2500      	movs	r5, #0
 8006452:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006456:	f84b 3b1c 	str.w	r3, [fp], #28
 800645a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800645e:	4680      	mov	r8, r0
 8006460:	460c      	mov	r4, r1
 8006462:	465e      	mov	r6, fp
 8006464:	46aa      	mov	sl, r5
 8006466:	46a9      	mov	r9, r5
 8006468:	9501      	str	r5, [sp, #4]
 800646a:	68a2      	ldr	r2, [r4, #8]
 800646c:	b152      	cbz	r2, 8006484 <_scanf_float+0x60>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b4e      	cmp	r3, #78	; 0x4e
 8006474:	d864      	bhi.n	8006540 <_scanf_float+0x11c>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d83c      	bhi.n	80064f4 <_scanf_float+0xd0>
 800647a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800647e:	b2c8      	uxtb	r0, r1
 8006480:	280e      	cmp	r0, #14
 8006482:	d93a      	bls.n	80064fa <_scanf_float+0xd6>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	d003      	beq.n	8006492 <_scanf_float+0x6e>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006496:	f1ba 0f01 	cmp.w	sl, #1
 800649a:	f200 8113 	bhi.w	80066c4 <_scanf_float+0x2a0>
 800649e:	455e      	cmp	r6, fp
 80064a0:	f200 8105 	bhi.w	80066ae <_scanf_float+0x28a>
 80064a4:	2501      	movs	r5, #1
 80064a6:	4628      	mov	r0, r5
 80064a8:	b007      	add	sp, #28
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80064b2:	2a0d      	cmp	r2, #13
 80064b4:	d8e6      	bhi.n	8006484 <_scanf_float+0x60>
 80064b6:	a101      	add	r1, pc, #4	; (adr r1, 80064bc <_scanf_float+0x98>)
 80064b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064bc:	080065fb 	.word	0x080065fb
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	08006485 	.word	0x08006485
 80064cc:	0800665b 	.word	0x0800665b
 80064d0:	08006633 	.word	0x08006633
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	08006609 	.word	0x08006609
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006485 	.word	0x08006485
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065c1 	.word	0x080065c1
 80064f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80064f8:	e7db      	b.n	80064b2 <_scanf_float+0x8e>
 80064fa:	290e      	cmp	r1, #14
 80064fc:	d8c2      	bhi.n	8006484 <_scanf_float+0x60>
 80064fe:	a001      	add	r0, pc, #4	; (adr r0, 8006504 <_scanf_float+0xe0>)
 8006500:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006504:	080065b3 	.word	0x080065b3
 8006508:	08006485 	.word	0x08006485
 800650c:	080065b3 	.word	0x080065b3
 8006510:	08006647 	.word	0x08006647
 8006514:	08006485 	.word	0x08006485
 8006518:	08006561 	.word	0x08006561
 800651c:	0800659d 	.word	0x0800659d
 8006520:	0800659d 	.word	0x0800659d
 8006524:	0800659d 	.word	0x0800659d
 8006528:	0800659d 	.word	0x0800659d
 800652c:	0800659d 	.word	0x0800659d
 8006530:	0800659d 	.word	0x0800659d
 8006534:	0800659d 	.word	0x0800659d
 8006538:	0800659d 	.word	0x0800659d
 800653c:	0800659d 	.word	0x0800659d
 8006540:	2b6e      	cmp	r3, #110	; 0x6e
 8006542:	d809      	bhi.n	8006558 <_scanf_float+0x134>
 8006544:	2b60      	cmp	r3, #96	; 0x60
 8006546:	d8b2      	bhi.n	80064ae <_scanf_float+0x8a>
 8006548:	2b54      	cmp	r3, #84	; 0x54
 800654a:	d077      	beq.n	800663c <_scanf_float+0x218>
 800654c:	2b59      	cmp	r3, #89	; 0x59
 800654e:	d199      	bne.n	8006484 <_scanf_float+0x60>
 8006550:	2d07      	cmp	r5, #7
 8006552:	d197      	bne.n	8006484 <_scanf_float+0x60>
 8006554:	2508      	movs	r5, #8
 8006556:	e029      	b.n	80065ac <_scanf_float+0x188>
 8006558:	2b74      	cmp	r3, #116	; 0x74
 800655a:	d06f      	beq.n	800663c <_scanf_float+0x218>
 800655c:	2b79      	cmp	r3, #121	; 0x79
 800655e:	e7f6      	b.n	800654e <_scanf_float+0x12a>
 8006560:	6821      	ldr	r1, [r4, #0]
 8006562:	05c8      	lsls	r0, r1, #23
 8006564:	d51a      	bpl.n	800659c <_scanf_float+0x178>
 8006566:	9b02      	ldr	r3, [sp, #8]
 8006568:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800656c:	6021      	str	r1, [r4, #0]
 800656e:	f109 0901 	add.w	r9, r9, #1
 8006572:	b11b      	cbz	r3, 800657c <_scanf_float+0x158>
 8006574:	3b01      	subs	r3, #1
 8006576:	3201      	adds	r2, #1
 8006578:	9302      	str	r3, [sp, #8]
 800657a:	60a2      	str	r2, [r4, #8]
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	3b01      	subs	r3, #1
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	6923      	ldr	r3, [r4, #16]
 8006584:	3301      	adds	r3, #1
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3b01      	subs	r3, #1
 800658c:	2b00      	cmp	r3, #0
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	f340 8084 	ble.w	800669c <_scanf_float+0x278>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	e766      	b.n	800646a <_scanf_float+0x46>
 800659c:	eb1a 0f05 	cmn.w	sl, r5
 80065a0:	f47f af70 	bne.w	8006484 <_scanf_float+0x60>
 80065a4:	6822      	ldr	r2, [r4, #0]
 80065a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80065aa:	6022      	str	r2, [r4, #0]
 80065ac:	f806 3b01 	strb.w	r3, [r6], #1
 80065b0:	e7e4      	b.n	800657c <_scanf_float+0x158>
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	0610      	lsls	r0, r2, #24
 80065b6:	f57f af65 	bpl.w	8006484 <_scanf_float+0x60>
 80065ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065be:	e7f4      	b.n	80065aa <_scanf_float+0x186>
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	d10e      	bne.n	80065e4 <_scanf_float+0x1c0>
 80065c6:	f1b9 0f00 	cmp.w	r9, #0
 80065ca:	d10e      	bne.n	80065ea <_scanf_float+0x1c6>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80065d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80065d6:	d108      	bne.n	80065ea <_scanf_float+0x1c6>
 80065d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80065dc:	6022      	str	r2, [r4, #0]
 80065de:	f04f 0a01 	mov.w	sl, #1
 80065e2:	e7e3      	b.n	80065ac <_scanf_float+0x188>
 80065e4:	f1ba 0f02 	cmp.w	sl, #2
 80065e8:	d055      	beq.n	8006696 <_scanf_float+0x272>
 80065ea:	2d01      	cmp	r5, #1
 80065ec:	d002      	beq.n	80065f4 <_scanf_float+0x1d0>
 80065ee:	2d04      	cmp	r5, #4
 80065f0:	f47f af48 	bne.w	8006484 <_scanf_float+0x60>
 80065f4:	3501      	adds	r5, #1
 80065f6:	b2ed      	uxtb	r5, r5
 80065f8:	e7d8      	b.n	80065ac <_scanf_float+0x188>
 80065fa:	f1ba 0f01 	cmp.w	sl, #1
 80065fe:	f47f af41 	bne.w	8006484 <_scanf_float+0x60>
 8006602:	f04f 0a02 	mov.w	sl, #2
 8006606:	e7d1      	b.n	80065ac <_scanf_float+0x188>
 8006608:	b97d      	cbnz	r5, 800662a <_scanf_float+0x206>
 800660a:	f1b9 0f00 	cmp.w	r9, #0
 800660e:	f47f af3c 	bne.w	800648a <_scanf_float+0x66>
 8006612:	6822      	ldr	r2, [r4, #0]
 8006614:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006618:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800661c:	f47f af39 	bne.w	8006492 <_scanf_float+0x6e>
 8006620:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	2501      	movs	r5, #1
 8006628:	e7c0      	b.n	80065ac <_scanf_float+0x188>
 800662a:	2d03      	cmp	r5, #3
 800662c:	d0e2      	beq.n	80065f4 <_scanf_float+0x1d0>
 800662e:	2d05      	cmp	r5, #5
 8006630:	e7de      	b.n	80065f0 <_scanf_float+0x1cc>
 8006632:	2d02      	cmp	r5, #2
 8006634:	f47f af26 	bne.w	8006484 <_scanf_float+0x60>
 8006638:	2503      	movs	r5, #3
 800663a:	e7b7      	b.n	80065ac <_scanf_float+0x188>
 800663c:	2d06      	cmp	r5, #6
 800663e:	f47f af21 	bne.w	8006484 <_scanf_float+0x60>
 8006642:	2507      	movs	r5, #7
 8006644:	e7b2      	b.n	80065ac <_scanf_float+0x188>
 8006646:	6822      	ldr	r2, [r4, #0]
 8006648:	0591      	lsls	r1, r2, #22
 800664a:	f57f af1b 	bpl.w	8006484 <_scanf_float+0x60>
 800664e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006652:	6022      	str	r2, [r4, #0]
 8006654:	f8cd 9004 	str.w	r9, [sp, #4]
 8006658:	e7a8      	b.n	80065ac <_scanf_float+0x188>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006660:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006664:	d006      	beq.n	8006674 <_scanf_float+0x250>
 8006666:	0550      	lsls	r0, r2, #21
 8006668:	f57f af0c 	bpl.w	8006484 <_scanf_float+0x60>
 800666c:	f1b9 0f00 	cmp.w	r9, #0
 8006670:	f43f af0f 	beq.w	8006492 <_scanf_float+0x6e>
 8006674:	0591      	lsls	r1, r2, #22
 8006676:	bf58      	it	pl
 8006678:	9901      	ldrpl	r1, [sp, #4]
 800667a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800667e:	bf58      	it	pl
 8006680:	eba9 0101 	subpl.w	r1, r9, r1
 8006684:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006688:	bf58      	it	pl
 800668a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	f04f 0900 	mov.w	r9, #0
 8006694:	e78a      	b.n	80065ac <_scanf_float+0x188>
 8006696:	f04f 0a03 	mov.w	sl, #3
 800669a:	e787      	b.n	80065ac <_scanf_float+0x188>
 800669c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80066a0:	4639      	mov	r1, r7
 80066a2:	4640      	mov	r0, r8
 80066a4:	4798      	blx	r3
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f43f aedf 	beq.w	800646a <_scanf_float+0x46>
 80066ac:	e6ea      	b.n	8006484 <_scanf_float+0x60>
 80066ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066b6:	463a      	mov	r2, r7
 80066b8:	4640      	mov	r0, r8
 80066ba:	4798      	blx	r3
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	3b01      	subs	r3, #1
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	e6ec      	b.n	800649e <_scanf_float+0x7a>
 80066c4:	1e6b      	subs	r3, r5, #1
 80066c6:	2b06      	cmp	r3, #6
 80066c8:	d825      	bhi.n	8006716 <_scanf_float+0x2f2>
 80066ca:	2d02      	cmp	r5, #2
 80066cc:	d836      	bhi.n	800673c <_scanf_float+0x318>
 80066ce:	455e      	cmp	r6, fp
 80066d0:	f67f aee8 	bls.w	80064a4 <_scanf_float+0x80>
 80066d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80066dc:	463a      	mov	r2, r7
 80066de:	4640      	mov	r0, r8
 80066e0:	4798      	blx	r3
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	3b01      	subs	r3, #1
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	e7f1      	b.n	80066ce <_scanf_float+0x2aa>
 80066ea:	9802      	ldr	r0, [sp, #8]
 80066ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80066f4:	9002      	str	r0, [sp, #8]
 80066f6:	463a      	mov	r2, r7
 80066f8:	4640      	mov	r0, r8
 80066fa:	4798      	blx	r3
 80066fc:	6923      	ldr	r3, [r4, #16]
 80066fe:	3b01      	subs	r3, #1
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006706:	fa5f fa8a 	uxtb.w	sl, sl
 800670a:	f1ba 0f02 	cmp.w	sl, #2
 800670e:	d1ec      	bne.n	80066ea <_scanf_float+0x2c6>
 8006710:	3d03      	subs	r5, #3
 8006712:	b2ed      	uxtb	r5, r5
 8006714:	1b76      	subs	r6, r6, r5
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	05da      	lsls	r2, r3, #23
 800671a:	d52f      	bpl.n	800677c <_scanf_float+0x358>
 800671c:	055b      	lsls	r3, r3, #21
 800671e:	d510      	bpl.n	8006742 <_scanf_float+0x31e>
 8006720:	455e      	cmp	r6, fp
 8006722:	f67f aebf 	bls.w	80064a4 <_scanf_float+0x80>
 8006726:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800672a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800672e:	463a      	mov	r2, r7
 8006730:	4640      	mov	r0, r8
 8006732:	4798      	blx	r3
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	3b01      	subs	r3, #1
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	e7f1      	b.n	8006720 <_scanf_float+0x2fc>
 800673c:	46aa      	mov	sl, r5
 800673e:	9602      	str	r6, [sp, #8]
 8006740:	e7df      	b.n	8006702 <_scanf_float+0x2de>
 8006742:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006746:	6923      	ldr	r3, [r4, #16]
 8006748:	2965      	cmp	r1, #101	; 0x65
 800674a:	f103 33ff 	add.w	r3, r3, #4294967295
 800674e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006752:	6123      	str	r3, [r4, #16]
 8006754:	d00c      	beq.n	8006770 <_scanf_float+0x34c>
 8006756:	2945      	cmp	r1, #69	; 0x45
 8006758:	d00a      	beq.n	8006770 <_scanf_float+0x34c>
 800675a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800675e:	463a      	mov	r2, r7
 8006760:	4640      	mov	r0, r8
 8006762:	4798      	blx	r3
 8006764:	6923      	ldr	r3, [r4, #16]
 8006766:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800676a:	3b01      	subs	r3, #1
 800676c:	1eb5      	subs	r5, r6, #2
 800676e:	6123      	str	r3, [r4, #16]
 8006770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006774:	463a      	mov	r2, r7
 8006776:	4640      	mov	r0, r8
 8006778:	4798      	blx	r3
 800677a:	462e      	mov	r6, r5
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	f015 0510 	ands.w	r5, r5, #16
 8006782:	d158      	bne.n	8006836 <_scanf_float+0x412>
 8006784:	7035      	strb	r5, [r6, #0]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d11c      	bne.n	80067cc <_scanf_float+0x3a8>
 8006792:	9b01      	ldr	r3, [sp, #4]
 8006794:	454b      	cmp	r3, r9
 8006796:	eba3 0209 	sub.w	r2, r3, r9
 800679a:	d124      	bne.n	80067e6 <_scanf_float+0x3c2>
 800679c:	2200      	movs	r2, #0
 800679e:	4659      	mov	r1, fp
 80067a0:	4640      	mov	r0, r8
 80067a2:	f000 fe9b 	bl	80074dc <_strtod_r>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	6821      	ldr	r1, [r4, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f011 0f02 	tst.w	r1, #2
 80067b0:	ec57 6b10 	vmov	r6, r7, d0
 80067b4:	f103 0204 	add.w	r2, r3, #4
 80067b8:	d020      	beq.n	80067fc <_scanf_float+0x3d8>
 80067ba:	9903      	ldr	r1, [sp, #12]
 80067bc:	600a      	str	r2, [r1, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	e9c3 6700 	strd	r6, r7, [r3]
 80067c4:	68e3      	ldr	r3, [r4, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60e3      	str	r3, [r4, #12]
 80067ca:	e66c      	b.n	80064a6 <_scanf_float+0x82>
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0e4      	beq.n	800679c <_scanf_float+0x378>
 80067d2:	9905      	ldr	r1, [sp, #20]
 80067d4:	230a      	movs	r3, #10
 80067d6:	462a      	mov	r2, r5
 80067d8:	3101      	adds	r1, #1
 80067da:	4640      	mov	r0, r8
 80067dc:	f000 ff08 	bl	80075f0 <_strtol_r>
 80067e0:	9b04      	ldr	r3, [sp, #16]
 80067e2:	9e05      	ldr	r6, [sp, #20]
 80067e4:	1ac2      	subs	r2, r0, r3
 80067e6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80067ea:	429e      	cmp	r6, r3
 80067ec:	bf28      	it	cs
 80067ee:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80067f2:	4912      	ldr	r1, [pc, #72]	; (800683c <_scanf_float+0x418>)
 80067f4:	4630      	mov	r0, r6
 80067f6:	f000 f82b 	bl	8006850 <siprintf>
 80067fa:	e7cf      	b.n	800679c <_scanf_float+0x378>
 80067fc:	f011 0f04 	tst.w	r1, #4
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	600a      	str	r2, [r1, #0]
 8006804:	d1db      	bne.n	80067be <_scanf_float+0x39a>
 8006806:	f8d3 8000 	ldr.w	r8, [r3]
 800680a:	ee10 2a10 	vmov	r2, s0
 800680e:	ee10 0a10 	vmov	r0, s0
 8006812:	463b      	mov	r3, r7
 8006814:	4639      	mov	r1, r7
 8006816:	f7fa f991 	bl	8000b3c <__aeabi_dcmpun>
 800681a:	b128      	cbz	r0, 8006828 <_scanf_float+0x404>
 800681c:	4808      	ldr	r0, [pc, #32]	; (8006840 <_scanf_float+0x41c>)
 800681e:	f000 f811 	bl	8006844 <nanf>
 8006822:	ed88 0a00 	vstr	s0, [r8]
 8006826:	e7cd      	b.n	80067c4 <_scanf_float+0x3a0>
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7fa f9e4 	bl	8000bf8 <__aeabi_d2f>
 8006830:	f8c8 0000 	str.w	r0, [r8]
 8006834:	e7c6      	b.n	80067c4 <_scanf_float+0x3a0>
 8006836:	2500      	movs	r5, #0
 8006838:	e635      	b.n	80064a6 <_scanf_float+0x82>
 800683a:	bf00      	nop
 800683c:	0800a534 	.word	0x0800a534
 8006840:	0800a950 	.word	0x0800a950

08006844 <nanf>:
 8006844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800684c <nanf+0x8>
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	7fc00000 	.word	0x7fc00000

08006850 <siprintf>:
 8006850:	b40e      	push	{r1, r2, r3}
 8006852:	b500      	push	{lr}
 8006854:	b09c      	sub	sp, #112	; 0x70
 8006856:	ab1d      	add	r3, sp, #116	; 0x74
 8006858:	9002      	str	r0, [sp, #8]
 800685a:	9006      	str	r0, [sp, #24]
 800685c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006860:	4809      	ldr	r0, [pc, #36]	; (8006888 <siprintf+0x38>)
 8006862:	9107      	str	r1, [sp, #28]
 8006864:	9104      	str	r1, [sp, #16]
 8006866:	4909      	ldr	r1, [pc, #36]	; (800688c <siprintf+0x3c>)
 8006868:	f853 2b04 	ldr.w	r2, [r3], #4
 800686c:	9105      	str	r1, [sp, #20]
 800686e:	6800      	ldr	r0, [r0, #0]
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	a902      	add	r1, sp, #8
 8006874:	f002 fec4 	bl	8009600 <_svfiprintf_r>
 8006878:	9b02      	ldr	r3, [sp, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	b01c      	add	sp, #112	; 0x70
 8006880:	f85d eb04 	ldr.w	lr, [sp], #4
 8006884:	b003      	add	sp, #12
 8006886:	4770      	bx	lr
 8006888:	20000020 	.word	0x20000020
 800688c:	ffff0208 	.word	0xffff0208

08006890 <sulp>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	ec45 4b10 	vmov	d0, r4, r5
 800689a:	4616      	mov	r6, r2
 800689c:	f002 fc4c 	bl	8009138 <__ulp>
 80068a0:	ec51 0b10 	vmov	r0, r1, d0
 80068a4:	b17e      	cbz	r6, 80068c6 <sulp+0x36>
 80068a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dd09      	ble.n	80068c6 <sulp+0x36>
 80068b2:	051b      	lsls	r3, r3, #20
 80068b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068b8:	2400      	movs	r4, #0
 80068ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068be:	4622      	mov	r2, r4
 80068c0:	462b      	mov	r3, r5
 80068c2:	f7f9 fea1 	bl	8000608 <__aeabi_dmul>
 80068c6:	bd70      	pop	{r4, r5, r6, pc}

080068c8 <_strtod_l>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	b0a3      	sub	sp, #140	; 0x8c
 80068ce:	461f      	mov	r7, r3
 80068d0:	2300      	movs	r3, #0
 80068d2:	931e      	str	r3, [sp, #120]	; 0x78
 80068d4:	4ba4      	ldr	r3, [pc, #656]	; (8006b68 <_strtod_l+0x2a0>)
 80068d6:	9219      	str	r2, [sp, #100]	; 0x64
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	9307      	str	r3, [sp, #28]
 80068dc:	4604      	mov	r4, r0
 80068de:	4618      	mov	r0, r3
 80068e0:	4688      	mov	r8, r1
 80068e2:	f7f9 fc7d 	bl	80001e0 <strlen>
 80068e6:	f04f 0a00 	mov.w	sl, #0
 80068ea:	4605      	mov	r5, r0
 80068ec:	f04f 0b00 	mov.w	fp, #0
 80068f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80068f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	2a2b      	cmp	r2, #43	; 0x2b
 80068fa:	d04c      	beq.n	8006996 <_strtod_l+0xce>
 80068fc:	d839      	bhi.n	8006972 <_strtod_l+0xaa>
 80068fe:	2a0d      	cmp	r2, #13
 8006900:	d832      	bhi.n	8006968 <_strtod_l+0xa0>
 8006902:	2a08      	cmp	r2, #8
 8006904:	d832      	bhi.n	800696c <_strtod_l+0xa4>
 8006906:	2a00      	cmp	r2, #0
 8006908:	d03c      	beq.n	8006984 <_strtod_l+0xbc>
 800690a:	2300      	movs	r3, #0
 800690c:	930e      	str	r3, [sp, #56]	; 0x38
 800690e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006910:	7833      	ldrb	r3, [r6, #0]
 8006912:	2b30      	cmp	r3, #48	; 0x30
 8006914:	f040 80b4 	bne.w	8006a80 <_strtod_l+0x1b8>
 8006918:	7873      	ldrb	r3, [r6, #1]
 800691a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800691e:	2b58      	cmp	r3, #88	; 0x58
 8006920:	d16c      	bne.n	80069fc <_strtod_l+0x134>
 8006922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	ab1e      	add	r3, sp, #120	; 0x78
 8006928:	9702      	str	r7, [sp, #8]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	4a8f      	ldr	r2, [pc, #572]	; (8006b6c <_strtod_l+0x2a4>)
 800692e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006930:	a91d      	add	r1, sp, #116	; 0x74
 8006932:	4620      	mov	r0, r4
 8006934:	f001 fd60 	bl	80083f8 <__gethex>
 8006938:	f010 0707 	ands.w	r7, r0, #7
 800693c:	4605      	mov	r5, r0
 800693e:	d005      	beq.n	800694c <_strtod_l+0x84>
 8006940:	2f06      	cmp	r7, #6
 8006942:	d12a      	bne.n	800699a <_strtod_l+0xd2>
 8006944:	3601      	adds	r6, #1
 8006946:	2300      	movs	r3, #0
 8006948:	961d      	str	r6, [sp, #116]	; 0x74
 800694a:	930e      	str	r3, [sp, #56]	; 0x38
 800694c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800694e:	2b00      	cmp	r3, #0
 8006950:	f040 8596 	bne.w	8007480 <_strtod_l+0xbb8>
 8006954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006956:	b1db      	cbz	r3, 8006990 <_strtod_l+0xc8>
 8006958:	4652      	mov	r2, sl
 800695a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800695e:	ec43 2b10 	vmov	d0, r2, r3
 8006962:	b023      	add	sp, #140	; 0x8c
 8006964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006968:	2a20      	cmp	r2, #32
 800696a:	d1ce      	bne.n	800690a <_strtod_l+0x42>
 800696c:	3301      	adds	r3, #1
 800696e:	931d      	str	r3, [sp, #116]	; 0x74
 8006970:	e7c0      	b.n	80068f4 <_strtod_l+0x2c>
 8006972:	2a2d      	cmp	r2, #45	; 0x2d
 8006974:	d1c9      	bne.n	800690a <_strtod_l+0x42>
 8006976:	2201      	movs	r2, #1
 8006978:	920e      	str	r2, [sp, #56]	; 0x38
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	921d      	str	r2, [sp, #116]	; 0x74
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1c4      	bne.n	800690e <_strtod_l+0x46>
 8006984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006986:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 8576 	bne.w	800747c <_strtod_l+0xbb4>
 8006990:	4652      	mov	r2, sl
 8006992:	465b      	mov	r3, fp
 8006994:	e7e3      	b.n	800695e <_strtod_l+0x96>
 8006996:	2200      	movs	r2, #0
 8006998:	e7ee      	b.n	8006978 <_strtod_l+0xb0>
 800699a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800699c:	b13a      	cbz	r2, 80069ae <_strtod_l+0xe6>
 800699e:	2135      	movs	r1, #53	; 0x35
 80069a0:	a820      	add	r0, sp, #128	; 0x80
 80069a2:	f002 fcd4 	bl	800934e <__copybits>
 80069a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069a8:	4620      	mov	r0, r4
 80069aa:	f002 f899 	bl	8008ae0 <_Bfree>
 80069ae:	3f01      	subs	r7, #1
 80069b0:	2f05      	cmp	r7, #5
 80069b2:	d807      	bhi.n	80069c4 <_strtod_l+0xfc>
 80069b4:	e8df f007 	tbb	[pc, r7]
 80069b8:	1d180b0e 	.word	0x1d180b0e
 80069bc:	030e      	.short	0x030e
 80069be:	f04f 0b00 	mov.w	fp, #0
 80069c2:	46da      	mov	sl, fp
 80069c4:	0728      	lsls	r0, r5, #28
 80069c6:	d5c1      	bpl.n	800694c <_strtod_l+0x84>
 80069c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80069cc:	e7be      	b.n	800694c <_strtod_l+0x84>
 80069ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80069d2:	e7f7      	b.n	80069c4 <_strtod_l+0xfc>
 80069d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80069d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80069da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069e6:	e7ed      	b.n	80069c4 <_strtod_l+0xfc>
 80069e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006b70 <_strtod_l+0x2a8>
 80069ec:	f04f 0a00 	mov.w	sl, #0
 80069f0:	e7e8      	b.n	80069c4 <_strtod_l+0xfc>
 80069f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80069f6:	f04f 3aff 	mov.w	sl, #4294967295
 80069fa:	e7e3      	b.n	80069c4 <_strtod_l+0xfc>
 80069fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	921d      	str	r2, [sp, #116]	; 0x74
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b30      	cmp	r3, #48	; 0x30
 8006a06:	d0f9      	beq.n	80069fc <_strtod_l+0x134>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d09f      	beq.n	800694c <_strtod_l+0x84>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a16:	930a      	str	r3, [sp, #40]	; 0x28
 8006a18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006a1c:	464f      	mov	r7, r9
 8006a1e:	220a      	movs	r2, #10
 8006a20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006a22:	7806      	ldrb	r6, [r0, #0]
 8006a24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a28:	b2d9      	uxtb	r1, r3
 8006a2a:	2909      	cmp	r1, #9
 8006a2c:	d92a      	bls.n	8006a84 <_strtod_l+0x1bc>
 8006a2e:	9907      	ldr	r1, [sp, #28]
 8006a30:	462a      	mov	r2, r5
 8006a32:	f002 fefd 	bl	8009830 <strncmp>
 8006a36:	b398      	cbz	r0, 8006aa0 <_strtod_l+0x1d8>
 8006a38:	2000      	movs	r0, #0
 8006a3a:	4633      	mov	r3, r6
 8006a3c:	463d      	mov	r5, r7
 8006a3e:	9007      	str	r0, [sp, #28]
 8006a40:	4602      	mov	r2, r0
 8006a42:	2b65      	cmp	r3, #101	; 0x65
 8006a44:	d001      	beq.n	8006a4a <_strtod_l+0x182>
 8006a46:	2b45      	cmp	r3, #69	; 0x45
 8006a48:	d118      	bne.n	8006a7c <_strtod_l+0x1b4>
 8006a4a:	b91d      	cbnz	r5, 8006a54 <_strtod_l+0x18c>
 8006a4c:	9b04      	ldr	r3, [sp, #16]
 8006a4e:	4303      	orrs	r3, r0
 8006a50:	d098      	beq.n	8006984 <_strtod_l+0xbc>
 8006a52:	2500      	movs	r5, #0
 8006a54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006a58:	f108 0301 	add.w	r3, r8, #1
 8006a5c:	931d      	str	r3, [sp, #116]	; 0x74
 8006a5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006a62:	2b2b      	cmp	r3, #43	; 0x2b
 8006a64:	d075      	beq.n	8006b52 <_strtod_l+0x28a>
 8006a66:	2b2d      	cmp	r3, #45	; 0x2d
 8006a68:	d07b      	beq.n	8006b62 <_strtod_l+0x29a>
 8006a6a:	f04f 0c00 	mov.w	ip, #0
 8006a6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006a72:	2909      	cmp	r1, #9
 8006a74:	f240 8082 	bls.w	8006b7c <_strtod_l+0x2b4>
 8006a78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	e09d      	b.n	8006bbc <_strtod_l+0x2f4>
 8006a80:	2300      	movs	r3, #0
 8006a82:	e7c4      	b.n	8006a0e <_strtod_l+0x146>
 8006a84:	2f08      	cmp	r7, #8
 8006a86:	bfd8      	it	le
 8006a88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a8a:	f100 0001 	add.w	r0, r0, #1
 8006a8e:	bfda      	itte	le
 8006a90:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a94:	9309      	strle	r3, [sp, #36]	; 0x24
 8006a96:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	901d      	str	r0, [sp, #116]	; 0x74
 8006a9e:	e7bf      	b.n	8006a20 <_strtod_l+0x158>
 8006aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006aa2:	195a      	adds	r2, r3, r5
 8006aa4:	921d      	str	r2, [sp, #116]	; 0x74
 8006aa6:	5d5b      	ldrb	r3, [r3, r5]
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	d037      	beq.n	8006b1c <_strtod_l+0x254>
 8006aac:	9007      	str	r0, [sp, #28]
 8006aae:	463d      	mov	r5, r7
 8006ab0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006ab4:	2a09      	cmp	r2, #9
 8006ab6:	d912      	bls.n	8006ade <_strtod_l+0x216>
 8006ab8:	2201      	movs	r2, #1
 8006aba:	e7c2      	b.n	8006a42 <_strtod_l+0x17a>
 8006abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	921d      	str	r2, [sp, #116]	; 0x74
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	2b30      	cmp	r3, #48	; 0x30
 8006ac8:	d0f8      	beq.n	8006abc <_strtod_l+0x1f4>
 8006aca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006ace:	2a08      	cmp	r2, #8
 8006ad0:	f200 84db 	bhi.w	800748a <_strtod_l+0xbc2>
 8006ad4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006ad6:	9007      	str	r0, [sp, #28]
 8006ad8:	2000      	movs	r0, #0
 8006ada:	920a      	str	r2, [sp, #40]	; 0x28
 8006adc:	4605      	mov	r5, r0
 8006ade:	3b30      	subs	r3, #48	; 0x30
 8006ae0:	f100 0201 	add.w	r2, r0, #1
 8006ae4:	d014      	beq.n	8006b10 <_strtod_l+0x248>
 8006ae6:	9907      	ldr	r1, [sp, #28]
 8006ae8:	4411      	add	r1, r2
 8006aea:	9107      	str	r1, [sp, #28]
 8006aec:	462a      	mov	r2, r5
 8006aee:	eb00 0e05 	add.w	lr, r0, r5
 8006af2:	210a      	movs	r1, #10
 8006af4:	4572      	cmp	r2, lr
 8006af6:	d113      	bne.n	8006b20 <_strtod_l+0x258>
 8006af8:	182a      	adds	r2, r5, r0
 8006afa:	2a08      	cmp	r2, #8
 8006afc:	f105 0501 	add.w	r5, r5, #1
 8006b00:	4405      	add	r5, r0
 8006b02:	dc1c      	bgt.n	8006b3e <_strtod_l+0x276>
 8006b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b06:	220a      	movs	r2, #10
 8006b08:	fb02 3301 	mla	r3, r2, r1, r3
 8006b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b12:	1c59      	adds	r1, r3, #1
 8006b14:	911d      	str	r1, [sp, #116]	; 0x74
 8006b16:	785b      	ldrb	r3, [r3, #1]
 8006b18:	4610      	mov	r0, r2
 8006b1a:	e7c9      	b.n	8006ab0 <_strtod_l+0x1e8>
 8006b1c:	4638      	mov	r0, r7
 8006b1e:	e7d2      	b.n	8006ac6 <_strtod_l+0x1fe>
 8006b20:	2a08      	cmp	r2, #8
 8006b22:	dc04      	bgt.n	8006b2e <_strtod_l+0x266>
 8006b24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b26:	434e      	muls	r6, r1
 8006b28:	9609      	str	r6, [sp, #36]	; 0x24
 8006b2a:	3201      	adds	r2, #1
 8006b2c:	e7e2      	b.n	8006af4 <_strtod_l+0x22c>
 8006b2e:	f102 0c01 	add.w	ip, r2, #1
 8006b32:	f1bc 0f10 	cmp.w	ip, #16
 8006b36:	bfd8      	it	le
 8006b38:	fb01 f909 	mulle.w	r9, r1, r9
 8006b3c:	e7f5      	b.n	8006b2a <_strtod_l+0x262>
 8006b3e:	2d10      	cmp	r5, #16
 8006b40:	bfdc      	itt	le
 8006b42:	220a      	movle	r2, #10
 8006b44:	fb02 3909 	mlale	r9, r2, r9, r3
 8006b48:	e7e1      	b.n	8006b0e <_strtod_l+0x246>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	e77c      	b.n	8006a4c <_strtod_l+0x184>
 8006b52:	f04f 0c00 	mov.w	ip, #0
 8006b56:	f108 0302 	add.w	r3, r8, #2
 8006b5a:	931d      	str	r3, [sp, #116]	; 0x74
 8006b5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006b60:	e785      	b.n	8006a6e <_strtod_l+0x1a6>
 8006b62:	f04f 0c01 	mov.w	ip, #1
 8006b66:	e7f6      	b.n	8006b56 <_strtod_l+0x28e>
 8006b68:	0800a790 	.word	0x0800a790
 8006b6c:	0800a53c 	.word	0x0800a53c
 8006b70:	7ff00000 	.word	0x7ff00000
 8006b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	911d      	str	r1, [sp, #116]	; 0x74
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2b30      	cmp	r3, #48	; 0x30
 8006b7e:	d0f9      	beq.n	8006b74 <_strtod_l+0x2ac>
 8006b80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006b84:	2908      	cmp	r1, #8
 8006b86:	f63f af79 	bhi.w	8006a7c <_strtod_l+0x1b4>
 8006b8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	911d      	str	r1, [sp, #116]	; 0x74
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006b9e:	2e09      	cmp	r6, #9
 8006ba0:	d937      	bls.n	8006c12 <_strtod_l+0x34a>
 8006ba2:	9e08      	ldr	r6, [sp, #32]
 8006ba4:	1b89      	subs	r1, r1, r6
 8006ba6:	2908      	cmp	r1, #8
 8006ba8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006bac:	dc02      	bgt.n	8006bb4 <_strtod_l+0x2ec>
 8006bae:	4576      	cmp	r6, lr
 8006bb0:	bfa8      	it	ge
 8006bb2:	4676      	movge	r6, lr
 8006bb4:	f1bc 0f00 	cmp.w	ip, #0
 8006bb8:	d000      	beq.n	8006bbc <_strtod_l+0x2f4>
 8006bba:	4276      	negs	r6, r6
 8006bbc:	2d00      	cmp	r5, #0
 8006bbe:	d14f      	bne.n	8006c60 <_strtod_l+0x398>
 8006bc0:	9904      	ldr	r1, [sp, #16]
 8006bc2:	4301      	orrs	r1, r0
 8006bc4:	f47f aec2 	bne.w	800694c <_strtod_l+0x84>
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	f47f aedb 	bne.w	8006984 <_strtod_l+0xbc>
 8006bce:	2b69      	cmp	r3, #105	; 0x69
 8006bd0:	d027      	beq.n	8006c22 <_strtod_l+0x35a>
 8006bd2:	dc24      	bgt.n	8006c1e <_strtod_l+0x356>
 8006bd4:	2b49      	cmp	r3, #73	; 0x49
 8006bd6:	d024      	beq.n	8006c22 <_strtod_l+0x35a>
 8006bd8:	2b4e      	cmp	r3, #78	; 0x4e
 8006bda:	f47f aed3 	bne.w	8006984 <_strtod_l+0xbc>
 8006bde:	499e      	ldr	r1, [pc, #632]	; (8006e58 <_strtod_l+0x590>)
 8006be0:	a81d      	add	r0, sp, #116	; 0x74
 8006be2:	f001 fe61 	bl	80088a8 <__match>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f43f aecc 	beq.w	8006984 <_strtod_l+0xbc>
 8006bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b28      	cmp	r3, #40	; 0x28
 8006bf2:	d12d      	bne.n	8006c50 <_strtod_l+0x388>
 8006bf4:	4999      	ldr	r1, [pc, #612]	; (8006e5c <_strtod_l+0x594>)
 8006bf6:	aa20      	add	r2, sp, #128	; 0x80
 8006bf8:	a81d      	add	r0, sp, #116	; 0x74
 8006bfa:	f001 fe69 	bl	80088d0 <__hexnan>
 8006bfe:	2805      	cmp	r0, #5
 8006c00:	d126      	bne.n	8006c50 <_strtod_l+0x388>
 8006c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006c08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006c0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006c10:	e69c      	b.n	800694c <_strtod_l+0x84>
 8006c12:	210a      	movs	r1, #10
 8006c14:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006c18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006c1c:	e7b9      	b.n	8006b92 <_strtod_l+0x2ca>
 8006c1e:	2b6e      	cmp	r3, #110	; 0x6e
 8006c20:	e7db      	b.n	8006bda <_strtod_l+0x312>
 8006c22:	498f      	ldr	r1, [pc, #572]	; (8006e60 <_strtod_l+0x598>)
 8006c24:	a81d      	add	r0, sp, #116	; 0x74
 8006c26:	f001 fe3f 	bl	80088a8 <__match>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aeaa 	beq.w	8006984 <_strtod_l+0xbc>
 8006c30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c32:	498c      	ldr	r1, [pc, #560]	; (8006e64 <_strtod_l+0x59c>)
 8006c34:	3b01      	subs	r3, #1
 8006c36:	a81d      	add	r0, sp, #116	; 0x74
 8006c38:	931d      	str	r3, [sp, #116]	; 0x74
 8006c3a:	f001 fe35 	bl	80088a8 <__match>
 8006c3e:	b910      	cbnz	r0, 8006c46 <_strtod_l+0x37e>
 8006c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c42:	3301      	adds	r3, #1
 8006c44:	931d      	str	r3, [sp, #116]	; 0x74
 8006c46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006e74 <_strtod_l+0x5ac>
 8006c4a:	f04f 0a00 	mov.w	sl, #0
 8006c4e:	e67d      	b.n	800694c <_strtod_l+0x84>
 8006c50:	4885      	ldr	r0, [pc, #532]	; (8006e68 <_strtod_l+0x5a0>)
 8006c52:	f002 fdd5 	bl	8009800 <nan>
 8006c56:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c5e:	e675      	b.n	800694c <_strtod_l+0x84>
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c64:	1af3      	subs	r3, r6, r3
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	bf08      	it	eq
 8006c6a:	462f      	moveq	r7, r5
 8006c6c:	2d10      	cmp	r5, #16
 8006c6e:	9308      	str	r3, [sp, #32]
 8006c70:	46a8      	mov	r8, r5
 8006c72:	bfa8      	it	ge
 8006c74:	f04f 0810 	movge.w	r8, #16
 8006c78:	f7f9 fc4c 	bl	8000514 <__aeabi_ui2d>
 8006c7c:	2d09      	cmp	r5, #9
 8006c7e:	4682      	mov	sl, r0
 8006c80:	468b      	mov	fp, r1
 8006c82:	dd13      	ble.n	8006cac <_strtod_l+0x3e4>
 8006c84:	4b79      	ldr	r3, [pc, #484]	; (8006e6c <_strtod_l+0x5a4>)
 8006c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_dmul>
 8006c92:	4682      	mov	sl, r0
 8006c94:	4648      	mov	r0, r9
 8006c96:	468b      	mov	fp, r1
 8006c98:	f7f9 fc3c 	bl	8000514 <__aeabi_ui2d>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4650      	mov	r0, sl
 8006ca2:	4659      	mov	r1, fp
 8006ca4:	f7f9 fafa 	bl	800029c <__adddf3>
 8006ca8:	4682      	mov	sl, r0
 8006caa:	468b      	mov	fp, r1
 8006cac:	2d0f      	cmp	r5, #15
 8006cae:	dc38      	bgt.n	8006d22 <_strtod_l+0x45a>
 8006cb0:	9b08      	ldr	r3, [sp, #32]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f43f ae4a 	beq.w	800694c <_strtod_l+0x84>
 8006cb8:	dd24      	ble.n	8006d04 <_strtod_l+0x43c>
 8006cba:	2b16      	cmp	r3, #22
 8006cbc:	dc0b      	bgt.n	8006cd6 <_strtod_l+0x40e>
 8006cbe:	4d6b      	ldr	r5, [pc, #428]	; (8006e6c <_strtod_l+0x5a4>)
 8006cc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006cc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006cc8:	4652      	mov	r2, sl
 8006cca:	465b      	mov	r3, fp
 8006ccc:	f7f9 fc9c 	bl	8000608 <__aeabi_dmul>
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	468b      	mov	fp, r1
 8006cd4:	e63a      	b.n	800694c <_strtod_l+0x84>
 8006cd6:	9a08      	ldr	r2, [sp, #32]
 8006cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	db20      	blt.n	8006d22 <_strtod_l+0x45a>
 8006ce0:	4c62      	ldr	r4, [pc, #392]	; (8006e6c <_strtod_l+0x5a4>)
 8006ce2:	f1c5 050f 	rsb	r5, r5, #15
 8006ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006cea:	4652      	mov	r2, sl
 8006cec:	465b      	mov	r3, fp
 8006cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf2:	f7f9 fc89 	bl	8000608 <__aeabi_dmul>
 8006cf6:	9b08      	ldr	r3, [sp, #32]
 8006cf8:	1b5d      	subs	r5, r3, r5
 8006cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d02:	e7e3      	b.n	8006ccc <_strtod_l+0x404>
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	3316      	adds	r3, #22
 8006d08:	db0b      	blt.n	8006d22 <_strtod_l+0x45a>
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	4a57      	ldr	r2, [pc, #348]	; (8006e6c <_strtod_l+0x5a4>)
 8006d0e:	1b9e      	subs	r6, r3, r6
 8006d10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d18:	4650      	mov	r0, sl
 8006d1a:	4659      	mov	r1, fp
 8006d1c:	f7f9 fd9e 	bl	800085c <__aeabi_ddiv>
 8006d20:	e7d6      	b.n	8006cd0 <_strtod_l+0x408>
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	eba5 0808 	sub.w	r8, r5, r8
 8006d28:	4498      	add	r8, r3
 8006d2a:	f1b8 0f00 	cmp.w	r8, #0
 8006d2e:	dd71      	ble.n	8006e14 <_strtod_l+0x54c>
 8006d30:	f018 030f 	ands.w	r3, r8, #15
 8006d34:	d00a      	beq.n	8006d4c <_strtod_l+0x484>
 8006d36:	494d      	ldr	r1, [pc, #308]	; (8006e6c <_strtod_l+0x5a4>)
 8006d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	465b      	mov	r3, fp
 8006d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d44:	f7f9 fc60 	bl	8000608 <__aeabi_dmul>
 8006d48:	4682      	mov	sl, r0
 8006d4a:	468b      	mov	fp, r1
 8006d4c:	f038 080f 	bics.w	r8, r8, #15
 8006d50:	d04d      	beq.n	8006dee <_strtod_l+0x526>
 8006d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d56:	dd22      	ble.n	8006d9e <_strtod_l+0x4d6>
 8006d58:	2500      	movs	r5, #0
 8006d5a:	462e      	mov	r6, r5
 8006d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d5e:	9507      	str	r5, [sp, #28]
 8006d60:	2322      	movs	r3, #34	; 0x22
 8006d62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006e74 <_strtod_l+0x5ac>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	f04f 0a00 	mov.w	sl, #0
 8006d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f43f adec 	beq.w	800694c <_strtod_l+0x84>
 8006d74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d76:	4620      	mov	r0, r4
 8006d78:	f001 feb2 	bl	8008ae0 <_Bfree>
 8006d7c:	9907      	ldr	r1, [sp, #28]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f001 feae 	bl	8008ae0 <_Bfree>
 8006d84:	4631      	mov	r1, r6
 8006d86:	4620      	mov	r0, r4
 8006d88:	f001 feaa 	bl	8008ae0 <_Bfree>
 8006d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 fea6 	bl	8008ae0 <_Bfree>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f001 fea2 	bl	8008ae0 <_Bfree>
 8006d9c:	e5d6      	b.n	800694c <_strtod_l+0x84>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006da4:	4650      	mov	r0, sl
 8006da6:	4659      	mov	r1, fp
 8006da8:	4699      	mov	r9, r3
 8006daa:	f1b8 0f01 	cmp.w	r8, #1
 8006dae:	dc21      	bgt.n	8006df4 <_strtod_l+0x52c>
 8006db0:	b10b      	cbz	r3, 8006db6 <_strtod_l+0x4ee>
 8006db2:	4682      	mov	sl, r0
 8006db4:	468b      	mov	fp, r1
 8006db6:	4b2e      	ldr	r3, [pc, #184]	; (8006e70 <_strtod_l+0x5a8>)
 8006db8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006dbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006dc8:	f7f9 fc1e 	bl	8000608 <__aeabi_dmul>
 8006dcc:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <_strtod_l+0x5ac>)
 8006dce:	460a      	mov	r2, r1
 8006dd0:	400b      	ands	r3, r1
 8006dd2:	4929      	ldr	r1, [pc, #164]	; (8006e78 <_strtod_l+0x5b0>)
 8006dd4:	428b      	cmp	r3, r1
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	d8be      	bhi.n	8006d58 <_strtod_l+0x490>
 8006dda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dde:	428b      	cmp	r3, r1
 8006de0:	bf86      	itte	hi
 8006de2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006e7c <_strtod_l+0x5b4>
 8006de6:	f04f 3aff 	movhi.w	sl, #4294967295
 8006dea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006dee:	2300      	movs	r3, #0
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	e081      	b.n	8006ef8 <_strtod_l+0x630>
 8006df4:	f018 0f01 	tst.w	r8, #1
 8006df8:	d007      	beq.n	8006e0a <_strtod_l+0x542>
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <_strtod_l+0x5a8>)
 8006dfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f109 0901 	add.w	r9, r9, #1
 8006e0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e12:	e7ca      	b.n	8006daa <_strtod_l+0x4e2>
 8006e14:	d0eb      	beq.n	8006dee <_strtod_l+0x526>
 8006e16:	f1c8 0800 	rsb	r8, r8, #0
 8006e1a:	f018 020f 	ands.w	r2, r8, #15
 8006e1e:	d00a      	beq.n	8006e36 <_strtod_l+0x56e>
 8006e20:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <_strtod_l+0x5a4>)
 8006e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e26:	4650      	mov	r0, sl
 8006e28:	4659      	mov	r1, fp
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fd15 	bl	800085c <__aeabi_ddiv>
 8006e32:	4682      	mov	sl, r0
 8006e34:	468b      	mov	fp, r1
 8006e36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e3a:	d0d8      	beq.n	8006dee <_strtod_l+0x526>
 8006e3c:	f1b8 0f1f 	cmp.w	r8, #31
 8006e40:	dd1e      	ble.n	8006e80 <_strtod_l+0x5b8>
 8006e42:	2500      	movs	r5, #0
 8006e44:	462e      	mov	r6, r5
 8006e46:	9509      	str	r5, [sp, #36]	; 0x24
 8006e48:	9507      	str	r5, [sp, #28]
 8006e4a:	2322      	movs	r3, #34	; 0x22
 8006e4c:	f04f 0a00 	mov.w	sl, #0
 8006e50:	f04f 0b00 	mov.w	fp, #0
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	e789      	b.n	8006d6c <_strtod_l+0x4a4>
 8006e58:	0800a50d 	.word	0x0800a50d
 8006e5c:	0800a550 	.word	0x0800a550
 8006e60:	0800a505 	.word	0x0800a505
 8006e64:	0800a694 	.word	0x0800a694
 8006e68:	0800a950 	.word	0x0800a950
 8006e6c:	0800a830 	.word	0x0800a830
 8006e70:	0800a808 	.word	0x0800a808
 8006e74:	7ff00000 	.word	0x7ff00000
 8006e78:	7ca00000 	.word	0x7ca00000
 8006e7c:	7fefffff 	.word	0x7fefffff
 8006e80:	f018 0310 	ands.w	r3, r8, #16
 8006e84:	bf18      	it	ne
 8006e86:	236a      	movne	r3, #106	; 0x6a
 8006e88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007240 <_strtod_l+0x978>
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	4659      	mov	r1, fp
 8006e92:	2300      	movs	r3, #0
 8006e94:	f018 0f01 	tst.w	r8, #1
 8006e98:	d004      	beq.n	8006ea4 <_strtod_l+0x5dc>
 8006e9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e9e:	f7f9 fbb3 	bl	8000608 <__aeabi_dmul>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ea8:	f109 0908 	add.w	r9, r9, #8
 8006eac:	d1f2      	bne.n	8006e94 <_strtod_l+0x5cc>
 8006eae:	b10b      	cbz	r3, 8006eb4 <_strtod_l+0x5ec>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	468b      	mov	fp, r1
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	b1bb      	cbz	r3, 8006ee8 <_strtod_l+0x620>
 8006eb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006ebc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	4659      	mov	r1, fp
 8006ec4:	dd10      	ble.n	8006ee8 <_strtod_l+0x620>
 8006ec6:	2b1f      	cmp	r3, #31
 8006ec8:	f340 8128 	ble.w	800711c <_strtod_l+0x854>
 8006ecc:	2b34      	cmp	r3, #52	; 0x34
 8006ece:	bfde      	ittt	le
 8006ed0:	3b20      	suble	r3, #32
 8006ed2:	f04f 32ff 	movle.w	r2, #4294967295
 8006ed6:	fa02 f303 	lslle.w	r3, r2, r3
 8006eda:	f04f 0a00 	mov.w	sl, #0
 8006ede:	bfcc      	ite	gt
 8006ee0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006ee4:	ea03 0b01 	andle.w	fp, r3, r1
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4650      	mov	r0, sl
 8006eee:	4659      	mov	r1, fp
 8006ef0:	f7f9 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	d1a4      	bne.n	8006e42 <_strtod_l+0x57a>
 8006ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006efe:	462b      	mov	r3, r5
 8006f00:	463a      	mov	r2, r7
 8006f02:	4620      	mov	r0, r4
 8006f04:	f001 fe58 	bl	8008bb8 <__s2b>
 8006f08:	9009      	str	r0, [sp, #36]	; 0x24
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	f43f af24 	beq.w	8006d58 <_strtod_l+0x490>
 8006f10:	9b07      	ldr	r3, [sp, #28]
 8006f12:	1b9e      	subs	r6, r3, r6
 8006f14:	9b08      	ldr	r3, [sp, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfb4      	ite	lt
 8006f1a:	4633      	movlt	r3, r6
 8006f1c:	2300      	movge	r3, #0
 8006f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8006f20:	9b08      	ldr	r3, [sp, #32]
 8006f22:	2500      	movs	r5, #0
 8006f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006f28:	9318      	str	r3, [sp, #96]	; 0x60
 8006f2a:	462e      	mov	r6, r5
 8006f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f2e:	4620      	mov	r0, r4
 8006f30:	6859      	ldr	r1, [r3, #4]
 8006f32:	f001 fd95 	bl	8008a60 <_Balloc>
 8006f36:	9007      	str	r0, [sp, #28]
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	f43f af11 	beq.w	8006d60 <_strtod_l+0x498>
 8006f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	3202      	adds	r2, #2
 8006f44:	f103 010c 	add.w	r1, r3, #12
 8006f48:	0092      	lsls	r2, r2, #2
 8006f4a:	300c      	adds	r0, #12
 8006f4c:	f001 fd7a 	bl	8008a44 <memcpy>
 8006f50:	ec4b ab10 	vmov	d0, sl, fp
 8006f54:	aa20      	add	r2, sp, #128	; 0x80
 8006f56:	a91f      	add	r1, sp, #124	; 0x7c
 8006f58:	4620      	mov	r0, r4
 8006f5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006f5e:	f002 f967 	bl	8009230 <__d2b>
 8006f62:	901e      	str	r0, [sp, #120]	; 0x78
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f43f aefb 	beq.w	8006d60 <_strtod_l+0x498>
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f001 febd 	bl	8008cec <__i2b>
 8006f72:	4606      	mov	r6, r0
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f aef3 	beq.w	8006d60 <_strtod_l+0x498>
 8006f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f7c:	9904      	ldr	r1, [sp, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfab      	itete	ge
 8006f82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006f84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006f86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006f88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006f8c:	bfac      	ite	ge
 8006f8e:	eb03 0902 	addge.w	r9, r3, r2
 8006f92:	1ad7      	sublt	r7, r2, r3
 8006f94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f96:	eba3 0801 	sub.w	r8, r3, r1
 8006f9a:	4490      	add	r8, r2
 8006f9c:	4ba3      	ldr	r3, [pc, #652]	; (800722c <_strtod_l+0x964>)
 8006f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fa2:	4598      	cmp	r8, r3
 8006fa4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fa8:	f280 80cc 	bge.w	8007144 <_strtod_l+0x87c>
 8006fac:	eba3 0308 	sub.w	r3, r3, r8
 8006fb0:	2b1f      	cmp	r3, #31
 8006fb2:	eba2 0203 	sub.w	r2, r2, r3
 8006fb6:	f04f 0101 	mov.w	r1, #1
 8006fba:	f300 80b6 	bgt.w	800712a <_strtod_l+0x862>
 8006fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc2:	9311      	str	r3, [sp, #68]	; 0x44
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc8:	eb09 0802 	add.w	r8, r9, r2
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	45c1      	cmp	r9, r8
 8006fd0:	4417      	add	r7, r2
 8006fd2:	441f      	add	r7, r3
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	bfa8      	it	ge
 8006fd8:	4643      	movge	r3, r8
 8006fda:	42bb      	cmp	r3, r7
 8006fdc:	bfa8      	it	ge
 8006fde:	463b      	movge	r3, r7
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfc2      	ittt	gt
 8006fe4:	eba8 0803 	subgt.w	r8, r8, r3
 8006fe8:	1aff      	subgt	r7, r7, r3
 8006fea:	eba9 0903 	subgt.w	r9, r9, r3
 8006fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	dd17      	ble.n	8007024 <_strtod_l+0x75c>
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 ff33 	bl	8008e64 <__pow5mult>
 8006ffe:	4606      	mov	r6, r0
 8007000:	2800      	cmp	r0, #0
 8007002:	f43f aead 	beq.w	8006d60 <_strtod_l+0x498>
 8007006:	4601      	mov	r1, r0
 8007008:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800700a:	4620      	mov	r0, r4
 800700c:	f001 fe84 	bl	8008d18 <__multiply>
 8007010:	900f      	str	r0, [sp, #60]	; 0x3c
 8007012:	2800      	cmp	r0, #0
 8007014:	f43f aea4 	beq.w	8006d60 <_strtod_l+0x498>
 8007018:	991e      	ldr	r1, [sp, #120]	; 0x78
 800701a:	4620      	mov	r0, r4
 800701c:	f001 fd60 	bl	8008ae0 <_Bfree>
 8007020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007022:	931e      	str	r3, [sp, #120]	; 0x78
 8007024:	f1b8 0f00 	cmp.w	r8, #0
 8007028:	f300 8091 	bgt.w	800714e <_strtod_l+0x886>
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dd08      	ble.n	8007044 <_strtod_l+0x77c>
 8007032:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007034:	9907      	ldr	r1, [sp, #28]
 8007036:	4620      	mov	r0, r4
 8007038:	f001 ff14 	bl	8008e64 <__pow5mult>
 800703c:	9007      	str	r0, [sp, #28]
 800703e:	2800      	cmp	r0, #0
 8007040:	f43f ae8e 	beq.w	8006d60 <_strtod_l+0x498>
 8007044:	2f00      	cmp	r7, #0
 8007046:	dd08      	ble.n	800705a <_strtod_l+0x792>
 8007048:	9907      	ldr	r1, [sp, #28]
 800704a:	463a      	mov	r2, r7
 800704c:	4620      	mov	r0, r4
 800704e:	f001 ff63 	bl	8008f18 <__lshift>
 8007052:	9007      	str	r0, [sp, #28]
 8007054:	2800      	cmp	r0, #0
 8007056:	f43f ae83 	beq.w	8006d60 <_strtod_l+0x498>
 800705a:	f1b9 0f00 	cmp.w	r9, #0
 800705e:	dd08      	ble.n	8007072 <_strtod_l+0x7aa>
 8007060:	4631      	mov	r1, r6
 8007062:	464a      	mov	r2, r9
 8007064:	4620      	mov	r0, r4
 8007066:	f001 ff57 	bl	8008f18 <__lshift>
 800706a:	4606      	mov	r6, r0
 800706c:	2800      	cmp	r0, #0
 800706e:	f43f ae77 	beq.w	8006d60 <_strtod_l+0x498>
 8007072:	9a07      	ldr	r2, [sp, #28]
 8007074:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007076:	4620      	mov	r0, r4
 8007078:	f001 ffd6 	bl	8009028 <__mdiff>
 800707c:	4605      	mov	r5, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	f43f ae6e 	beq.w	8006d60 <_strtod_l+0x498>
 8007084:	68c3      	ldr	r3, [r0, #12]
 8007086:	930f      	str	r3, [sp, #60]	; 0x3c
 8007088:	2300      	movs	r3, #0
 800708a:	60c3      	str	r3, [r0, #12]
 800708c:	4631      	mov	r1, r6
 800708e:	f001 ffaf 	bl	8008ff0 <__mcmp>
 8007092:	2800      	cmp	r0, #0
 8007094:	da65      	bge.n	8007162 <_strtod_l+0x89a>
 8007096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007098:	ea53 030a 	orrs.w	r3, r3, sl
 800709c:	f040 8087 	bne.w	80071ae <_strtod_l+0x8e6>
 80070a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 8082 	bne.w	80071ae <_strtod_l+0x8e6>
 80070aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070ae:	0d1b      	lsrs	r3, r3, #20
 80070b0:	051b      	lsls	r3, r3, #20
 80070b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070b6:	d97a      	bls.n	80071ae <_strtod_l+0x8e6>
 80070b8:	696b      	ldr	r3, [r5, #20]
 80070ba:	b913      	cbnz	r3, 80070c2 <_strtod_l+0x7fa>
 80070bc:	692b      	ldr	r3, [r5, #16]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	dd75      	ble.n	80071ae <_strtod_l+0x8e6>
 80070c2:	4629      	mov	r1, r5
 80070c4:	2201      	movs	r2, #1
 80070c6:	4620      	mov	r0, r4
 80070c8:	f001 ff26 	bl	8008f18 <__lshift>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4605      	mov	r5, r0
 80070d0:	f001 ff8e 	bl	8008ff0 <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	dd6a      	ble.n	80071ae <_strtod_l+0x8e6>
 80070d8:	9904      	ldr	r1, [sp, #16]
 80070da:	4a55      	ldr	r2, [pc, #340]	; (8007230 <_strtod_l+0x968>)
 80070dc:	465b      	mov	r3, fp
 80070de:	2900      	cmp	r1, #0
 80070e0:	f000 8085 	beq.w	80071ee <_strtod_l+0x926>
 80070e4:	ea02 010b 	and.w	r1, r2, fp
 80070e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070ec:	dc7f      	bgt.n	80071ee <_strtod_l+0x926>
 80070ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070f2:	f77f aeaa 	ble.w	8006e4a <_strtod_l+0x582>
 80070f6:	4a4f      	ldr	r2, [pc, #316]	; (8007234 <_strtod_l+0x96c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80070fe:	4650      	mov	r0, sl
 8007100:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007104:	4659      	mov	r1, fp
 8007106:	f7f9 fa7f 	bl	8000608 <__aeabi_dmul>
 800710a:	460b      	mov	r3, r1
 800710c:	4303      	orrs	r3, r0
 800710e:	bf08      	it	eq
 8007110:	2322      	moveq	r3, #34	; 0x22
 8007112:	4682      	mov	sl, r0
 8007114:	468b      	mov	fp, r1
 8007116:	bf08      	it	eq
 8007118:	6023      	streq	r3, [r4, #0]
 800711a:	e62b      	b.n	8006d74 <_strtod_l+0x4ac>
 800711c:	f04f 32ff 	mov.w	r2, #4294967295
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	ea03 0a0a 	and.w	sl, r3, sl
 8007128:	e6de      	b.n	8006ee8 <_strtod_l+0x620>
 800712a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800712e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800713a:	fa01 f308 	lsl.w	r3, r1, r8
 800713e:	930c      	str	r3, [sp, #48]	; 0x30
 8007140:	9111      	str	r1, [sp, #68]	; 0x44
 8007142:	e741      	b.n	8006fc8 <_strtod_l+0x700>
 8007144:	2300      	movs	r3, #0
 8007146:	930c      	str	r3, [sp, #48]	; 0x30
 8007148:	2301      	movs	r3, #1
 800714a:	9311      	str	r3, [sp, #68]	; 0x44
 800714c:	e73c      	b.n	8006fc8 <_strtod_l+0x700>
 800714e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007150:	4642      	mov	r2, r8
 8007152:	4620      	mov	r0, r4
 8007154:	f001 fee0 	bl	8008f18 <__lshift>
 8007158:	901e      	str	r0, [sp, #120]	; 0x78
 800715a:	2800      	cmp	r0, #0
 800715c:	f47f af66 	bne.w	800702c <_strtod_l+0x764>
 8007160:	e5fe      	b.n	8006d60 <_strtod_l+0x498>
 8007162:	465f      	mov	r7, fp
 8007164:	d16e      	bne.n	8007244 <_strtod_l+0x97c>
 8007166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800716c:	b342      	cbz	r2, 80071c0 <_strtod_l+0x8f8>
 800716e:	4a32      	ldr	r2, [pc, #200]	; (8007238 <_strtod_l+0x970>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d128      	bne.n	80071c6 <_strtod_l+0x8fe>
 8007174:	9b04      	ldr	r3, [sp, #16]
 8007176:	4650      	mov	r0, sl
 8007178:	b1eb      	cbz	r3, 80071b6 <_strtod_l+0x8ee>
 800717a:	4a2d      	ldr	r2, [pc, #180]	; (8007230 <_strtod_l+0x968>)
 800717c:	403a      	ands	r2, r7
 800717e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007182:	f04f 31ff 	mov.w	r1, #4294967295
 8007186:	d819      	bhi.n	80071bc <_strtod_l+0x8f4>
 8007188:	0d12      	lsrs	r2, r2, #20
 800718a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	4298      	cmp	r0, r3
 8007194:	d117      	bne.n	80071c6 <_strtod_l+0x8fe>
 8007196:	4b29      	ldr	r3, [pc, #164]	; (800723c <_strtod_l+0x974>)
 8007198:	429f      	cmp	r7, r3
 800719a:	d102      	bne.n	80071a2 <_strtod_l+0x8da>
 800719c:	3001      	adds	r0, #1
 800719e:	f43f addf 	beq.w	8006d60 <_strtod_l+0x498>
 80071a2:	4b23      	ldr	r3, [pc, #140]	; (8007230 <_strtod_l+0x968>)
 80071a4:	403b      	ands	r3, r7
 80071a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80071aa:	f04f 0a00 	mov.w	sl, #0
 80071ae:	9b04      	ldr	r3, [sp, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1a0      	bne.n	80070f6 <_strtod_l+0x82e>
 80071b4:	e5de      	b.n	8006d74 <_strtod_l+0x4ac>
 80071b6:	f04f 33ff 	mov.w	r3, #4294967295
 80071ba:	e7ea      	b.n	8007192 <_strtod_l+0x8ca>
 80071bc:	460b      	mov	r3, r1
 80071be:	e7e8      	b.n	8007192 <_strtod_l+0x8ca>
 80071c0:	ea53 030a 	orrs.w	r3, r3, sl
 80071c4:	d088      	beq.n	80070d8 <_strtod_l+0x810>
 80071c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071c8:	b1db      	cbz	r3, 8007202 <_strtod_l+0x93a>
 80071ca:	423b      	tst	r3, r7
 80071cc:	d0ef      	beq.n	80071ae <_strtod_l+0x8e6>
 80071ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d0:	9a04      	ldr	r2, [sp, #16]
 80071d2:	4650      	mov	r0, sl
 80071d4:	4659      	mov	r1, fp
 80071d6:	b1c3      	cbz	r3, 800720a <_strtod_l+0x942>
 80071d8:	f7ff fb5a 	bl	8006890 <sulp>
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071e4:	f7f9 f85a 	bl	800029c <__adddf3>
 80071e8:	4682      	mov	sl, r0
 80071ea:	468b      	mov	fp, r1
 80071ec:	e7df      	b.n	80071ae <_strtod_l+0x8e6>
 80071ee:	4013      	ands	r3, r2
 80071f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071fc:	f04f 3aff 	mov.w	sl, #4294967295
 8007200:	e7d5      	b.n	80071ae <_strtod_l+0x8e6>
 8007202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007204:	ea13 0f0a 	tst.w	r3, sl
 8007208:	e7e0      	b.n	80071cc <_strtod_l+0x904>
 800720a:	f7ff fb41 	bl	8006890 <sulp>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007216:	f7f9 f83f 	bl	8000298 <__aeabi_dsub>
 800721a:	2200      	movs	r2, #0
 800721c:	2300      	movs	r3, #0
 800721e:	4682      	mov	sl, r0
 8007220:	468b      	mov	fp, r1
 8007222:	f7f9 fc59 	bl	8000ad8 <__aeabi_dcmpeq>
 8007226:	2800      	cmp	r0, #0
 8007228:	d0c1      	beq.n	80071ae <_strtod_l+0x8e6>
 800722a:	e60e      	b.n	8006e4a <_strtod_l+0x582>
 800722c:	fffffc02 	.word	0xfffffc02
 8007230:	7ff00000 	.word	0x7ff00000
 8007234:	39500000 	.word	0x39500000
 8007238:	000fffff 	.word	0x000fffff
 800723c:	7fefffff 	.word	0x7fefffff
 8007240:	0800a568 	.word	0x0800a568
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	f002 f84e 	bl	80092e8 <__ratio>
 800724c:	ec59 8b10 	vmov	r8, r9, d0
 8007250:	ee10 0a10 	vmov	r0, s0
 8007254:	2200      	movs	r2, #0
 8007256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800725a:	4649      	mov	r1, r9
 800725c:	f7f9 fc50 	bl	8000b00 <__aeabi_dcmple>
 8007260:	2800      	cmp	r0, #0
 8007262:	d07c      	beq.n	800735e <_strtod_l+0xa96>
 8007264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04c      	beq.n	8007304 <_strtod_l+0xa3c>
 800726a:	4b95      	ldr	r3, [pc, #596]	; (80074c0 <_strtod_l+0xbf8>)
 800726c:	2200      	movs	r2, #0
 800726e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007272:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80074c0 <_strtod_l+0xbf8>
 8007276:	f04f 0800 	mov.w	r8, #0
 800727a:	4b92      	ldr	r3, [pc, #584]	; (80074c4 <_strtod_l+0xbfc>)
 800727c:	403b      	ands	r3, r7
 800727e:	9311      	str	r3, [sp, #68]	; 0x44
 8007280:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007282:	4b91      	ldr	r3, [pc, #580]	; (80074c8 <_strtod_l+0xc00>)
 8007284:	429a      	cmp	r2, r3
 8007286:	f040 80b2 	bne.w	80073ee <_strtod_l+0xb26>
 800728a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800728e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007292:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007296:	ec4b ab10 	vmov	d0, sl, fp
 800729a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800729e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80072a2:	f001 ff49 	bl	8009138 <__ulp>
 80072a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80072aa:	ec53 2b10 	vmov	r2, r3, d0
 80072ae:	f7f9 f9ab 	bl	8000608 <__aeabi_dmul>
 80072b2:	4652      	mov	r2, sl
 80072b4:	465b      	mov	r3, fp
 80072b6:	f7f8 fff1 	bl	800029c <__adddf3>
 80072ba:	460b      	mov	r3, r1
 80072bc:	4981      	ldr	r1, [pc, #516]	; (80074c4 <_strtod_l+0xbfc>)
 80072be:	4a83      	ldr	r2, [pc, #524]	; (80074cc <_strtod_l+0xc04>)
 80072c0:	4019      	ands	r1, r3
 80072c2:	4291      	cmp	r1, r2
 80072c4:	4682      	mov	sl, r0
 80072c6:	d95e      	bls.n	8007386 <_strtod_l+0xabe>
 80072c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d103      	bne.n	80072da <_strtod_l+0xa12>
 80072d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d4:	3301      	adds	r3, #1
 80072d6:	f43f ad43 	beq.w	8006d60 <_strtod_l+0x498>
 80072da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80074d8 <_strtod_l+0xc10>
 80072de:	f04f 3aff 	mov.w	sl, #4294967295
 80072e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 fbfb 	bl	8008ae0 <_Bfree>
 80072ea:	9907      	ldr	r1, [sp, #28]
 80072ec:	4620      	mov	r0, r4
 80072ee:	f001 fbf7 	bl	8008ae0 <_Bfree>
 80072f2:	4631      	mov	r1, r6
 80072f4:	4620      	mov	r0, r4
 80072f6:	f001 fbf3 	bl	8008ae0 <_Bfree>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4620      	mov	r0, r4
 80072fe:	f001 fbef 	bl	8008ae0 <_Bfree>
 8007302:	e613      	b.n	8006f2c <_strtod_l+0x664>
 8007304:	f1ba 0f00 	cmp.w	sl, #0
 8007308:	d11b      	bne.n	8007342 <_strtod_l+0xa7a>
 800730a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800730e:	b9f3      	cbnz	r3, 800734e <_strtod_l+0xa86>
 8007310:	4b6b      	ldr	r3, [pc, #428]	; (80074c0 <_strtod_l+0xbf8>)
 8007312:	2200      	movs	r2, #0
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 fbe8 	bl	8000aec <__aeabi_dcmplt>
 800731c:	b9d0      	cbnz	r0, 8007354 <_strtod_l+0xa8c>
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	4b6b      	ldr	r3, [pc, #428]	; (80074d0 <_strtod_l+0xc08>)
 8007324:	2200      	movs	r2, #0
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4680      	mov	r8, r0
 800732c:	4689      	mov	r9, r1
 800732e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007332:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007336:	931b      	str	r3, [sp, #108]	; 0x6c
 8007338:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800733c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007340:	e79b      	b.n	800727a <_strtod_l+0x9b2>
 8007342:	f1ba 0f01 	cmp.w	sl, #1
 8007346:	d102      	bne.n	800734e <_strtod_l+0xa86>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f43f ad7e 	beq.w	8006e4a <_strtod_l+0x582>
 800734e:	4b61      	ldr	r3, [pc, #388]	; (80074d4 <_strtod_l+0xc0c>)
 8007350:	2200      	movs	r2, #0
 8007352:	e78c      	b.n	800726e <_strtod_l+0x9a6>
 8007354:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80074d0 <_strtod_l+0xc08>
 8007358:	f04f 0800 	mov.w	r8, #0
 800735c:	e7e7      	b.n	800732e <_strtod_l+0xa66>
 800735e:	4b5c      	ldr	r3, [pc, #368]	; (80074d0 <_strtod_l+0xc08>)
 8007360:	4640      	mov	r0, r8
 8007362:	4649      	mov	r1, r9
 8007364:	2200      	movs	r2, #0
 8007366:	f7f9 f94f 	bl	8000608 <__aeabi_dmul>
 800736a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800736c:	4680      	mov	r8, r0
 800736e:	4689      	mov	r9, r1
 8007370:	b933      	cbnz	r3, 8007380 <_strtod_l+0xab8>
 8007372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007376:	9012      	str	r0, [sp, #72]	; 0x48
 8007378:	9313      	str	r3, [sp, #76]	; 0x4c
 800737a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800737e:	e7dd      	b.n	800733c <_strtod_l+0xa74>
 8007380:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007384:	e7f9      	b.n	800737a <_strtod_l+0xab2>
 8007386:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1a8      	bne.n	80072e2 <_strtod_l+0xa1a>
 8007390:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007396:	0d1b      	lsrs	r3, r3, #20
 8007398:	051b      	lsls	r3, r3, #20
 800739a:	429a      	cmp	r2, r3
 800739c:	d1a1      	bne.n	80072e2 <_strtod_l+0xa1a>
 800739e:	4640      	mov	r0, r8
 80073a0:	4649      	mov	r1, r9
 80073a2:	f7f9 fc91 	bl	8000cc8 <__aeabi_d2lz>
 80073a6:	f7f9 f901 	bl	80005ac <__aeabi_l2d>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4640      	mov	r0, r8
 80073b0:	4649      	mov	r1, r9
 80073b2:	f7f8 ff71 	bl	8000298 <__aeabi_dsub>
 80073b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073bc:	ea43 030a 	orr.w	r3, r3, sl
 80073c0:	4313      	orrs	r3, r2
 80073c2:	4680      	mov	r8, r0
 80073c4:	4689      	mov	r9, r1
 80073c6:	d053      	beq.n	8007470 <_strtod_l+0xba8>
 80073c8:	a335      	add	r3, pc, #212	; (adr r3, 80074a0 <_strtod_l+0xbd8>)
 80073ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ce:	f7f9 fb8d 	bl	8000aec <__aeabi_dcmplt>
 80073d2:	2800      	cmp	r0, #0
 80073d4:	f47f acce 	bne.w	8006d74 <_strtod_l+0x4ac>
 80073d8:	a333      	add	r3, pc, #204	; (adr r3, 80074a8 <_strtod_l+0xbe0>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	4640      	mov	r0, r8
 80073e0:	4649      	mov	r1, r9
 80073e2:	f7f9 fba1 	bl	8000b28 <__aeabi_dcmpgt>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f43f af7b 	beq.w	80072e2 <_strtod_l+0xa1a>
 80073ec:	e4c2      	b.n	8006d74 <_strtod_l+0x4ac>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	b333      	cbz	r3, 8007440 <_strtod_l+0xb78>
 80073f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073f8:	d822      	bhi.n	8007440 <_strtod_l+0xb78>
 80073fa:	a32d      	add	r3, pc, #180	; (adr r3, 80074b0 <_strtod_l+0xbe8>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	4640      	mov	r0, r8
 8007402:	4649      	mov	r1, r9
 8007404:	f7f9 fb7c 	bl	8000b00 <__aeabi_dcmple>
 8007408:	b1a0      	cbz	r0, 8007434 <_strtod_l+0xb6c>
 800740a:	4649      	mov	r1, r9
 800740c:	4640      	mov	r0, r8
 800740e:	f7f9 fbd3 	bl	8000bb8 <__aeabi_d2uiz>
 8007412:	2801      	cmp	r0, #1
 8007414:	bf38      	it	cc
 8007416:	2001      	movcc	r0, #1
 8007418:	f7f9 f87c 	bl	8000514 <__aeabi_ui2d>
 800741c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	bb13      	cbnz	r3, 800746a <_strtod_l+0xba2>
 8007424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007428:	9014      	str	r0, [sp, #80]	; 0x50
 800742a:	9315      	str	r3, [sp, #84]	; 0x54
 800742c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007430:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007436:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007438:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	930d      	str	r3, [sp, #52]	; 0x34
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007444:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800744c:	f001 fe74 	bl	8009138 <__ulp>
 8007450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007454:	ec53 2b10 	vmov	r2, r3, d0
 8007458:	f7f9 f8d6 	bl	8000608 <__aeabi_dmul>
 800745c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007460:	f7f8 ff1c 	bl	800029c <__adddf3>
 8007464:	4682      	mov	sl, r0
 8007466:	468b      	mov	fp, r1
 8007468:	e78f      	b.n	800738a <_strtod_l+0xac2>
 800746a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800746e:	e7dd      	b.n	800742c <_strtod_l+0xb64>
 8007470:	a311      	add	r3, pc, #68	; (adr r3, 80074b8 <_strtod_l+0xbf0>)
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f9 fb39 	bl	8000aec <__aeabi_dcmplt>
 800747a:	e7b4      	b.n	80073e6 <_strtod_l+0xb1e>
 800747c:	2300      	movs	r3, #0
 800747e:	930e      	str	r3, [sp, #56]	; 0x38
 8007480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	f7ff ba65 	b.w	8006954 <_strtod_l+0x8c>
 800748a:	2b65      	cmp	r3, #101	; 0x65
 800748c:	f43f ab5d 	beq.w	8006b4a <_strtod_l+0x282>
 8007490:	2b45      	cmp	r3, #69	; 0x45
 8007492:	f43f ab5a 	beq.w	8006b4a <_strtod_l+0x282>
 8007496:	2201      	movs	r2, #1
 8007498:	f7ff bb92 	b.w	8006bc0 <_strtod_l+0x2f8>
 800749c:	f3af 8000 	nop.w
 80074a0:	94a03595 	.word	0x94a03595
 80074a4:	3fdfffff 	.word	0x3fdfffff
 80074a8:	35afe535 	.word	0x35afe535
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	ffc00000 	.word	0xffc00000
 80074b4:	41dfffff 	.word	0x41dfffff
 80074b8:	94a03595 	.word	0x94a03595
 80074bc:	3fcfffff 	.word	0x3fcfffff
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	7ff00000 	.word	0x7ff00000
 80074c8:	7fe00000 	.word	0x7fe00000
 80074cc:	7c9fffff 	.word	0x7c9fffff
 80074d0:	3fe00000 	.word	0x3fe00000
 80074d4:	bff00000 	.word	0xbff00000
 80074d8:	7fefffff 	.word	0x7fefffff

080074dc <_strtod_r>:
 80074dc:	4b01      	ldr	r3, [pc, #4]	; (80074e4 <_strtod_r+0x8>)
 80074de:	f7ff b9f3 	b.w	80068c8 <_strtod_l>
 80074e2:	bf00      	nop
 80074e4:	20000088 	.word	0x20000088

080074e8 <_strtol_l.isra.0>:
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ee:	d001      	beq.n	80074f4 <_strtol_l.isra.0+0xc>
 80074f0:	2b24      	cmp	r3, #36	; 0x24
 80074f2:	d906      	bls.n	8007502 <_strtol_l.isra.0+0x1a>
 80074f4:	f7fe fafa 	bl	8005aec <__errno>
 80074f8:	2316      	movs	r3, #22
 80074fa:	6003      	str	r3, [r0, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	4f3a      	ldr	r7, [pc, #232]	; (80075ec <_strtol_l.isra.0+0x104>)
 8007504:	468e      	mov	lr, r1
 8007506:	4676      	mov	r6, lr
 8007508:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800750c:	5de5      	ldrb	r5, [r4, r7]
 800750e:	f015 0508 	ands.w	r5, r5, #8
 8007512:	d1f8      	bne.n	8007506 <_strtol_l.isra.0+0x1e>
 8007514:	2c2d      	cmp	r4, #45	; 0x2d
 8007516:	d134      	bne.n	8007582 <_strtol_l.isra.0+0x9a>
 8007518:	f89e 4000 	ldrb.w	r4, [lr]
 800751c:	f04f 0801 	mov.w	r8, #1
 8007520:	f106 0e02 	add.w	lr, r6, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05c      	beq.n	80075e2 <_strtol_l.isra.0+0xfa>
 8007528:	2b10      	cmp	r3, #16
 800752a:	d10c      	bne.n	8007546 <_strtol_l.isra.0+0x5e>
 800752c:	2c30      	cmp	r4, #48	; 0x30
 800752e:	d10a      	bne.n	8007546 <_strtol_l.isra.0+0x5e>
 8007530:	f89e 4000 	ldrb.w	r4, [lr]
 8007534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007538:	2c58      	cmp	r4, #88	; 0x58
 800753a:	d14d      	bne.n	80075d8 <_strtol_l.isra.0+0xf0>
 800753c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007540:	2310      	movs	r3, #16
 8007542:	f10e 0e02 	add.w	lr, lr, #2
 8007546:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800754a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800754e:	2600      	movs	r6, #0
 8007550:	fbbc f9f3 	udiv	r9, ip, r3
 8007554:	4635      	mov	r5, r6
 8007556:	fb03 ca19 	mls	sl, r3, r9, ip
 800755a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800755e:	2f09      	cmp	r7, #9
 8007560:	d818      	bhi.n	8007594 <_strtol_l.isra.0+0xac>
 8007562:	463c      	mov	r4, r7
 8007564:	42a3      	cmp	r3, r4
 8007566:	dd24      	ble.n	80075b2 <_strtol_l.isra.0+0xca>
 8007568:	2e00      	cmp	r6, #0
 800756a:	db1f      	blt.n	80075ac <_strtol_l.isra.0+0xc4>
 800756c:	45a9      	cmp	r9, r5
 800756e:	d31d      	bcc.n	80075ac <_strtol_l.isra.0+0xc4>
 8007570:	d101      	bne.n	8007576 <_strtol_l.isra.0+0x8e>
 8007572:	45a2      	cmp	sl, r4
 8007574:	db1a      	blt.n	80075ac <_strtol_l.isra.0+0xc4>
 8007576:	fb05 4503 	mla	r5, r5, r3, r4
 800757a:	2601      	movs	r6, #1
 800757c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007580:	e7eb      	b.n	800755a <_strtol_l.isra.0+0x72>
 8007582:	2c2b      	cmp	r4, #43	; 0x2b
 8007584:	bf08      	it	eq
 8007586:	f89e 4000 	ldrbeq.w	r4, [lr]
 800758a:	46a8      	mov	r8, r5
 800758c:	bf08      	it	eq
 800758e:	f106 0e02 	addeq.w	lr, r6, #2
 8007592:	e7c7      	b.n	8007524 <_strtol_l.isra.0+0x3c>
 8007594:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007598:	2f19      	cmp	r7, #25
 800759a:	d801      	bhi.n	80075a0 <_strtol_l.isra.0+0xb8>
 800759c:	3c37      	subs	r4, #55	; 0x37
 800759e:	e7e1      	b.n	8007564 <_strtol_l.isra.0+0x7c>
 80075a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80075a4:	2f19      	cmp	r7, #25
 80075a6:	d804      	bhi.n	80075b2 <_strtol_l.isra.0+0xca>
 80075a8:	3c57      	subs	r4, #87	; 0x57
 80075aa:	e7db      	b.n	8007564 <_strtol_l.isra.0+0x7c>
 80075ac:	f04f 36ff 	mov.w	r6, #4294967295
 80075b0:	e7e4      	b.n	800757c <_strtol_l.isra.0+0x94>
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	da05      	bge.n	80075c2 <_strtol_l.isra.0+0xda>
 80075b6:	2322      	movs	r3, #34	; 0x22
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	4665      	mov	r5, ip
 80075bc:	b942      	cbnz	r2, 80075d0 <_strtol_l.isra.0+0xe8>
 80075be:	4628      	mov	r0, r5
 80075c0:	e79d      	b.n	80074fe <_strtol_l.isra.0+0x16>
 80075c2:	f1b8 0f00 	cmp.w	r8, #0
 80075c6:	d000      	beq.n	80075ca <_strtol_l.isra.0+0xe2>
 80075c8:	426d      	negs	r5, r5
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d0f7      	beq.n	80075be <_strtol_l.isra.0+0xd6>
 80075ce:	b10e      	cbz	r6, 80075d4 <_strtol_l.isra.0+0xec>
 80075d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	e7f2      	b.n	80075be <_strtol_l.isra.0+0xd6>
 80075d8:	2430      	movs	r4, #48	; 0x30
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1b3      	bne.n	8007546 <_strtol_l.isra.0+0x5e>
 80075de:	2308      	movs	r3, #8
 80075e0:	e7b1      	b.n	8007546 <_strtol_l.isra.0+0x5e>
 80075e2:	2c30      	cmp	r4, #48	; 0x30
 80075e4:	d0a4      	beq.n	8007530 <_strtol_l.isra.0+0x48>
 80075e6:	230a      	movs	r3, #10
 80075e8:	e7ad      	b.n	8007546 <_strtol_l.isra.0+0x5e>
 80075ea:	bf00      	nop
 80075ec:	0800a591 	.word	0x0800a591

080075f0 <_strtol_r>:
 80075f0:	f7ff bf7a 	b.w	80074e8 <_strtol_l.isra.0>

080075f4 <_vsiprintf_r>:
 80075f4:	b500      	push	{lr}
 80075f6:	b09b      	sub	sp, #108	; 0x6c
 80075f8:	9100      	str	r1, [sp, #0]
 80075fa:	9104      	str	r1, [sp, #16]
 80075fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	9102      	str	r1, [sp, #8]
 8007604:	4905      	ldr	r1, [pc, #20]	; (800761c <_vsiprintf_r+0x28>)
 8007606:	9103      	str	r1, [sp, #12]
 8007608:	4669      	mov	r1, sp
 800760a:	f001 fff9 	bl	8009600 <_svfiprintf_r>
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	2200      	movs	r2, #0
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	b01b      	add	sp, #108	; 0x6c
 8007616:	f85d fb04 	ldr.w	pc, [sp], #4
 800761a:	bf00      	nop
 800761c:	ffff0208 	.word	0xffff0208

08007620 <vsiprintf>:
 8007620:	4613      	mov	r3, r2
 8007622:	460a      	mov	r2, r1
 8007624:	4601      	mov	r1, r0
 8007626:	4802      	ldr	r0, [pc, #8]	; (8007630 <vsiprintf+0x10>)
 8007628:	6800      	ldr	r0, [r0, #0]
 800762a:	f7ff bfe3 	b.w	80075f4 <_vsiprintf_r>
 800762e:	bf00      	nop
 8007630:	20000020 	.word	0x20000020

08007634 <quorem>:
 8007634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	6903      	ldr	r3, [r0, #16]
 800763a:	690c      	ldr	r4, [r1, #16]
 800763c:	42a3      	cmp	r3, r4
 800763e:	4607      	mov	r7, r0
 8007640:	f2c0 8081 	blt.w	8007746 <quorem+0x112>
 8007644:	3c01      	subs	r4, #1
 8007646:	f101 0814 	add.w	r8, r1, #20
 800764a:	f100 0514 	add.w	r5, r0, #20
 800764e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765c:	3301      	adds	r3, #1
 800765e:	429a      	cmp	r2, r3
 8007660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007668:	fbb2 f6f3 	udiv	r6, r2, r3
 800766c:	d331      	bcc.n	80076d2 <quorem+0x9e>
 800766e:	f04f 0e00 	mov.w	lr, #0
 8007672:	4640      	mov	r0, r8
 8007674:	46ac      	mov	ip, r5
 8007676:	46f2      	mov	sl, lr
 8007678:	f850 2b04 	ldr.w	r2, [r0], #4
 800767c:	b293      	uxth	r3, r2
 800767e:	fb06 e303 	mla	r3, r6, r3, lr
 8007682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007686:	b29b      	uxth	r3, r3
 8007688:	ebaa 0303 	sub.w	r3, sl, r3
 800768c:	0c12      	lsrs	r2, r2, #16
 800768e:	f8dc a000 	ldr.w	sl, [ip]
 8007692:	fb06 e202 	mla	r2, r6, r2, lr
 8007696:	fa13 f38a 	uxtah	r3, r3, sl
 800769a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800769e:	fa1f fa82 	uxth.w	sl, r2
 80076a2:	f8dc 2000 	ldr.w	r2, [ip]
 80076a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b4:	4581      	cmp	r9, r0
 80076b6:	f84c 3b04 	str.w	r3, [ip], #4
 80076ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076be:	d2db      	bcs.n	8007678 <quorem+0x44>
 80076c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80076c4:	b92b      	cbnz	r3, 80076d2 <quorem+0x9e>
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	3b04      	subs	r3, #4
 80076ca:	429d      	cmp	r5, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	d32e      	bcc.n	800772e <quorem+0xfa>
 80076d0:	613c      	str	r4, [r7, #16]
 80076d2:	4638      	mov	r0, r7
 80076d4:	f001 fc8c 	bl	8008ff0 <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	db24      	blt.n	8007726 <quorem+0xf2>
 80076dc:	3601      	adds	r6, #1
 80076de:	4628      	mov	r0, r5
 80076e0:	f04f 0c00 	mov.w	ip, #0
 80076e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076e8:	f8d0 e000 	ldr.w	lr, [r0]
 80076ec:	b293      	uxth	r3, r2
 80076ee:	ebac 0303 	sub.w	r3, ip, r3
 80076f2:	0c12      	lsrs	r2, r2, #16
 80076f4:	fa13 f38e 	uxtah	r3, r3, lr
 80076f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007700:	b29b      	uxth	r3, r3
 8007702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007706:	45c1      	cmp	r9, r8
 8007708:	f840 3b04 	str.w	r3, [r0], #4
 800770c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007710:	d2e8      	bcs.n	80076e4 <quorem+0xb0>
 8007712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800771a:	b922      	cbnz	r2, 8007726 <quorem+0xf2>
 800771c:	3b04      	subs	r3, #4
 800771e:	429d      	cmp	r5, r3
 8007720:	461a      	mov	r2, r3
 8007722:	d30a      	bcc.n	800773a <quorem+0x106>
 8007724:	613c      	str	r4, [r7, #16]
 8007726:	4630      	mov	r0, r6
 8007728:	b003      	add	sp, #12
 800772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772e:	6812      	ldr	r2, [r2, #0]
 8007730:	3b04      	subs	r3, #4
 8007732:	2a00      	cmp	r2, #0
 8007734:	d1cc      	bne.n	80076d0 <quorem+0x9c>
 8007736:	3c01      	subs	r4, #1
 8007738:	e7c7      	b.n	80076ca <quorem+0x96>
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	3b04      	subs	r3, #4
 800773e:	2a00      	cmp	r2, #0
 8007740:	d1f0      	bne.n	8007724 <quorem+0xf0>
 8007742:	3c01      	subs	r4, #1
 8007744:	e7eb      	b.n	800771e <quorem+0xea>
 8007746:	2000      	movs	r0, #0
 8007748:	e7ee      	b.n	8007728 <quorem+0xf4>
 800774a:	0000      	movs	r0, r0
 800774c:	0000      	movs	r0, r0
	...

08007750 <_dtoa_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	ed2d 8b02 	vpush	{d8}
 8007758:	ec57 6b10 	vmov	r6, r7, d0
 800775c:	b095      	sub	sp, #84	; 0x54
 800775e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007764:	9105      	str	r1, [sp, #20]
 8007766:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800776a:	4604      	mov	r4, r0
 800776c:	9209      	str	r2, [sp, #36]	; 0x24
 800776e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007770:	b975      	cbnz	r5, 8007790 <_dtoa_r+0x40>
 8007772:	2010      	movs	r0, #16
 8007774:	f001 f94c 	bl	8008a10 <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	6260      	str	r0, [r4, #36]	; 0x24
 800777c:	b920      	cbnz	r0, 8007788 <_dtoa_r+0x38>
 800777e:	4bb2      	ldr	r3, [pc, #712]	; (8007a48 <_dtoa_r+0x2f8>)
 8007780:	21ea      	movs	r1, #234	; 0xea
 8007782:	48b2      	ldr	r0, [pc, #712]	; (8007a4c <_dtoa_r+0x2fc>)
 8007784:	f002 f874 	bl	8009870 <__assert_func>
 8007788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800778c:	6005      	str	r5, [r0, #0]
 800778e:	60c5      	str	r5, [r0, #12]
 8007790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	b151      	cbz	r1, 80077ac <_dtoa_r+0x5c>
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	604a      	str	r2, [r1, #4]
 800779a:	2301      	movs	r3, #1
 800779c:	4093      	lsls	r3, r2
 800779e:	608b      	str	r3, [r1, #8]
 80077a0:	4620      	mov	r0, r4
 80077a2:	f001 f99d 	bl	8008ae0 <_Bfree>
 80077a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	1e3b      	subs	r3, r7, #0
 80077ae:	bfb9      	ittee	lt
 80077b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077b4:	9303      	strlt	r3, [sp, #12]
 80077b6:	2300      	movge	r3, #0
 80077b8:	f8c8 3000 	strge.w	r3, [r8]
 80077bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80077c0:	4ba3      	ldr	r3, [pc, #652]	; (8007a50 <_dtoa_r+0x300>)
 80077c2:	bfbc      	itt	lt
 80077c4:	2201      	movlt	r2, #1
 80077c6:	f8c8 2000 	strlt.w	r2, [r8]
 80077ca:	ea33 0309 	bics.w	r3, r3, r9
 80077ce:	d11b      	bne.n	8007808 <_dtoa_r+0xb8>
 80077d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077dc:	4333      	orrs	r3, r6
 80077de:	f000 857a 	beq.w	80082d6 <_dtoa_r+0xb86>
 80077e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077e4:	b963      	cbnz	r3, 8007800 <_dtoa_r+0xb0>
 80077e6:	4b9b      	ldr	r3, [pc, #620]	; (8007a54 <_dtoa_r+0x304>)
 80077e8:	e024      	b.n	8007834 <_dtoa_r+0xe4>
 80077ea:	4b9b      	ldr	r3, [pc, #620]	; (8007a58 <_dtoa_r+0x308>)
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9800      	ldr	r0, [sp, #0]
 80077f6:	b015      	add	sp, #84	; 0x54
 80077f8:	ecbd 8b02 	vpop	{d8}
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <_dtoa_r+0x304>)
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	3303      	adds	r3, #3
 8007806:	e7f3      	b.n	80077f0 <_dtoa_r+0xa0>
 8007808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	ec51 0b17 	vmov	r0, r1, d7
 8007812:	2300      	movs	r3, #0
 8007814:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007818:	f7f9 f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800781c:	4680      	mov	r8, r0
 800781e:	b158      	cbz	r0, 8007838 <_dtoa_r+0xe8>
 8007820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007822:	2301      	movs	r3, #1
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8551 	beq.w	80082d0 <_dtoa_r+0xb80>
 800782e:	488b      	ldr	r0, [pc, #556]	; (8007a5c <_dtoa_r+0x30c>)
 8007830:	6018      	str	r0, [r3, #0]
 8007832:	1e43      	subs	r3, r0, #1
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	e7dd      	b.n	80077f4 <_dtoa_r+0xa4>
 8007838:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800783c:	aa12      	add	r2, sp, #72	; 0x48
 800783e:	a913      	add	r1, sp, #76	; 0x4c
 8007840:	4620      	mov	r0, r4
 8007842:	f001 fcf5 	bl	8009230 <__d2b>
 8007846:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800784a:	4683      	mov	fp, r0
 800784c:	2d00      	cmp	r5, #0
 800784e:	d07c      	beq.n	800794a <_dtoa_r+0x1fa>
 8007850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007852:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800785a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800785e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800786a:	4b7d      	ldr	r3, [pc, #500]	; (8007a60 <_dtoa_r+0x310>)
 800786c:	2200      	movs	r2, #0
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f8 fd11 	bl	8000298 <__aeabi_dsub>
 8007876:	a36e      	add	r3, pc, #440	; (adr r3, 8007a30 <_dtoa_r+0x2e0>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 fec4 	bl	8000608 <__aeabi_dmul>
 8007880:	a36d      	add	r3, pc, #436	; (adr r3, 8007a38 <_dtoa_r+0x2e8>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	f7f8 fd09 	bl	800029c <__adddf3>
 800788a:	4606      	mov	r6, r0
 800788c:	4628      	mov	r0, r5
 800788e:	460f      	mov	r7, r1
 8007890:	f7f8 fe50 	bl	8000534 <__aeabi_i2d>
 8007894:	a36a      	add	r3, pc, #424	; (adr r3, 8007a40 <_dtoa_r+0x2f0>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 feb5 	bl	8000608 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4630      	mov	r0, r6
 80078a4:	4639      	mov	r1, r7
 80078a6:	f7f8 fcf9 	bl	800029c <__adddf3>
 80078aa:	4606      	mov	r6, r0
 80078ac:	460f      	mov	r7, r1
 80078ae:	f7f9 f95b 	bl	8000b68 <__aeabi_d2iz>
 80078b2:	2200      	movs	r2, #0
 80078b4:	4682      	mov	sl, r0
 80078b6:	2300      	movs	r3, #0
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f9 f916 	bl	8000aec <__aeabi_dcmplt>
 80078c0:	b148      	cbz	r0, 80078d6 <_dtoa_r+0x186>
 80078c2:	4650      	mov	r0, sl
 80078c4:	f7f8 fe36 	bl	8000534 <__aeabi_i2d>
 80078c8:	4632      	mov	r2, r6
 80078ca:	463b      	mov	r3, r7
 80078cc:	f7f9 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d0:	b908      	cbnz	r0, 80078d6 <_dtoa_r+0x186>
 80078d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078d6:	f1ba 0f16 	cmp.w	sl, #22
 80078da:	d854      	bhi.n	8007986 <_dtoa_r+0x236>
 80078dc:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <_dtoa_r+0x314>)
 80078de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078ea:	f7f9 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d04b      	beq.n	800798a <_dtoa_r+0x23a>
 80078f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078f6:	2300      	movs	r3, #0
 80078f8:	930e      	str	r3, [sp, #56]	; 0x38
 80078fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078fc:	1b5d      	subs	r5, r3, r5
 80078fe:	1e6b      	subs	r3, r5, #1
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	bf43      	ittte	mi
 8007904:	2300      	movmi	r3, #0
 8007906:	f1c5 0801 	rsbmi	r8, r5, #1
 800790a:	9304      	strmi	r3, [sp, #16]
 800790c:	f04f 0800 	movpl.w	r8, #0
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	db3b      	blt.n	800798e <_dtoa_r+0x23e>
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800791c:	4453      	add	r3, sl
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	2300      	movs	r3, #0
 8007922:	9306      	str	r3, [sp, #24]
 8007924:	9b05      	ldr	r3, [sp, #20]
 8007926:	2b09      	cmp	r3, #9
 8007928:	d869      	bhi.n	80079fe <_dtoa_r+0x2ae>
 800792a:	2b05      	cmp	r3, #5
 800792c:	bfc4      	itt	gt
 800792e:	3b04      	subgt	r3, #4
 8007930:	9305      	strgt	r3, [sp, #20]
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	f1a3 0302 	sub.w	r3, r3, #2
 8007938:	bfcc      	ite	gt
 800793a:	2500      	movgt	r5, #0
 800793c:	2501      	movle	r5, #1
 800793e:	2b03      	cmp	r3, #3
 8007940:	d869      	bhi.n	8007a16 <_dtoa_r+0x2c6>
 8007942:	e8df f003 	tbb	[pc, r3]
 8007946:	4e2c      	.short	0x4e2c
 8007948:	5a4c      	.short	0x5a4c
 800794a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800794e:	441d      	add	r5, r3
 8007950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007954:	2b20      	cmp	r3, #32
 8007956:	bfc1      	itttt	gt
 8007958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800795c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007960:	fa09 f303 	lslgt.w	r3, r9, r3
 8007964:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007968:	bfda      	itte	le
 800796a:	f1c3 0320 	rsble	r3, r3, #32
 800796e:	fa06 f003 	lslle.w	r0, r6, r3
 8007972:	4318      	orrgt	r0, r3
 8007974:	f7f8 fdce 	bl	8000514 <__aeabi_ui2d>
 8007978:	2301      	movs	r3, #1
 800797a:	4606      	mov	r6, r0
 800797c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007980:	3d01      	subs	r5, #1
 8007982:	9310      	str	r3, [sp, #64]	; 0x40
 8007984:	e771      	b.n	800786a <_dtoa_r+0x11a>
 8007986:	2301      	movs	r3, #1
 8007988:	e7b6      	b.n	80078f8 <_dtoa_r+0x1a8>
 800798a:	900e      	str	r0, [sp, #56]	; 0x38
 800798c:	e7b5      	b.n	80078fa <_dtoa_r+0x1aa>
 800798e:	f1ca 0300 	rsb	r3, sl, #0
 8007992:	9306      	str	r3, [sp, #24]
 8007994:	2300      	movs	r3, #0
 8007996:	eba8 080a 	sub.w	r8, r8, sl
 800799a:	930d      	str	r3, [sp, #52]	; 0x34
 800799c:	e7c2      	b.n	8007924 <_dtoa_r+0x1d4>
 800799e:	2300      	movs	r3, #0
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dc39      	bgt.n	8007a1c <_dtoa_r+0x2cc>
 80079a8:	f04f 0901 	mov.w	r9, #1
 80079ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80079b0:	464b      	mov	r3, r9
 80079b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079b8:	2200      	movs	r2, #0
 80079ba:	6042      	str	r2, [r0, #4]
 80079bc:	2204      	movs	r2, #4
 80079be:	f102 0614 	add.w	r6, r2, #20
 80079c2:	429e      	cmp	r6, r3
 80079c4:	6841      	ldr	r1, [r0, #4]
 80079c6:	d92f      	bls.n	8007a28 <_dtoa_r+0x2d8>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f001 f849 	bl	8008a60 <_Balloc>
 80079ce:	9000      	str	r0, [sp, #0]
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d14b      	bne.n	8007a6c <_dtoa_r+0x31c>
 80079d4:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <_dtoa_r+0x318>)
 80079d6:	4602      	mov	r2, r0
 80079d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079dc:	e6d1      	b.n	8007782 <_dtoa_r+0x32>
 80079de:	2301      	movs	r3, #1
 80079e0:	e7de      	b.n	80079a0 <_dtoa_r+0x250>
 80079e2:	2300      	movs	r3, #0
 80079e4:	9308      	str	r3, [sp, #32]
 80079e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e8:	eb0a 0903 	add.w	r9, sl, r3
 80079ec:	f109 0301 	add.w	r3, r9, #1
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	bfb8      	it	lt
 80079f6:	2301      	movlt	r3, #1
 80079f8:	e7dd      	b.n	80079b6 <_dtoa_r+0x266>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e7f2      	b.n	80079e4 <_dtoa_r+0x294>
 80079fe:	2501      	movs	r5, #1
 8007a00:	2300      	movs	r3, #0
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	9508      	str	r5, [sp, #32]
 8007a06:	f04f 39ff 	mov.w	r9, #4294967295
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a10:	2312      	movs	r3, #18
 8007a12:	9209      	str	r2, [sp, #36]	; 0x24
 8007a14:	e7cf      	b.n	80079b6 <_dtoa_r+0x266>
 8007a16:	2301      	movs	r3, #1
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	e7f4      	b.n	8007a06 <_dtoa_r+0x2b6>
 8007a1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007a20:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a24:	464b      	mov	r3, r9
 8007a26:	e7c6      	b.n	80079b6 <_dtoa_r+0x266>
 8007a28:	3101      	adds	r1, #1
 8007a2a:	6041      	str	r1, [r0, #4]
 8007a2c:	0052      	lsls	r2, r2, #1
 8007a2e:	e7c6      	b.n	80079be <_dtoa_r+0x26e>
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	0800a69e 	.word	0x0800a69e
 8007a4c:	0800a6b5 	.word	0x0800a6b5
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	0800a69a 	.word	0x0800a69a
 8007a58:	0800a691 	.word	0x0800a691
 8007a5c:	0800a511 	.word	0x0800a511
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	0800a830 	.word	0x0800a830
 8007a68:	0800a714 	.word	0x0800a714
 8007a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a6e:	9a00      	ldr	r2, [sp, #0]
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	9b01      	ldr	r3, [sp, #4]
 8007a74:	2b0e      	cmp	r3, #14
 8007a76:	f200 80ad 	bhi.w	8007bd4 <_dtoa_r+0x484>
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	f000 80aa 	beq.w	8007bd4 <_dtoa_r+0x484>
 8007a80:	f1ba 0f00 	cmp.w	sl, #0
 8007a84:	dd36      	ble.n	8007af4 <_dtoa_r+0x3a4>
 8007a86:	4ac3      	ldr	r2, [pc, #780]	; (8007d94 <_dtoa_r+0x644>)
 8007a88:	f00a 030f 	and.w	r3, sl, #15
 8007a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a90:	ed93 7b00 	vldr	d7, [r3]
 8007a94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007a98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8007aa0:	eef0 8a67 	vmov.f32	s17, s15
 8007aa4:	d016      	beq.n	8007ad4 <_dtoa_r+0x384>
 8007aa6:	4bbc      	ldr	r3, [pc, #752]	; (8007d98 <_dtoa_r+0x648>)
 8007aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab0:	f7f8 fed4 	bl	800085c <__aeabi_ddiv>
 8007ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab8:	f007 070f 	and.w	r7, r7, #15
 8007abc:	2503      	movs	r5, #3
 8007abe:	4eb6      	ldr	r6, [pc, #728]	; (8007d98 <_dtoa_r+0x648>)
 8007ac0:	b957      	cbnz	r7, 8007ad8 <_dtoa_r+0x388>
 8007ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ac6:	ec53 2b18 	vmov	r2, r3, d8
 8007aca:	f7f8 fec7 	bl	800085c <__aeabi_ddiv>
 8007ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad2:	e029      	b.n	8007b28 <_dtoa_r+0x3d8>
 8007ad4:	2502      	movs	r5, #2
 8007ad6:	e7f2      	b.n	8007abe <_dtoa_r+0x36e>
 8007ad8:	07f9      	lsls	r1, r7, #31
 8007ada:	d508      	bpl.n	8007aee <_dtoa_r+0x39e>
 8007adc:	ec51 0b18 	vmov	r0, r1, d8
 8007ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ae4:	f7f8 fd90 	bl	8000608 <__aeabi_dmul>
 8007ae8:	ec41 0b18 	vmov	d8, r0, r1
 8007aec:	3501      	adds	r5, #1
 8007aee:	107f      	asrs	r7, r7, #1
 8007af0:	3608      	adds	r6, #8
 8007af2:	e7e5      	b.n	8007ac0 <_dtoa_r+0x370>
 8007af4:	f000 80a6 	beq.w	8007c44 <_dtoa_r+0x4f4>
 8007af8:	f1ca 0600 	rsb	r6, sl, #0
 8007afc:	4ba5      	ldr	r3, [pc, #660]	; (8007d94 <_dtoa_r+0x644>)
 8007afe:	4fa6      	ldr	r7, [pc, #664]	; (8007d98 <_dtoa_r+0x648>)
 8007b00:	f006 020f 	and.w	r2, r6, #15
 8007b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b10:	f7f8 fd7a 	bl	8000608 <__aeabi_dmul>
 8007b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b18:	1136      	asrs	r6, r6, #4
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	2502      	movs	r5, #2
 8007b1e:	2e00      	cmp	r6, #0
 8007b20:	f040 8085 	bne.w	8007c2e <_dtoa_r+0x4de>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1d2      	bne.n	8007ace <_dtoa_r+0x37e>
 8007b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 808c 	beq.w	8007c48 <_dtoa_r+0x4f8>
 8007b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b34:	4b99      	ldr	r3, [pc, #612]	; (8007d9c <_dtoa_r+0x64c>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	4630      	mov	r0, r6
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f8 ffd6 	bl	8000aec <__aeabi_dcmplt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f000 8081 	beq.w	8007c48 <_dtoa_r+0x4f8>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d07d      	beq.n	8007c48 <_dtoa_r+0x4f8>
 8007b4c:	f1b9 0f00 	cmp.w	r9, #0
 8007b50:	dd3c      	ble.n	8007bcc <_dtoa_r+0x47c>
 8007b52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b56:	9307      	str	r3, [sp, #28]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4b91      	ldr	r3, [pc, #580]	; (8007da0 <_dtoa_r+0x650>)
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b68:	3501      	adds	r5, #1
 8007b6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b72:	4628      	mov	r0, r5
 8007b74:	f7f8 fcde 	bl	8000534 <__aeabi_i2d>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	463b      	mov	r3, r7
 8007b7c:	f7f8 fd44 	bl	8000608 <__aeabi_dmul>
 8007b80:	4b88      	ldr	r3, [pc, #544]	; (8007da4 <_dtoa_r+0x654>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fb8a 	bl	800029c <__adddf3>
 8007b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d15c      	bne.n	8007c52 <_dtoa_r+0x502>
 8007b98:	4b83      	ldr	r3, [pc, #524]	; (8007da8 <_dtoa_r+0x658>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	4639      	mov	r1, r7
 8007ba0:	f7f8 fb7a 	bl	8000298 <__aeabi_dsub>
 8007ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	f7f8 ffbc 	bl	8000b28 <__aeabi_dcmpgt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 8296 	bne.w	80080e2 <_dtoa_r+0x992>
 8007bb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	f7f8 ff93 	bl	8000aec <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f040 8288 	bne.w	80080dc <_dtoa_r+0x98c>
 8007bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f2c0 8158 	blt.w	8007e8c <_dtoa_r+0x73c>
 8007bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8007be0:	f300 8154 	bgt.w	8007e8c <_dtoa_r+0x73c>
 8007be4:	4b6b      	ldr	r3, [pc, #428]	; (8007d94 <_dtoa_r+0x644>)
 8007be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f280 80e3 	bge.w	8007dbc <_dtoa_r+0x66c>
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f300 80df 	bgt.w	8007dbc <_dtoa_r+0x66c>
 8007bfe:	f040 826d 	bne.w	80080dc <_dtoa_r+0x98c>
 8007c02:	4b69      	ldr	r3, [pc, #420]	; (8007da8 <_dtoa_r+0x658>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	f7f8 fcfd 	bl	8000608 <__aeabi_dmul>
 8007c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c12:	f7f8 ff7f 	bl	8000b14 <__aeabi_dcmpge>
 8007c16:	9e01      	ldr	r6, [sp, #4]
 8007c18:	4637      	mov	r7, r6
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	f040 8243 	bne.w	80080a6 <_dtoa_r+0x956>
 8007c20:	9d00      	ldr	r5, [sp, #0]
 8007c22:	2331      	movs	r3, #49	; 0x31
 8007c24:	f805 3b01 	strb.w	r3, [r5], #1
 8007c28:	f10a 0a01 	add.w	sl, sl, #1
 8007c2c:	e23f      	b.n	80080ae <_dtoa_r+0x95e>
 8007c2e:	07f2      	lsls	r2, r6, #31
 8007c30:	d505      	bpl.n	8007c3e <_dtoa_r+0x4ee>
 8007c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c36:	f7f8 fce7 	bl	8000608 <__aeabi_dmul>
 8007c3a:	3501      	adds	r5, #1
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	1076      	asrs	r6, r6, #1
 8007c40:	3708      	adds	r7, #8
 8007c42:	e76c      	b.n	8007b1e <_dtoa_r+0x3ce>
 8007c44:	2502      	movs	r5, #2
 8007c46:	e76f      	b.n	8007b28 <_dtoa_r+0x3d8>
 8007c48:	9b01      	ldr	r3, [sp, #4]
 8007c4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c50:	e78d      	b.n	8007b6e <_dtoa_r+0x41e>
 8007c52:	9900      	ldr	r1, [sp, #0]
 8007c54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c58:	4b4e      	ldr	r3, [pc, #312]	; (8007d94 <_dtoa_r+0x644>)
 8007c5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c5e:	4401      	add	r1, r0
 8007c60:	9102      	str	r1, [sp, #8]
 8007c62:	9908      	ldr	r1, [sp, #32]
 8007c64:	eeb0 8a47 	vmov.f32	s16, s14
 8007c68:	eef0 8a67 	vmov.f32	s17, s15
 8007c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d045      	beq.n	8007d04 <_dtoa_r+0x5b4>
 8007c78:	494c      	ldr	r1, [pc, #304]	; (8007dac <_dtoa_r+0x65c>)
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f8 fdee 	bl	800085c <__aeabi_ddiv>
 8007c80:	ec53 2b18 	vmov	r2, r3, d8
 8007c84:	f7f8 fb08 	bl	8000298 <__aeabi_dsub>
 8007c88:	9d00      	ldr	r5, [sp, #0]
 8007c8a:	ec41 0b18 	vmov	d8, r0, r1
 8007c8e:	4639      	mov	r1, r7
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7f8 ff69 	bl	8000b68 <__aeabi_d2iz>
 8007c96:	900c      	str	r0, [sp, #48]	; 0x30
 8007c98:	f7f8 fc4c 	bl	8000534 <__aeabi_i2d>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 faf8 	bl	8000298 <__aeabi_dsub>
 8007ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007caa:	3330      	adds	r3, #48	; 0x30
 8007cac:	f805 3b01 	strb.w	r3, [r5], #1
 8007cb0:	ec53 2b18 	vmov	r2, r3, d8
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	f7f8 ff18 	bl	8000aec <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d165      	bne.n	8007d8c <_dtoa_r+0x63c>
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	463b      	mov	r3, r7
 8007cc4:	4935      	ldr	r1, [pc, #212]	; (8007d9c <_dtoa_r+0x64c>)
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f7f8 fae6 	bl	8000298 <__aeabi_dsub>
 8007ccc:	ec53 2b18 	vmov	r2, r3, d8
 8007cd0:	f7f8 ff0c 	bl	8000aec <__aeabi_dcmplt>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f040 80b9 	bne.w	8007e4c <_dtoa_r+0x6fc>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	f43f af75 	beq.w	8007bcc <_dtoa_r+0x47c>
 8007ce2:	4b2f      	ldr	r3, [pc, #188]	; (8007da0 <_dtoa_r+0x650>)
 8007ce4:	ec51 0b18 	vmov	r0, r1, d8
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f7f8 fc8d 	bl	8000608 <__aeabi_dmul>
 8007cee:	4b2c      	ldr	r3, [pc, #176]	; (8007da0 <_dtoa_r+0x650>)
 8007cf0:	ec41 0b18 	vmov	d8, r0, r1
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	4639      	mov	r1, r7
 8007cfa:	f7f8 fc85 	bl	8000608 <__aeabi_dmul>
 8007cfe:	4606      	mov	r6, r0
 8007d00:	460f      	mov	r7, r1
 8007d02:	e7c4      	b.n	8007c8e <_dtoa_r+0x53e>
 8007d04:	ec51 0b17 	vmov	r0, r1, d7
 8007d08:	f7f8 fc7e 	bl	8000608 <__aeabi_dmul>
 8007d0c:	9b02      	ldr	r3, [sp, #8]
 8007d0e:	9d00      	ldr	r5, [sp, #0]
 8007d10:	930c      	str	r3, [sp, #48]	; 0x30
 8007d12:	ec41 0b18 	vmov	d8, r0, r1
 8007d16:	4639      	mov	r1, r7
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7f8 ff25 	bl	8000b68 <__aeabi_d2iz>
 8007d1e:	9011      	str	r0, [sp, #68]	; 0x44
 8007d20:	f7f8 fc08 	bl	8000534 <__aeabi_i2d>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d32:	3330      	adds	r3, #48	; 0x30
 8007d34:	f805 3b01 	strb.w	r3, [r5], #1
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	429d      	cmp	r5, r3
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	460f      	mov	r7, r1
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	d134      	bne.n	8007db0 <_dtoa_r+0x660>
 8007d46:	4b19      	ldr	r3, [pc, #100]	; (8007dac <_dtoa_r+0x65c>)
 8007d48:	ec51 0b18 	vmov	r0, r1, d8
 8007d4c:	f7f8 faa6 	bl	800029c <__adddf3>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f7f8 fee6 	bl	8000b28 <__aeabi_dcmpgt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d175      	bne.n	8007e4c <_dtoa_r+0x6fc>
 8007d60:	ec53 2b18 	vmov	r2, r3, d8
 8007d64:	4911      	ldr	r1, [pc, #68]	; (8007dac <_dtoa_r+0x65c>)
 8007d66:	2000      	movs	r0, #0
 8007d68:	f7f8 fa96 	bl	8000298 <__aeabi_dsub>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 feba 	bl	8000aec <__aeabi_dcmplt>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	f43f af27 	beq.w	8007bcc <_dtoa_r+0x47c>
 8007d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d80:	1e6b      	subs	r3, r5, #1
 8007d82:	930c      	str	r3, [sp, #48]	; 0x30
 8007d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d88:	2b30      	cmp	r3, #48	; 0x30
 8007d8a:	d0f8      	beq.n	8007d7e <_dtoa_r+0x62e>
 8007d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d90:	e04a      	b.n	8007e28 <_dtoa_r+0x6d8>
 8007d92:	bf00      	nop
 8007d94:	0800a830 	.word	0x0800a830
 8007d98:	0800a808 	.word	0x0800a808
 8007d9c:	3ff00000 	.word	0x3ff00000
 8007da0:	40240000 	.word	0x40240000
 8007da4:	401c0000 	.word	0x401c0000
 8007da8:	40140000 	.word	0x40140000
 8007dac:	3fe00000 	.word	0x3fe00000
 8007db0:	4baf      	ldr	r3, [pc, #700]	; (8008070 <_dtoa_r+0x920>)
 8007db2:	f7f8 fc29 	bl	8000608 <__aeabi_dmul>
 8007db6:	4606      	mov	r6, r0
 8007db8:	460f      	mov	r7, r1
 8007dba:	e7ac      	b.n	8007d16 <_dtoa_r+0x5c6>
 8007dbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dc0:	9d00      	ldr	r5, [sp, #0]
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fd47 	bl	800085c <__aeabi_ddiv>
 8007dce:	f7f8 fecb 	bl	8000b68 <__aeabi_d2iz>
 8007dd2:	9002      	str	r0, [sp, #8]
 8007dd4:	f7f8 fbae 	bl	8000534 <__aeabi_i2d>
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4630      	mov	r0, r6
 8007de6:	4639      	mov	r1, r7
 8007de8:	f7f8 fa56 	bl	8000298 <__aeabi_dsub>
 8007dec:	9e02      	ldr	r6, [sp, #8]
 8007dee:	9f01      	ldr	r7, [sp, #4]
 8007df0:	3630      	adds	r6, #48	; 0x30
 8007df2:	f805 6b01 	strb.w	r6, [r5], #1
 8007df6:	9e00      	ldr	r6, [sp, #0]
 8007df8:	1bae      	subs	r6, r5, r6
 8007dfa:	42b7      	cmp	r7, r6
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	d137      	bne.n	8007e72 <_dtoa_r+0x722>
 8007e02:	f7f8 fa4b 	bl	800029c <__adddf3>
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	f7f8 fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007e12:	b9c8      	cbnz	r0, 8007e48 <_dtoa_r+0x6f8>
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e20:	b110      	cbz	r0, 8007e28 <_dtoa_r+0x6d8>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	07d9      	lsls	r1, r3, #31
 8007e26:	d40f      	bmi.n	8007e48 <_dtoa_r+0x6f8>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	4659      	mov	r1, fp
 8007e2c:	f000 fe58 	bl	8008ae0 <_Bfree>
 8007e30:	2300      	movs	r3, #0
 8007e32:	702b      	strb	r3, [r5, #0]
 8007e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e36:	f10a 0001 	add.w	r0, sl, #1
 8007e3a:	6018      	str	r0, [r3, #0]
 8007e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f43f acd8 	beq.w	80077f4 <_dtoa_r+0xa4>
 8007e44:	601d      	str	r5, [r3, #0]
 8007e46:	e4d5      	b.n	80077f4 <_dtoa_r+0xa4>
 8007e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	461d      	mov	r5, r3
 8007e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e54:	2a39      	cmp	r2, #57	; 0x39
 8007e56:	d108      	bne.n	8007e6a <_dtoa_r+0x71a>
 8007e58:	9a00      	ldr	r2, [sp, #0]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d1f7      	bne.n	8007e4e <_dtoa_r+0x6fe>
 8007e5e:	9a07      	ldr	r2, [sp, #28]
 8007e60:	9900      	ldr	r1, [sp, #0]
 8007e62:	3201      	adds	r2, #1
 8007e64:	9207      	str	r2, [sp, #28]
 8007e66:	2230      	movs	r2, #48	; 0x30
 8007e68:	700a      	strb	r2, [r1, #0]
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	3201      	adds	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e78c      	b.n	8007d8c <_dtoa_r+0x63c>
 8007e72:	4b7f      	ldr	r3, [pc, #508]	; (8008070 <_dtoa_r+0x920>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	f7f8 fbc7 	bl	8000608 <__aeabi_dmul>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4606      	mov	r6, r0
 8007e80:	460f      	mov	r7, r1
 8007e82:	f7f8 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d09b      	beq.n	8007dc2 <_dtoa_r+0x672>
 8007e8a:	e7cd      	b.n	8007e28 <_dtoa_r+0x6d8>
 8007e8c:	9a08      	ldr	r2, [sp, #32]
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	f000 80c4 	beq.w	800801c <_dtoa_r+0x8cc>
 8007e94:	9a05      	ldr	r2, [sp, #20]
 8007e96:	2a01      	cmp	r2, #1
 8007e98:	f300 80a8 	bgt.w	8007fec <_dtoa_r+0x89c>
 8007e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	f000 80a0 	beq.w	8007fe4 <_dtoa_r+0x894>
 8007ea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ea8:	9e06      	ldr	r6, [sp, #24]
 8007eaa:	4645      	mov	r5, r8
 8007eac:	9a04      	ldr	r2, [sp, #16]
 8007eae:	2101      	movs	r1, #1
 8007eb0:	441a      	add	r2, r3
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4498      	add	r8, r3
 8007eb6:	9204      	str	r2, [sp, #16]
 8007eb8:	f000 ff18 	bl	8008cec <__i2b>
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	dd0b      	ble.n	8007eda <_dtoa_r+0x78a>
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dd08      	ble.n	8007eda <_dtoa_r+0x78a>
 8007ec8:	42ab      	cmp	r3, r5
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	bfa8      	it	ge
 8007ece:	462b      	movge	r3, r5
 8007ed0:	eba8 0803 	sub.w	r8, r8, r3
 8007ed4:	1aed      	subs	r5, r5, r3
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	9b06      	ldr	r3, [sp, #24]
 8007edc:	b1fb      	cbz	r3, 8007f1e <_dtoa_r+0x7ce>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 809f 	beq.w	8008024 <_dtoa_r+0x8d4>
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	dd11      	ble.n	8007f0e <_dtoa_r+0x7be>
 8007eea:	4639      	mov	r1, r7
 8007eec:	4632      	mov	r2, r6
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f000 ffb8 	bl	8008e64 <__pow5mult>
 8007ef4:	465a      	mov	r2, fp
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4607      	mov	r7, r0
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 ff0c 	bl	8008d18 <__multiply>
 8007f00:	4659      	mov	r1, fp
 8007f02:	9007      	str	r0, [sp, #28]
 8007f04:	4620      	mov	r0, r4
 8007f06:	f000 fdeb 	bl	8008ae0 <_Bfree>
 8007f0a:	9b07      	ldr	r3, [sp, #28]
 8007f0c:	469b      	mov	fp, r3
 8007f0e:	9b06      	ldr	r3, [sp, #24]
 8007f10:	1b9a      	subs	r2, r3, r6
 8007f12:	d004      	beq.n	8007f1e <_dtoa_r+0x7ce>
 8007f14:	4659      	mov	r1, fp
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 ffa4 	bl	8008e64 <__pow5mult>
 8007f1c:	4683      	mov	fp, r0
 8007f1e:	2101      	movs	r1, #1
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fee3 	bl	8008cec <__i2b>
 8007f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	dd7c      	ble.n	8008028 <_dtoa_r+0x8d8>
 8007f2e:	461a      	mov	r2, r3
 8007f30:	4601      	mov	r1, r0
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 ff96 	bl	8008e64 <__pow5mult>
 8007f38:	9b05      	ldr	r3, [sp, #20]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	dd76      	ble.n	800802e <_dtoa_r+0x8de>
 8007f40:	2300      	movs	r3, #0
 8007f42:	9306      	str	r3, [sp, #24]
 8007f44:	6933      	ldr	r3, [r6, #16]
 8007f46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f4a:	6918      	ldr	r0, [r3, #16]
 8007f4c:	f000 fe7e 	bl	8008c4c <__hi0bits>
 8007f50:	f1c0 0020 	rsb	r0, r0, #32
 8007f54:	9b04      	ldr	r3, [sp, #16]
 8007f56:	4418      	add	r0, r3
 8007f58:	f010 001f 	ands.w	r0, r0, #31
 8007f5c:	f000 8086 	beq.w	800806c <_dtoa_r+0x91c>
 8007f60:	f1c0 0320 	rsb	r3, r0, #32
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	dd7f      	ble.n	8008068 <_dtoa_r+0x918>
 8007f68:	f1c0 001c 	rsb	r0, r0, #28
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	4403      	add	r3, r0
 8007f70:	4480      	add	r8, r0
 8007f72:	4405      	add	r5, r0
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	f1b8 0f00 	cmp.w	r8, #0
 8007f7a:	dd05      	ble.n	8007f88 <_dtoa_r+0x838>
 8007f7c:	4659      	mov	r1, fp
 8007f7e:	4642      	mov	r2, r8
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 ffc9 	bl	8008f18 <__lshift>
 8007f86:	4683      	mov	fp, r0
 8007f88:	9b04      	ldr	r3, [sp, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	dd05      	ble.n	8007f9a <_dtoa_r+0x84a>
 8007f8e:	4631      	mov	r1, r6
 8007f90:	461a      	mov	r2, r3
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 ffc0 	bl	8008f18 <__lshift>
 8007f98:	4606      	mov	r6, r0
 8007f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d069      	beq.n	8008074 <_dtoa_r+0x924>
 8007fa0:	4631      	mov	r1, r6
 8007fa2:	4658      	mov	r0, fp
 8007fa4:	f001 f824 	bl	8008ff0 <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	da63      	bge.n	8008074 <_dtoa_r+0x924>
 8007fac:	2300      	movs	r3, #0
 8007fae:	4659      	mov	r1, fp
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fdb6 	bl	8008b24 <__multadd>
 8007fb8:	9b08      	ldr	r3, [sp, #32]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	4683      	mov	fp, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 818f 	beq.w	80082e4 <_dtoa_r+0xb94>
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	2300      	movs	r3, #0
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fda9 	bl	8008b24 <__multadd>
 8007fd2:	f1b9 0f00 	cmp.w	r9, #0
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f300 808e 	bgt.w	80080f8 <_dtoa_r+0x9a8>
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dc50      	bgt.n	8008084 <_dtoa_r+0x934>
 8007fe2:	e089      	b.n	80080f8 <_dtoa_r+0x9a8>
 8007fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fea:	e75d      	b.n	8007ea8 <_dtoa_r+0x758>
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	1e5e      	subs	r6, r3, #1
 8007ff0:	9b06      	ldr	r3, [sp, #24]
 8007ff2:	42b3      	cmp	r3, r6
 8007ff4:	bfbf      	itttt	lt
 8007ff6:	9b06      	ldrlt	r3, [sp, #24]
 8007ff8:	9606      	strlt	r6, [sp, #24]
 8007ffa:	1af2      	sublt	r2, r6, r3
 8007ffc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007ffe:	bfb6      	itet	lt
 8008000:	189b      	addlt	r3, r3, r2
 8008002:	1b9e      	subge	r6, r3, r6
 8008004:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	bfb8      	it	lt
 800800a:	2600      	movlt	r6, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	bfb5      	itete	lt
 8008010:	eba8 0503 	sublt.w	r5, r8, r3
 8008014:	9b01      	ldrge	r3, [sp, #4]
 8008016:	2300      	movlt	r3, #0
 8008018:	4645      	movge	r5, r8
 800801a:	e747      	b.n	8007eac <_dtoa_r+0x75c>
 800801c:	9e06      	ldr	r6, [sp, #24]
 800801e:	9f08      	ldr	r7, [sp, #32]
 8008020:	4645      	mov	r5, r8
 8008022:	e74c      	b.n	8007ebe <_dtoa_r+0x76e>
 8008024:	9a06      	ldr	r2, [sp, #24]
 8008026:	e775      	b.n	8007f14 <_dtoa_r+0x7c4>
 8008028:	9b05      	ldr	r3, [sp, #20]
 800802a:	2b01      	cmp	r3, #1
 800802c:	dc18      	bgt.n	8008060 <_dtoa_r+0x910>
 800802e:	9b02      	ldr	r3, [sp, #8]
 8008030:	b9b3      	cbnz	r3, 8008060 <_dtoa_r+0x910>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008038:	b9a3      	cbnz	r3, 8008064 <_dtoa_r+0x914>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	051b      	lsls	r3, r3, #20
 8008044:	b12b      	cbz	r3, 8008052 <_dtoa_r+0x902>
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	3301      	adds	r3, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	f108 0801 	add.w	r8, r8, #1
 8008050:	2301      	movs	r3, #1
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008056:	2b00      	cmp	r3, #0
 8008058:	f47f af74 	bne.w	8007f44 <_dtoa_r+0x7f4>
 800805c:	2001      	movs	r0, #1
 800805e:	e779      	b.n	8007f54 <_dtoa_r+0x804>
 8008060:	2300      	movs	r3, #0
 8008062:	e7f6      	b.n	8008052 <_dtoa_r+0x902>
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	e7f4      	b.n	8008052 <_dtoa_r+0x902>
 8008068:	d085      	beq.n	8007f76 <_dtoa_r+0x826>
 800806a:	4618      	mov	r0, r3
 800806c:	301c      	adds	r0, #28
 800806e:	e77d      	b.n	8007f6c <_dtoa_r+0x81c>
 8008070:	40240000 	.word	0x40240000
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	dc38      	bgt.n	80080ec <_dtoa_r+0x99c>
 800807a:	9b05      	ldr	r3, [sp, #20]
 800807c:	2b02      	cmp	r3, #2
 800807e:	dd35      	ble.n	80080ec <_dtoa_r+0x99c>
 8008080:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008084:	f1b9 0f00 	cmp.w	r9, #0
 8008088:	d10d      	bne.n	80080a6 <_dtoa_r+0x956>
 800808a:	4631      	mov	r1, r6
 800808c:	464b      	mov	r3, r9
 800808e:	2205      	movs	r2, #5
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fd47 	bl	8008b24 <__multadd>
 8008096:	4601      	mov	r1, r0
 8008098:	4606      	mov	r6, r0
 800809a:	4658      	mov	r0, fp
 800809c:	f000 ffa8 	bl	8008ff0 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f73f adbd 	bgt.w	8007c20 <_dtoa_r+0x4d0>
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	9d00      	ldr	r5, [sp, #0]
 80080aa:	ea6f 0a03 	mvn.w	sl, r3
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fd13 	bl	8008ae0 <_Bfree>
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	f43f aeb4 	beq.w	8007e28 <_dtoa_r+0x6d8>
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d005      	beq.n	80080d2 <_dtoa_r+0x982>
 80080c6:	45b8      	cmp	r8, r7
 80080c8:	d003      	beq.n	80080d2 <_dtoa_r+0x982>
 80080ca:	4641      	mov	r1, r8
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fd07 	bl	8008ae0 <_Bfree>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fd03 	bl	8008ae0 <_Bfree>
 80080da:	e6a5      	b.n	8007e28 <_dtoa_r+0x6d8>
 80080dc:	2600      	movs	r6, #0
 80080de:	4637      	mov	r7, r6
 80080e0:	e7e1      	b.n	80080a6 <_dtoa_r+0x956>
 80080e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080e8:	4637      	mov	r7, r6
 80080ea:	e599      	b.n	8007c20 <_dtoa_r+0x4d0>
 80080ec:	9b08      	ldr	r3, [sp, #32]
 80080ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 80fd 	beq.w	80082f2 <_dtoa_r+0xba2>
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x9b8>
 80080fc:	4639      	mov	r1, r7
 80080fe:	462a      	mov	r2, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f000 ff09 	bl	8008f18 <__lshift>
 8008106:	4607      	mov	r7, r0
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d05c      	beq.n	80081c8 <_dtoa_r+0xa78>
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fca5 	bl	8008a60 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b928      	cbnz	r0, 8008126 <_dtoa_r+0x9d6>
 800811a:	4b80      	ldr	r3, [pc, #512]	; (800831c <_dtoa_r+0xbcc>)
 800811c:	4602      	mov	r2, r0
 800811e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008122:	f7ff bb2e 	b.w	8007782 <_dtoa_r+0x32>
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	3202      	adds	r2, #2
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	f107 010c 	add.w	r1, r7, #12
 8008130:	300c      	adds	r0, #12
 8008132:	f000 fc87 	bl	8008a44 <memcpy>
 8008136:	2201      	movs	r2, #1
 8008138:	4629      	mov	r1, r5
 800813a:	4620      	mov	r0, r4
 800813c:	f000 feec 	bl	8008f18 <__lshift>
 8008140:	9b00      	ldr	r3, [sp, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	444b      	add	r3, r9
 800814a:	9307      	str	r3, [sp, #28]
 800814c:	9b02      	ldr	r3, [sp, #8]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	46b8      	mov	r8, r7
 8008154:	9306      	str	r3, [sp, #24]
 8008156:	4607      	mov	r7, r0
 8008158:	9b01      	ldr	r3, [sp, #4]
 800815a:	4631      	mov	r1, r6
 800815c:	3b01      	subs	r3, #1
 800815e:	4658      	mov	r0, fp
 8008160:	9302      	str	r3, [sp, #8]
 8008162:	f7ff fa67 	bl	8007634 <quorem>
 8008166:	4603      	mov	r3, r0
 8008168:	3330      	adds	r3, #48	; 0x30
 800816a:	9004      	str	r0, [sp, #16]
 800816c:	4641      	mov	r1, r8
 800816e:	4658      	mov	r0, fp
 8008170:	9308      	str	r3, [sp, #32]
 8008172:	f000 ff3d 	bl	8008ff0 <__mcmp>
 8008176:	463a      	mov	r2, r7
 8008178:	4681      	mov	r9, r0
 800817a:	4631      	mov	r1, r6
 800817c:	4620      	mov	r0, r4
 800817e:	f000 ff53 	bl	8009028 <__mdiff>
 8008182:	68c2      	ldr	r2, [r0, #12]
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	4605      	mov	r5, r0
 8008188:	bb02      	cbnz	r2, 80081cc <_dtoa_r+0xa7c>
 800818a:	4601      	mov	r1, r0
 800818c:	4658      	mov	r0, fp
 800818e:	f000 ff2f 	bl	8008ff0 <__mcmp>
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	4602      	mov	r2, r0
 8008196:	4629      	mov	r1, r5
 8008198:	4620      	mov	r0, r4
 800819a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800819e:	f000 fc9f 	bl	8008ae0 <_Bfree>
 80081a2:	9b05      	ldr	r3, [sp, #20]
 80081a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a6:	9d01      	ldr	r5, [sp, #4]
 80081a8:	ea43 0102 	orr.w	r1, r3, r2
 80081ac:	9b06      	ldr	r3, [sp, #24]
 80081ae:	430b      	orrs	r3, r1
 80081b0:	9b08      	ldr	r3, [sp, #32]
 80081b2:	d10d      	bne.n	80081d0 <_dtoa_r+0xa80>
 80081b4:	2b39      	cmp	r3, #57	; 0x39
 80081b6:	d029      	beq.n	800820c <_dtoa_r+0xabc>
 80081b8:	f1b9 0f00 	cmp.w	r9, #0
 80081bc:	dd01      	ble.n	80081c2 <_dtoa_r+0xa72>
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	3331      	adds	r3, #49	; 0x31
 80081c2:	9a02      	ldr	r2, [sp, #8]
 80081c4:	7013      	strb	r3, [r2, #0]
 80081c6:	e774      	b.n	80080b2 <_dtoa_r+0x962>
 80081c8:	4638      	mov	r0, r7
 80081ca:	e7b9      	b.n	8008140 <_dtoa_r+0x9f0>
 80081cc:	2201      	movs	r2, #1
 80081ce:	e7e2      	b.n	8008196 <_dtoa_r+0xa46>
 80081d0:	f1b9 0f00 	cmp.w	r9, #0
 80081d4:	db06      	blt.n	80081e4 <_dtoa_r+0xa94>
 80081d6:	9905      	ldr	r1, [sp, #20]
 80081d8:	ea41 0909 	orr.w	r9, r1, r9
 80081dc:	9906      	ldr	r1, [sp, #24]
 80081de:	ea59 0101 	orrs.w	r1, r9, r1
 80081e2:	d120      	bne.n	8008226 <_dtoa_r+0xad6>
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	ddec      	ble.n	80081c2 <_dtoa_r+0xa72>
 80081e8:	4659      	mov	r1, fp
 80081ea:	2201      	movs	r2, #1
 80081ec:	4620      	mov	r0, r4
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	f000 fe92 	bl	8008f18 <__lshift>
 80081f4:	4631      	mov	r1, r6
 80081f6:	4683      	mov	fp, r0
 80081f8:	f000 fefa 	bl	8008ff0 <__mcmp>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	dc02      	bgt.n	8008208 <_dtoa_r+0xab8>
 8008202:	d1de      	bne.n	80081c2 <_dtoa_r+0xa72>
 8008204:	07da      	lsls	r2, r3, #31
 8008206:	d5dc      	bpl.n	80081c2 <_dtoa_r+0xa72>
 8008208:	2b39      	cmp	r3, #57	; 0x39
 800820a:	d1d8      	bne.n	80081be <_dtoa_r+0xa6e>
 800820c:	9a02      	ldr	r2, [sp, #8]
 800820e:	2339      	movs	r3, #57	; 0x39
 8008210:	7013      	strb	r3, [r2, #0]
 8008212:	462b      	mov	r3, r5
 8008214:	461d      	mov	r5, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800821c:	2a39      	cmp	r2, #57	; 0x39
 800821e:	d050      	beq.n	80082c2 <_dtoa_r+0xb72>
 8008220:	3201      	adds	r2, #1
 8008222:	701a      	strb	r2, [r3, #0]
 8008224:	e745      	b.n	80080b2 <_dtoa_r+0x962>
 8008226:	2a00      	cmp	r2, #0
 8008228:	dd03      	ble.n	8008232 <_dtoa_r+0xae2>
 800822a:	2b39      	cmp	r3, #57	; 0x39
 800822c:	d0ee      	beq.n	800820c <_dtoa_r+0xabc>
 800822e:	3301      	adds	r3, #1
 8008230:	e7c7      	b.n	80081c2 <_dtoa_r+0xa72>
 8008232:	9a01      	ldr	r2, [sp, #4]
 8008234:	9907      	ldr	r1, [sp, #28]
 8008236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800823a:	428a      	cmp	r2, r1
 800823c:	d02a      	beq.n	8008294 <_dtoa_r+0xb44>
 800823e:	4659      	mov	r1, fp
 8008240:	2300      	movs	r3, #0
 8008242:	220a      	movs	r2, #10
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fc6d 	bl	8008b24 <__multadd>
 800824a:	45b8      	cmp	r8, r7
 800824c:	4683      	mov	fp, r0
 800824e:	f04f 0300 	mov.w	r3, #0
 8008252:	f04f 020a 	mov.w	r2, #10
 8008256:	4641      	mov	r1, r8
 8008258:	4620      	mov	r0, r4
 800825a:	d107      	bne.n	800826c <_dtoa_r+0xb1c>
 800825c:	f000 fc62 	bl	8008b24 <__multadd>
 8008260:	4680      	mov	r8, r0
 8008262:	4607      	mov	r7, r0
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	3301      	adds	r3, #1
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	e775      	b.n	8008158 <_dtoa_r+0xa08>
 800826c:	f000 fc5a 	bl	8008b24 <__multadd>
 8008270:	4639      	mov	r1, r7
 8008272:	4680      	mov	r8, r0
 8008274:	2300      	movs	r3, #0
 8008276:	220a      	movs	r2, #10
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fc53 	bl	8008b24 <__multadd>
 800827e:	4607      	mov	r7, r0
 8008280:	e7f0      	b.n	8008264 <_dtoa_r+0xb14>
 8008282:	f1b9 0f00 	cmp.w	r9, #0
 8008286:	9a00      	ldr	r2, [sp, #0]
 8008288:	bfcc      	ite	gt
 800828a:	464d      	movgt	r5, r9
 800828c:	2501      	movle	r5, #1
 800828e:	4415      	add	r5, r2
 8008290:	f04f 0800 	mov.w	r8, #0
 8008294:	4659      	mov	r1, fp
 8008296:	2201      	movs	r2, #1
 8008298:	4620      	mov	r0, r4
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	f000 fe3c 	bl	8008f18 <__lshift>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4683      	mov	fp, r0
 80082a4:	f000 fea4 	bl	8008ff0 <__mcmp>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dcb2      	bgt.n	8008212 <_dtoa_r+0xac2>
 80082ac:	d102      	bne.n	80082b4 <_dtoa_r+0xb64>
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	07db      	lsls	r3, r3, #31
 80082b2:	d4ae      	bmi.n	8008212 <_dtoa_r+0xac2>
 80082b4:	462b      	mov	r3, r5
 80082b6:	461d      	mov	r5, r3
 80082b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082bc:	2a30      	cmp	r2, #48	; 0x30
 80082be:	d0fa      	beq.n	80082b6 <_dtoa_r+0xb66>
 80082c0:	e6f7      	b.n	80080b2 <_dtoa_r+0x962>
 80082c2:	9a00      	ldr	r2, [sp, #0]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d1a5      	bne.n	8008214 <_dtoa_r+0xac4>
 80082c8:	f10a 0a01 	add.w	sl, sl, #1
 80082cc:	2331      	movs	r3, #49	; 0x31
 80082ce:	e779      	b.n	80081c4 <_dtoa_r+0xa74>
 80082d0:	4b13      	ldr	r3, [pc, #76]	; (8008320 <_dtoa_r+0xbd0>)
 80082d2:	f7ff baaf 	b.w	8007834 <_dtoa_r+0xe4>
 80082d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f aa86 	bne.w	80077ea <_dtoa_r+0x9a>
 80082de:	4b11      	ldr	r3, [pc, #68]	; (8008324 <_dtoa_r+0xbd4>)
 80082e0:	f7ff baa8 	b.w	8007834 <_dtoa_r+0xe4>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	dc03      	bgt.n	80082f2 <_dtoa_r+0xba2>
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f73f aec9 	bgt.w	8008084 <_dtoa_r+0x934>
 80082f2:	9d00      	ldr	r5, [sp, #0]
 80082f4:	4631      	mov	r1, r6
 80082f6:	4658      	mov	r0, fp
 80082f8:	f7ff f99c 	bl	8007634 <quorem>
 80082fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008300:	f805 3b01 	strb.w	r3, [r5], #1
 8008304:	9a00      	ldr	r2, [sp, #0]
 8008306:	1aaa      	subs	r2, r5, r2
 8008308:	4591      	cmp	r9, r2
 800830a:	ddba      	ble.n	8008282 <_dtoa_r+0xb32>
 800830c:	4659      	mov	r1, fp
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fc06 	bl	8008b24 <__multadd>
 8008318:	4683      	mov	fp, r0
 800831a:	e7eb      	b.n	80082f4 <_dtoa_r+0xba4>
 800831c:	0800a714 	.word	0x0800a714
 8008320:	0800a510 	.word	0x0800a510
 8008324:	0800a691 	.word	0x0800a691

08008328 <rshift>:
 8008328:	6903      	ldr	r3, [r0, #16]
 800832a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800832e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008332:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008336:	f100 0414 	add.w	r4, r0, #20
 800833a:	dd45      	ble.n	80083c8 <rshift+0xa0>
 800833c:	f011 011f 	ands.w	r1, r1, #31
 8008340:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008344:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008348:	d10c      	bne.n	8008364 <rshift+0x3c>
 800834a:	f100 0710 	add.w	r7, r0, #16
 800834e:	4629      	mov	r1, r5
 8008350:	42b1      	cmp	r1, r6
 8008352:	d334      	bcc.n	80083be <rshift+0x96>
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	1eea      	subs	r2, r5, #3
 800835a:	4296      	cmp	r6, r2
 800835c:	bf38      	it	cc
 800835e:	2300      	movcc	r3, #0
 8008360:	4423      	add	r3, r4
 8008362:	e015      	b.n	8008390 <rshift+0x68>
 8008364:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008368:	f1c1 0820 	rsb	r8, r1, #32
 800836c:	40cf      	lsrs	r7, r1
 800836e:	f105 0e04 	add.w	lr, r5, #4
 8008372:	46a1      	mov	r9, r4
 8008374:	4576      	cmp	r6, lr
 8008376:	46f4      	mov	ip, lr
 8008378:	d815      	bhi.n	80083a6 <rshift+0x7e>
 800837a:	1a9b      	subs	r3, r3, r2
 800837c:	009a      	lsls	r2, r3, #2
 800837e:	3a04      	subs	r2, #4
 8008380:	3501      	adds	r5, #1
 8008382:	42ae      	cmp	r6, r5
 8008384:	bf38      	it	cc
 8008386:	2200      	movcc	r2, #0
 8008388:	18a3      	adds	r3, r4, r2
 800838a:	50a7      	str	r7, [r4, r2]
 800838c:	b107      	cbz	r7, 8008390 <rshift+0x68>
 800838e:	3304      	adds	r3, #4
 8008390:	1b1a      	subs	r2, r3, r4
 8008392:	42a3      	cmp	r3, r4
 8008394:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008398:	bf08      	it	eq
 800839a:	2300      	moveq	r3, #0
 800839c:	6102      	str	r2, [r0, #16]
 800839e:	bf08      	it	eq
 80083a0:	6143      	streq	r3, [r0, #20]
 80083a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a6:	f8dc c000 	ldr.w	ip, [ip]
 80083aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80083ae:	ea4c 0707 	orr.w	r7, ip, r7
 80083b2:	f849 7b04 	str.w	r7, [r9], #4
 80083b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083ba:	40cf      	lsrs	r7, r1
 80083bc:	e7da      	b.n	8008374 <rshift+0x4c>
 80083be:	f851 cb04 	ldr.w	ip, [r1], #4
 80083c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80083c6:	e7c3      	b.n	8008350 <rshift+0x28>
 80083c8:	4623      	mov	r3, r4
 80083ca:	e7e1      	b.n	8008390 <rshift+0x68>

080083cc <__hexdig_fun>:
 80083cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d802      	bhi.n	80083da <__hexdig_fun+0xe>
 80083d4:	3820      	subs	r0, #32
 80083d6:	b2c0      	uxtb	r0, r0
 80083d8:	4770      	bx	lr
 80083da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d801      	bhi.n	80083e6 <__hexdig_fun+0x1a>
 80083e2:	3847      	subs	r0, #71	; 0x47
 80083e4:	e7f7      	b.n	80083d6 <__hexdig_fun+0xa>
 80083e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d801      	bhi.n	80083f2 <__hexdig_fun+0x26>
 80083ee:	3827      	subs	r0, #39	; 0x27
 80083f0:	e7f1      	b.n	80083d6 <__hexdig_fun+0xa>
 80083f2:	2000      	movs	r0, #0
 80083f4:	4770      	bx	lr
	...

080083f8 <__gethex>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	ed2d 8b02 	vpush	{d8}
 8008400:	b089      	sub	sp, #36	; 0x24
 8008402:	ee08 0a10 	vmov	s16, r0
 8008406:	9304      	str	r3, [sp, #16]
 8008408:	4bbc      	ldr	r3, [pc, #752]	; (80086fc <__gethex+0x304>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	4618      	mov	r0, r3
 8008410:	468b      	mov	fp, r1
 8008412:	4690      	mov	r8, r2
 8008414:	f7f7 fee4 	bl	80001e0 <strlen>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	f8db 2000 	ldr.w	r2, [fp]
 800841e:	4403      	add	r3, r0
 8008420:	4682      	mov	sl, r0
 8008422:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	1c93      	adds	r3, r2, #2
 800842a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800842e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008432:	32fe      	adds	r2, #254	; 0xfe
 8008434:	18d1      	adds	r1, r2, r3
 8008436:	461f      	mov	r7, r3
 8008438:	f813 0b01 	ldrb.w	r0, [r3], #1
 800843c:	9100      	str	r1, [sp, #0]
 800843e:	2830      	cmp	r0, #48	; 0x30
 8008440:	d0f8      	beq.n	8008434 <__gethex+0x3c>
 8008442:	f7ff ffc3 	bl	80083cc <__hexdig_fun>
 8008446:	4604      	mov	r4, r0
 8008448:	2800      	cmp	r0, #0
 800844a:	d13a      	bne.n	80084c2 <__gethex+0xca>
 800844c:	9901      	ldr	r1, [sp, #4]
 800844e:	4652      	mov	r2, sl
 8008450:	4638      	mov	r0, r7
 8008452:	f001 f9ed 	bl	8009830 <strncmp>
 8008456:	4605      	mov	r5, r0
 8008458:	2800      	cmp	r0, #0
 800845a:	d168      	bne.n	800852e <__gethex+0x136>
 800845c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008460:	eb07 060a 	add.w	r6, r7, sl
 8008464:	f7ff ffb2 	bl	80083cc <__hexdig_fun>
 8008468:	2800      	cmp	r0, #0
 800846a:	d062      	beq.n	8008532 <__gethex+0x13a>
 800846c:	4633      	mov	r3, r6
 800846e:	7818      	ldrb	r0, [r3, #0]
 8008470:	2830      	cmp	r0, #48	; 0x30
 8008472:	461f      	mov	r7, r3
 8008474:	f103 0301 	add.w	r3, r3, #1
 8008478:	d0f9      	beq.n	800846e <__gethex+0x76>
 800847a:	f7ff ffa7 	bl	80083cc <__hexdig_fun>
 800847e:	2301      	movs	r3, #1
 8008480:	fab0 f480 	clz	r4, r0
 8008484:	0964      	lsrs	r4, r4, #5
 8008486:	4635      	mov	r5, r6
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	463a      	mov	r2, r7
 800848c:	4616      	mov	r6, r2
 800848e:	3201      	adds	r2, #1
 8008490:	7830      	ldrb	r0, [r6, #0]
 8008492:	f7ff ff9b 	bl	80083cc <__hexdig_fun>
 8008496:	2800      	cmp	r0, #0
 8008498:	d1f8      	bne.n	800848c <__gethex+0x94>
 800849a:	9901      	ldr	r1, [sp, #4]
 800849c:	4652      	mov	r2, sl
 800849e:	4630      	mov	r0, r6
 80084a0:	f001 f9c6 	bl	8009830 <strncmp>
 80084a4:	b980      	cbnz	r0, 80084c8 <__gethex+0xd0>
 80084a6:	b94d      	cbnz	r5, 80084bc <__gethex+0xc4>
 80084a8:	eb06 050a 	add.w	r5, r6, sl
 80084ac:	462a      	mov	r2, r5
 80084ae:	4616      	mov	r6, r2
 80084b0:	3201      	adds	r2, #1
 80084b2:	7830      	ldrb	r0, [r6, #0]
 80084b4:	f7ff ff8a 	bl	80083cc <__hexdig_fun>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d1f8      	bne.n	80084ae <__gethex+0xb6>
 80084bc:	1bad      	subs	r5, r5, r6
 80084be:	00ad      	lsls	r5, r5, #2
 80084c0:	e004      	b.n	80084cc <__gethex+0xd4>
 80084c2:	2400      	movs	r4, #0
 80084c4:	4625      	mov	r5, r4
 80084c6:	e7e0      	b.n	800848a <__gethex+0x92>
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	d1f7      	bne.n	80084bc <__gethex+0xc4>
 80084cc:	7833      	ldrb	r3, [r6, #0]
 80084ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084d2:	2b50      	cmp	r3, #80	; 0x50
 80084d4:	d13b      	bne.n	800854e <__gethex+0x156>
 80084d6:	7873      	ldrb	r3, [r6, #1]
 80084d8:	2b2b      	cmp	r3, #43	; 0x2b
 80084da:	d02c      	beq.n	8008536 <__gethex+0x13e>
 80084dc:	2b2d      	cmp	r3, #45	; 0x2d
 80084de:	d02e      	beq.n	800853e <__gethex+0x146>
 80084e0:	1c71      	adds	r1, r6, #1
 80084e2:	f04f 0900 	mov.w	r9, #0
 80084e6:	7808      	ldrb	r0, [r1, #0]
 80084e8:	f7ff ff70 	bl	80083cc <__hexdig_fun>
 80084ec:	1e43      	subs	r3, r0, #1
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b18      	cmp	r3, #24
 80084f2:	d82c      	bhi.n	800854e <__gethex+0x156>
 80084f4:	f1a0 0210 	sub.w	r2, r0, #16
 80084f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084fc:	f7ff ff66 	bl	80083cc <__hexdig_fun>
 8008500:	1e43      	subs	r3, r0, #1
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b18      	cmp	r3, #24
 8008506:	d91d      	bls.n	8008544 <__gethex+0x14c>
 8008508:	f1b9 0f00 	cmp.w	r9, #0
 800850c:	d000      	beq.n	8008510 <__gethex+0x118>
 800850e:	4252      	negs	r2, r2
 8008510:	4415      	add	r5, r2
 8008512:	f8cb 1000 	str.w	r1, [fp]
 8008516:	b1e4      	cbz	r4, 8008552 <__gethex+0x15a>
 8008518:	9b00      	ldr	r3, [sp, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	bf14      	ite	ne
 800851e:	2700      	movne	r7, #0
 8008520:	2706      	moveq	r7, #6
 8008522:	4638      	mov	r0, r7
 8008524:	b009      	add	sp, #36	; 0x24
 8008526:	ecbd 8b02 	vpop	{d8}
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	463e      	mov	r6, r7
 8008530:	4625      	mov	r5, r4
 8008532:	2401      	movs	r4, #1
 8008534:	e7ca      	b.n	80084cc <__gethex+0xd4>
 8008536:	f04f 0900 	mov.w	r9, #0
 800853a:	1cb1      	adds	r1, r6, #2
 800853c:	e7d3      	b.n	80084e6 <__gethex+0xee>
 800853e:	f04f 0901 	mov.w	r9, #1
 8008542:	e7fa      	b.n	800853a <__gethex+0x142>
 8008544:	230a      	movs	r3, #10
 8008546:	fb03 0202 	mla	r2, r3, r2, r0
 800854a:	3a10      	subs	r2, #16
 800854c:	e7d4      	b.n	80084f8 <__gethex+0x100>
 800854e:	4631      	mov	r1, r6
 8008550:	e7df      	b.n	8008512 <__gethex+0x11a>
 8008552:	1bf3      	subs	r3, r6, r7
 8008554:	3b01      	subs	r3, #1
 8008556:	4621      	mov	r1, r4
 8008558:	2b07      	cmp	r3, #7
 800855a:	dc0b      	bgt.n	8008574 <__gethex+0x17c>
 800855c:	ee18 0a10 	vmov	r0, s16
 8008560:	f000 fa7e 	bl	8008a60 <_Balloc>
 8008564:	4604      	mov	r4, r0
 8008566:	b940      	cbnz	r0, 800857a <__gethex+0x182>
 8008568:	4b65      	ldr	r3, [pc, #404]	; (8008700 <__gethex+0x308>)
 800856a:	4602      	mov	r2, r0
 800856c:	21de      	movs	r1, #222	; 0xde
 800856e:	4865      	ldr	r0, [pc, #404]	; (8008704 <__gethex+0x30c>)
 8008570:	f001 f97e 	bl	8009870 <__assert_func>
 8008574:	3101      	adds	r1, #1
 8008576:	105b      	asrs	r3, r3, #1
 8008578:	e7ee      	b.n	8008558 <__gethex+0x160>
 800857a:	f100 0914 	add.w	r9, r0, #20
 800857e:	f04f 0b00 	mov.w	fp, #0
 8008582:	f1ca 0301 	rsb	r3, sl, #1
 8008586:	f8cd 9008 	str.w	r9, [sp, #8]
 800858a:	f8cd b000 	str.w	fp, [sp]
 800858e:	9306      	str	r3, [sp, #24]
 8008590:	42b7      	cmp	r7, r6
 8008592:	d340      	bcc.n	8008616 <__gethex+0x21e>
 8008594:	9802      	ldr	r0, [sp, #8]
 8008596:	9b00      	ldr	r3, [sp, #0]
 8008598:	f840 3b04 	str.w	r3, [r0], #4
 800859c:	eba0 0009 	sub.w	r0, r0, r9
 80085a0:	1080      	asrs	r0, r0, #2
 80085a2:	0146      	lsls	r6, r0, #5
 80085a4:	6120      	str	r0, [r4, #16]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fb50 	bl	8008c4c <__hi0bits>
 80085ac:	1a30      	subs	r0, r6, r0
 80085ae:	f8d8 6000 	ldr.w	r6, [r8]
 80085b2:	42b0      	cmp	r0, r6
 80085b4:	dd63      	ble.n	800867e <__gethex+0x286>
 80085b6:	1b87      	subs	r7, r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 feea 	bl	8009394 <__any_on>
 80085c0:	4682      	mov	sl, r0
 80085c2:	b1a8      	cbz	r0, 80085f0 <__gethex+0x1f8>
 80085c4:	1e7b      	subs	r3, r7, #1
 80085c6:	1159      	asrs	r1, r3, #5
 80085c8:	f003 021f 	and.w	r2, r3, #31
 80085cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80085d0:	f04f 0a01 	mov.w	sl, #1
 80085d4:	fa0a f202 	lsl.w	r2, sl, r2
 80085d8:	420a      	tst	r2, r1
 80085da:	d009      	beq.n	80085f0 <__gethex+0x1f8>
 80085dc:	4553      	cmp	r3, sl
 80085de:	dd05      	ble.n	80085ec <__gethex+0x1f4>
 80085e0:	1eb9      	subs	r1, r7, #2
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 fed6 	bl	8009394 <__any_on>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	d145      	bne.n	8008678 <__gethex+0x280>
 80085ec:	f04f 0a02 	mov.w	sl, #2
 80085f0:	4639      	mov	r1, r7
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fe98 	bl	8008328 <rshift>
 80085f8:	443d      	add	r5, r7
 80085fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085fe:	42ab      	cmp	r3, r5
 8008600:	da4c      	bge.n	800869c <__gethex+0x2a4>
 8008602:	ee18 0a10 	vmov	r0, s16
 8008606:	4621      	mov	r1, r4
 8008608:	f000 fa6a 	bl	8008ae0 <_Bfree>
 800860c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800860e:	2300      	movs	r3, #0
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	27a3      	movs	r7, #163	; 0xa3
 8008614:	e785      	b.n	8008522 <__gethex+0x12a>
 8008616:	1e73      	subs	r3, r6, #1
 8008618:	9a05      	ldr	r2, [sp, #20]
 800861a:	9303      	str	r3, [sp, #12]
 800861c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008620:	4293      	cmp	r3, r2
 8008622:	d019      	beq.n	8008658 <__gethex+0x260>
 8008624:	f1bb 0f20 	cmp.w	fp, #32
 8008628:	d107      	bne.n	800863a <__gethex+0x242>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	9a00      	ldr	r2, [sp, #0]
 800862e:	f843 2b04 	str.w	r2, [r3], #4
 8008632:	9302      	str	r3, [sp, #8]
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	469b      	mov	fp, r3
 800863a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800863e:	f7ff fec5 	bl	80083cc <__hexdig_fun>
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	f000 000f 	and.w	r0, r0, #15
 8008648:	fa00 f00b 	lsl.w	r0, r0, fp
 800864c:	4303      	orrs	r3, r0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	f10b 0b04 	add.w	fp, fp, #4
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	e00d      	b.n	8008674 <__gethex+0x27c>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9a06      	ldr	r2, [sp, #24]
 800865c:	4413      	add	r3, r2
 800865e:	42bb      	cmp	r3, r7
 8008660:	d3e0      	bcc.n	8008624 <__gethex+0x22c>
 8008662:	4618      	mov	r0, r3
 8008664:	9901      	ldr	r1, [sp, #4]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	4652      	mov	r2, sl
 800866a:	f001 f8e1 	bl	8009830 <strncmp>
 800866e:	9b07      	ldr	r3, [sp, #28]
 8008670:	2800      	cmp	r0, #0
 8008672:	d1d7      	bne.n	8008624 <__gethex+0x22c>
 8008674:	461e      	mov	r6, r3
 8008676:	e78b      	b.n	8008590 <__gethex+0x198>
 8008678:	f04f 0a03 	mov.w	sl, #3
 800867c:	e7b8      	b.n	80085f0 <__gethex+0x1f8>
 800867e:	da0a      	bge.n	8008696 <__gethex+0x29e>
 8008680:	1a37      	subs	r7, r6, r0
 8008682:	4621      	mov	r1, r4
 8008684:	ee18 0a10 	vmov	r0, s16
 8008688:	463a      	mov	r2, r7
 800868a:	f000 fc45 	bl	8008f18 <__lshift>
 800868e:	1bed      	subs	r5, r5, r7
 8008690:	4604      	mov	r4, r0
 8008692:	f100 0914 	add.w	r9, r0, #20
 8008696:	f04f 0a00 	mov.w	sl, #0
 800869a:	e7ae      	b.n	80085fa <__gethex+0x202>
 800869c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086a0:	42a8      	cmp	r0, r5
 80086a2:	dd72      	ble.n	800878a <__gethex+0x392>
 80086a4:	1b45      	subs	r5, r0, r5
 80086a6:	42ae      	cmp	r6, r5
 80086a8:	dc36      	bgt.n	8008718 <__gethex+0x320>
 80086aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d02a      	beq.n	8008708 <__gethex+0x310>
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d02c      	beq.n	8008710 <__gethex+0x318>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d115      	bne.n	80086e6 <__gethex+0x2ee>
 80086ba:	42ae      	cmp	r6, r5
 80086bc:	d113      	bne.n	80086e6 <__gethex+0x2ee>
 80086be:	2e01      	cmp	r6, #1
 80086c0:	d10b      	bne.n	80086da <__gethex+0x2e2>
 80086c2:	9a04      	ldr	r2, [sp, #16]
 80086c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086c8:	6013      	str	r3, [r2, #0]
 80086ca:	2301      	movs	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	f8c9 3000 	str.w	r3, [r9]
 80086d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086d4:	2762      	movs	r7, #98	; 0x62
 80086d6:	601c      	str	r4, [r3, #0]
 80086d8:	e723      	b.n	8008522 <__gethex+0x12a>
 80086da:	1e71      	subs	r1, r6, #1
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fe59 	bl	8009394 <__any_on>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d1ed      	bne.n	80086c2 <__gethex+0x2ca>
 80086e6:	ee18 0a10 	vmov	r0, s16
 80086ea:	4621      	mov	r1, r4
 80086ec:	f000 f9f8 	bl	8008ae0 <_Bfree>
 80086f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086f2:	2300      	movs	r3, #0
 80086f4:	6013      	str	r3, [r2, #0]
 80086f6:	2750      	movs	r7, #80	; 0x50
 80086f8:	e713      	b.n	8008522 <__gethex+0x12a>
 80086fa:	bf00      	nop
 80086fc:	0800a790 	.word	0x0800a790
 8008700:	0800a714 	.word	0x0800a714
 8008704:	0800a725 	.word	0x0800a725
 8008708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1eb      	bne.n	80086e6 <__gethex+0x2ee>
 800870e:	e7d8      	b.n	80086c2 <__gethex+0x2ca>
 8008710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d5      	bne.n	80086c2 <__gethex+0x2ca>
 8008716:	e7e6      	b.n	80086e6 <__gethex+0x2ee>
 8008718:	1e6f      	subs	r7, r5, #1
 800871a:	f1ba 0f00 	cmp.w	sl, #0
 800871e:	d131      	bne.n	8008784 <__gethex+0x38c>
 8008720:	b127      	cbz	r7, 800872c <__gethex+0x334>
 8008722:	4639      	mov	r1, r7
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fe35 	bl	8009394 <__any_on>
 800872a:	4682      	mov	sl, r0
 800872c:	117b      	asrs	r3, r7, #5
 800872e:	2101      	movs	r1, #1
 8008730:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008734:	f007 071f 	and.w	r7, r7, #31
 8008738:	fa01 f707 	lsl.w	r7, r1, r7
 800873c:	421f      	tst	r7, r3
 800873e:	4629      	mov	r1, r5
 8008740:	4620      	mov	r0, r4
 8008742:	bf18      	it	ne
 8008744:	f04a 0a02 	orrne.w	sl, sl, #2
 8008748:	1b76      	subs	r6, r6, r5
 800874a:	f7ff fded 	bl	8008328 <rshift>
 800874e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008752:	2702      	movs	r7, #2
 8008754:	f1ba 0f00 	cmp.w	sl, #0
 8008758:	d048      	beq.n	80087ec <__gethex+0x3f4>
 800875a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d015      	beq.n	800878e <__gethex+0x396>
 8008762:	2b03      	cmp	r3, #3
 8008764:	d017      	beq.n	8008796 <__gethex+0x39e>
 8008766:	2b01      	cmp	r3, #1
 8008768:	d109      	bne.n	800877e <__gethex+0x386>
 800876a:	f01a 0f02 	tst.w	sl, #2
 800876e:	d006      	beq.n	800877e <__gethex+0x386>
 8008770:	f8d9 0000 	ldr.w	r0, [r9]
 8008774:	ea4a 0a00 	orr.w	sl, sl, r0
 8008778:	f01a 0f01 	tst.w	sl, #1
 800877c:	d10e      	bne.n	800879c <__gethex+0x3a4>
 800877e:	f047 0710 	orr.w	r7, r7, #16
 8008782:	e033      	b.n	80087ec <__gethex+0x3f4>
 8008784:	f04f 0a01 	mov.w	sl, #1
 8008788:	e7d0      	b.n	800872c <__gethex+0x334>
 800878a:	2701      	movs	r7, #1
 800878c:	e7e2      	b.n	8008754 <__gethex+0x35c>
 800878e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008790:	f1c3 0301 	rsb	r3, r3, #1
 8008794:	9315      	str	r3, [sp, #84]	; 0x54
 8008796:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0f0      	beq.n	800877e <__gethex+0x386>
 800879c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087a0:	f104 0314 	add.w	r3, r4, #20
 80087a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087ac:	f04f 0c00 	mov.w	ip, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087ba:	d01c      	beq.n	80087f6 <__gethex+0x3fe>
 80087bc:	3201      	adds	r2, #1
 80087be:	6002      	str	r2, [r0, #0]
 80087c0:	2f02      	cmp	r7, #2
 80087c2:	f104 0314 	add.w	r3, r4, #20
 80087c6:	d13f      	bne.n	8008848 <__gethex+0x450>
 80087c8:	f8d8 2000 	ldr.w	r2, [r8]
 80087cc:	3a01      	subs	r2, #1
 80087ce:	42b2      	cmp	r2, r6
 80087d0:	d10a      	bne.n	80087e8 <__gethex+0x3f0>
 80087d2:	1171      	asrs	r1, r6, #5
 80087d4:	2201      	movs	r2, #1
 80087d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087da:	f006 061f 	and.w	r6, r6, #31
 80087de:	fa02 f606 	lsl.w	r6, r2, r6
 80087e2:	421e      	tst	r6, r3
 80087e4:	bf18      	it	ne
 80087e6:	4617      	movne	r7, r2
 80087e8:	f047 0720 	orr.w	r7, r7, #32
 80087ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087ee:	601c      	str	r4, [r3, #0]
 80087f0:	9b04      	ldr	r3, [sp, #16]
 80087f2:	601d      	str	r5, [r3, #0]
 80087f4:	e695      	b.n	8008522 <__gethex+0x12a>
 80087f6:	4299      	cmp	r1, r3
 80087f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80087fc:	d8d8      	bhi.n	80087b0 <__gethex+0x3b8>
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	459b      	cmp	fp, r3
 8008802:	db19      	blt.n	8008838 <__gethex+0x440>
 8008804:	6861      	ldr	r1, [r4, #4]
 8008806:	ee18 0a10 	vmov	r0, s16
 800880a:	3101      	adds	r1, #1
 800880c:	f000 f928 	bl	8008a60 <_Balloc>
 8008810:	4681      	mov	r9, r0
 8008812:	b918      	cbnz	r0, 800881c <__gethex+0x424>
 8008814:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <__gethex+0x488>)
 8008816:	4602      	mov	r2, r0
 8008818:	2184      	movs	r1, #132	; 0x84
 800881a:	e6a8      	b.n	800856e <__gethex+0x176>
 800881c:	6922      	ldr	r2, [r4, #16]
 800881e:	3202      	adds	r2, #2
 8008820:	f104 010c 	add.w	r1, r4, #12
 8008824:	0092      	lsls	r2, r2, #2
 8008826:	300c      	adds	r0, #12
 8008828:	f000 f90c 	bl	8008a44 <memcpy>
 800882c:	4621      	mov	r1, r4
 800882e:	ee18 0a10 	vmov	r0, s16
 8008832:	f000 f955 	bl	8008ae0 <_Bfree>
 8008836:	464c      	mov	r4, r9
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008840:	6122      	str	r2, [r4, #16]
 8008842:	2201      	movs	r2, #1
 8008844:	615a      	str	r2, [r3, #20]
 8008846:	e7bb      	b.n	80087c0 <__gethex+0x3c8>
 8008848:	6922      	ldr	r2, [r4, #16]
 800884a:	455a      	cmp	r2, fp
 800884c:	dd0b      	ble.n	8008866 <__gethex+0x46e>
 800884e:	2101      	movs	r1, #1
 8008850:	4620      	mov	r0, r4
 8008852:	f7ff fd69 	bl	8008328 <rshift>
 8008856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800885a:	3501      	adds	r5, #1
 800885c:	42ab      	cmp	r3, r5
 800885e:	f6ff aed0 	blt.w	8008602 <__gethex+0x20a>
 8008862:	2701      	movs	r7, #1
 8008864:	e7c0      	b.n	80087e8 <__gethex+0x3f0>
 8008866:	f016 061f 	ands.w	r6, r6, #31
 800886a:	d0fa      	beq.n	8008862 <__gethex+0x46a>
 800886c:	449a      	add	sl, r3
 800886e:	f1c6 0620 	rsb	r6, r6, #32
 8008872:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008876:	f000 f9e9 	bl	8008c4c <__hi0bits>
 800887a:	42b0      	cmp	r0, r6
 800887c:	dbe7      	blt.n	800884e <__gethex+0x456>
 800887e:	e7f0      	b.n	8008862 <__gethex+0x46a>
 8008880:	0800a714 	.word	0x0800a714

08008884 <L_shift>:
 8008884:	f1c2 0208 	rsb	r2, r2, #8
 8008888:	0092      	lsls	r2, r2, #2
 800888a:	b570      	push	{r4, r5, r6, lr}
 800888c:	f1c2 0620 	rsb	r6, r2, #32
 8008890:	6843      	ldr	r3, [r0, #4]
 8008892:	6804      	ldr	r4, [r0, #0]
 8008894:	fa03 f506 	lsl.w	r5, r3, r6
 8008898:	432c      	orrs	r4, r5
 800889a:	40d3      	lsrs	r3, r2
 800889c:	6004      	str	r4, [r0, #0]
 800889e:	f840 3f04 	str.w	r3, [r0, #4]!
 80088a2:	4288      	cmp	r0, r1
 80088a4:	d3f4      	bcc.n	8008890 <L_shift+0xc>
 80088a6:	bd70      	pop	{r4, r5, r6, pc}

080088a8 <__match>:
 80088a8:	b530      	push	{r4, r5, lr}
 80088aa:	6803      	ldr	r3, [r0, #0]
 80088ac:	3301      	adds	r3, #1
 80088ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b2:	b914      	cbnz	r4, 80088ba <__match+0x12>
 80088b4:	6003      	str	r3, [r0, #0]
 80088b6:	2001      	movs	r0, #1
 80088b8:	bd30      	pop	{r4, r5, pc}
 80088ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80088c2:	2d19      	cmp	r5, #25
 80088c4:	bf98      	it	ls
 80088c6:	3220      	addls	r2, #32
 80088c8:	42a2      	cmp	r2, r4
 80088ca:	d0f0      	beq.n	80088ae <__match+0x6>
 80088cc:	2000      	movs	r0, #0
 80088ce:	e7f3      	b.n	80088b8 <__match+0x10>

080088d0 <__hexnan>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	680b      	ldr	r3, [r1, #0]
 80088d6:	6801      	ldr	r1, [r0, #0]
 80088d8:	115e      	asrs	r6, r3, #5
 80088da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088de:	f013 031f 	ands.w	r3, r3, #31
 80088e2:	b087      	sub	sp, #28
 80088e4:	bf18      	it	ne
 80088e6:	3604      	addne	r6, #4
 80088e8:	2500      	movs	r5, #0
 80088ea:	1f37      	subs	r7, r6, #4
 80088ec:	4682      	mov	sl, r0
 80088ee:	4690      	mov	r8, r2
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80088f6:	46b9      	mov	r9, r7
 80088f8:	463c      	mov	r4, r7
 80088fa:	9502      	str	r5, [sp, #8]
 80088fc:	46ab      	mov	fp, r5
 80088fe:	784a      	ldrb	r2, [r1, #1]
 8008900:	1c4b      	adds	r3, r1, #1
 8008902:	9303      	str	r3, [sp, #12]
 8008904:	b342      	cbz	r2, 8008958 <__hexnan+0x88>
 8008906:	4610      	mov	r0, r2
 8008908:	9105      	str	r1, [sp, #20]
 800890a:	9204      	str	r2, [sp, #16]
 800890c:	f7ff fd5e 	bl	80083cc <__hexdig_fun>
 8008910:	2800      	cmp	r0, #0
 8008912:	d14f      	bne.n	80089b4 <__hexnan+0xe4>
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	9905      	ldr	r1, [sp, #20]
 8008918:	2a20      	cmp	r2, #32
 800891a:	d818      	bhi.n	800894e <__hexnan+0x7e>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	459b      	cmp	fp, r3
 8008920:	dd13      	ble.n	800894a <__hexnan+0x7a>
 8008922:	454c      	cmp	r4, r9
 8008924:	d206      	bcs.n	8008934 <__hexnan+0x64>
 8008926:	2d07      	cmp	r5, #7
 8008928:	dc04      	bgt.n	8008934 <__hexnan+0x64>
 800892a:	462a      	mov	r2, r5
 800892c:	4649      	mov	r1, r9
 800892e:	4620      	mov	r0, r4
 8008930:	f7ff ffa8 	bl	8008884 <L_shift>
 8008934:	4544      	cmp	r4, r8
 8008936:	d950      	bls.n	80089da <__hexnan+0x10a>
 8008938:	2300      	movs	r3, #0
 800893a:	f1a4 0904 	sub.w	r9, r4, #4
 800893e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008942:	f8cd b008 	str.w	fp, [sp, #8]
 8008946:	464c      	mov	r4, r9
 8008948:	461d      	mov	r5, r3
 800894a:	9903      	ldr	r1, [sp, #12]
 800894c:	e7d7      	b.n	80088fe <__hexnan+0x2e>
 800894e:	2a29      	cmp	r2, #41	; 0x29
 8008950:	d156      	bne.n	8008a00 <__hexnan+0x130>
 8008952:	3102      	adds	r1, #2
 8008954:	f8ca 1000 	str.w	r1, [sl]
 8008958:	f1bb 0f00 	cmp.w	fp, #0
 800895c:	d050      	beq.n	8008a00 <__hexnan+0x130>
 800895e:	454c      	cmp	r4, r9
 8008960:	d206      	bcs.n	8008970 <__hexnan+0xa0>
 8008962:	2d07      	cmp	r5, #7
 8008964:	dc04      	bgt.n	8008970 <__hexnan+0xa0>
 8008966:	462a      	mov	r2, r5
 8008968:	4649      	mov	r1, r9
 800896a:	4620      	mov	r0, r4
 800896c:	f7ff ff8a 	bl	8008884 <L_shift>
 8008970:	4544      	cmp	r4, r8
 8008972:	d934      	bls.n	80089de <__hexnan+0x10e>
 8008974:	f1a8 0204 	sub.w	r2, r8, #4
 8008978:	4623      	mov	r3, r4
 800897a:	f853 1b04 	ldr.w	r1, [r3], #4
 800897e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008982:	429f      	cmp	r7, r3
 8008984:	d2f9      	bcs.n	800897a <__hexnan+0xaa>
 8008986:	1b3b      	subs	r3, r7, r4
 8008988:	f023 0303 	bic.w	r3, r3, #3
 800898c:	3304      	adds	r3, #4
 800898e:	3401      	adds	r4, #1
 8008990:	3e03      	subs	r6, #3
 8008992:	42b4      	cmp	r4, r6
 8008994:	bf88      	it	hi
 8008996:	2304      	movhi	r3, #4
 8008998:	4443      	add	r3, r8
 800899a:	2200      	movs	r2, #0
 800899c:	f843 2b04 	str.w	r2, [r3], #4
 80089a0:	429f      	cmp	r7, r3
 80089a2:	d2fb      	bcs.n	800899c <__hexnan+0xcc>
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	b91b      	cbnz	r3, 80089b0 <__hexnan+0xe0>
 80089a8:	4547      	cmp	r7, r8
 80089aa:	d127      	bne.n	80089fc <__hexnan+0x12c>
 80089ac:	2301      	movs	r3, #1
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	2005      	movs	r0, #5
 80089b2:	e026      	b.n	8008a02 <__hexnan+0x132>
 80089b4:	3501      	adds	r5, #1
 80089b6:	2d08      	cmp	r5, #8
 80089b8:	f10b 0b01 	add.w	fp, fp, #1
 80089bc:	dd06      	ble.n	80089cc <__hexnan+0xfc>
 80089be:	4544      	cmp	r4, r8
 80089c0:	d9c3      	bls.n	800894a <__hexnan+0x7a>
 80089c2:	2300      	movs	r3, #0
 80089c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80089c8:	2501      	movs	r5, #1
 80089ca:	3c04      	subs	r4, #4
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	f000 000f 	and.w	r0, r0, #15
 80089d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	e7b7      	b.n	800894a <__hexnan+0x7a>
 80089da:	2508      	movs	r5, #8
 80089dc:	e7b5      	b.n	800894a <__hexnan+0x7a>
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0df      	beq.n	80089a4 <__hexnan+0xd4>
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	f1c3 0320 	rsb	r3, r3, #32
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
 80089f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089f4:	401a      	ands	r2, r3
 80089f6:	f846 2c04 	str.w	r2, [r6, #-4]
 80089fa:	e7d3      	b.n	80089a4 <__hexnan+0xd4>
 80089fc:	3f04      	subs	r7, #4
 80089fe:	e7d1      	b.n	80089a4 <__hexnan+0xd4>
 8008a00:	2004      	movs	r0, #4
 8008a02:	b007      	add	sp, #28
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a08 <_localeconv_r>:
 8008a08:	4800      	ldr	r0, [pc, #0]	; (8008a0c <_localeconv_r+0x4>)
 8008a0a:	4770      	bx	lr
 8008a0c:	20000178 	.word	0x20000178

08008a10 <malloc>:
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <malloc+0xc>)
 8008a12:	4601      	mov	r1, r0
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	f000 bd3d 	b.w	8009494 <_malloc_r>
 8008a1a:	bf00      	nop
 8008a1c:	20000020 	.word	0x20000020

08008a20 <__ascii_mbtowc>:
 8008a20:	b082      	sub	sp, #8
 8008a22:	b901      	cbnz	r1, 8008a26 <__ascii_mbtowc+0x6>
 8008a24:	a901      	add	r1, sp, #4
 8008a26:	b142      	cbz	r2, 8008a3a <__ascii_mbtowc+0x1a>
 8008a28:	b14b      	cbz	r3, 8008a3e <__ascii_mbtowc+0x1e>
 8008a2a:	7813      	ldrb	r3, [r2, #0]
 8008a2c:	600b      	str	r3, [r1, #0]
 8008a2e:	7812      	ldrb	r2, [r2, #0]
 8008a30:	1e10      	subs	r0, r2, #0
 8008a32:	bf18      	it	ne
 8008a34:	2001      	movne	r0, #1
 8008a36:	b002      	add	sp, #8
 8008a38:	4770      	bx	lr
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	e7fb      	b.n	8008a36 <__ascii_mbtowc+0x16>
 8008a3e:	f06f 0001 	mvn.w	r0, #1
 8008a42:	e7f8      	b.n	8008a36 <__ascii_mbtowc+0x16>

08008a44 <memcpy>:
 8008a44:	440a      	add	r2, r1
 8008a46:	4291      	cmp	r1, r2
 8008a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a4c:	d100      	bne.n	8008a50 <memcpy+0xc>
 8008a4e:	4770      	bx	lr
 8008a50:	b510      	push	{r4, lr}
 8008a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d1f9      	bne.n	8008a52 <memcpy+0xe>
 8008a5e:	bd10      	pop	{r4, pc}

08008a60 <_Balloc>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a64:	4604      	mov	r4, r0
 8008a66:	460d      	mov	r5, r1
 8008a68:	b976      	cbnz	r6, 8008a88 <_Balloc+0x28>
 8008a6a:	2010      	movs	r0, #16
 8008a6c:	f7ff ffd0 	bl	8008a10 <malloc>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6260      	str	r0, [r4, #36]	; 0x24
 8008a74:	b920      	cbnz	r0, 8008a80 <_Balloc+0x20>
 8008a76:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <_Balloc+0x78>)
 8008a78:	4818      	ldr	r0, [pc, #96]	; (8008adc <_Balloc+0x7c>)
 8008a7a:	2166      	movs	r1, #102	; 0x66
 8008a7c:	f000 fef8 	bl	8009870 <__assert_func>
 8008a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a84:	6006      	str	r6, [r0, #0]
 8008a86:	60c6      	str	r6, [r0, #12]
 8008a88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a8a:	68f3      	ldr	r3, [r6, #12]
 8008a8c:	b183      	cbz	r3, 8008ab0 <_Balloc+0x50>
 8008a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a96:	b9b8      	cbnz	r0, 8008ac8 <_Balloc+0x68>
 8008a98:	2101      	movs	r1, #1
 8008a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a9e:	1d72      	adds	r2, r6, #5
 8008aa0:	0092      	lsls	r2, r2, #2
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 fc97 	bl	80093d6 <_calloc_r>
 8008aa8:	b160      	cbz	r0, 8008ac4 <_Balloc+0x64>
 8008aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aae:	e00e      	b.n	8008ace <_Balloc+0x6e>
 8008ab0:	2221      	movs	r2, #33	; 0x21
 8008ab2:	2104      	movs	r1, #4
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 fc8e 	bl	80093d6 <_calloc_r>
 8008aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008abc:	60f0      	str	r0, [r6, #12]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e4      	bne.n	8008a8e <_Balloc+0x2e>
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	6802      	ldr	r2, [r0, #0]
 8008aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ad4:	e7f7      	b.n	8008ac6 <_Balloc+0x66>
 8008ad6:	bf00      	nop
 8008ad8:	0800a69e 	.word	0x0800a69e
 8008adc:	0800a7a4 	.word	0x0800a7a4

08008ae0 <_Bfree>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b976      	cbnz	r6, 8008b08 <_Bfree+0x28>
 8008aea:	2010      	movs	r0, #16
 8008aec:	f7ff ff90 	bl	8008a10 <malloc>
 8008af0:	4602      	mov	r2, r0
 8008af2:	6268      	str	r0, [r5, #36]	; 0x24
 8008af4:	b920      	cbnz	r0, 8008b00 <_Bfree+0x20>
 8008af6:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <_Bfree+0x3c>)
 8008af8:	4809      	ldr	r0, [pc, #36]	; (8008b20 <_Bfree+0x40>)
 8008afa:	218a      	movs	r1, #138	; 0x8a
 8008afc:	f000 feb8 	bl	8009870 <__assert_func>
 8008b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b04:	6006      	str	r6, [r0, #0]
 8008b06:	60c6      	str	r6, [r0, #12]
 8008b08:	b13c      	cbz	r4, 8008b1a <_Bfree+0x3a>
 8008b0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b0c:	6862      	ldr	r2, [r4, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b14:	6021      	str	r1, [r4, #0]
 8008b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	0800a69e 	.word	0x0800a69e
 8008b20:	0800a7a4 	.word	0x0800a7a4

08008b24 <__multadd>:
 8008b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b28:	690e      	ldr	r6, [r1, #16]
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	4698      	mov	r8, r3
 8008b2e:	460c      	mov	r4, r1
 8008b30:	f101 0014 	add.w	r0, r1, #20
 8008b34:	2300      	movs	r3, #0
 8008b36:	6805      	ldr	r5, [r0, #0]
 8008b38:	b2a9      	uxth	r1, r5
 8008b3a:	fb02 8101 	mla	r1, r2, r1, r8
 8008b3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008b42:	0c2d      	lsrs	r5, r5, #16
 8008b44:	fb02 c505 	mla	r5, r2, r5, ip
 8008b48:	b289      	uxth	r1, r1
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008b50:	429e      	cmp	r6, r3
 8008b52:	f840 1b04 	str.w	r1, [r0], #4
 8008b56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008b5a:	dcec      	bgt.n	8008b36 <__multadd+0x12>
 8008b5c:	f1b8 0f00 	cmp.w	r8, #0
 8008b60:	d022      	beq.n	8008ba8 <__multadd+0x84>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	42b3      	cmp	r3, r6
 8008b66:	dc19      	bgt.n	8008b9c <__multadd+0x78>
 8008b68:	6861      	ldr	r1, [r4, #4]
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	f7ff ff77 	bl	8008a60 <_Balloc>
 8008b72:	4605      	mov	r5, r0
 8008b74:	b928      	cbnz	r0, 8008b82 <__multadd+0x5e>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <__multadd+0x8c>)
 8008b7a:	480e      	ldr	r0, [pc, #56]	; (8008bb4 <__multadd+0x90>)
 8008b7c:	21b5      	movs	r1, #181	; 0xb5
 8008b7e:	f000 fe77 	bl	8009870 <__assert_func>
 8008b82:	6922      	ldr	r2, [r4, #16]
 8008b84:	3202      	adds	r2, #2
 8008b86:	f104 010c 	add.w	r1, r4, #12
 8008b8a:	0092      	lsls	r2, r2, #2
 8008b8c:	300c      	adds	r0, #12
 8008b8e:	f7ff ff59 	bl	8008a44 <memcpy>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4638      	mov	r0, r7
 8008b96:	f7ff ffa3 	bl	8008ae0 <_Bfree>
 8008b9a:	462c      	mov	r4, r5
 8008b9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ba0:	3601      	adds	r6, #1
 8008ba2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008ba6:	6126      	str	r6, [r4, #16]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bae:	bf00      	nop
 8008bb0:	0800a714 	.word	0x0800a714
 8008bb4:	0800a7a4 	.word	0x0800a7a4

08008bb8 <__s2b>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	4615      	mov	r5, r2
 8008bc0:	461f      	mov	r7, r3
 8008bc2:	2209      	movs	r2, #9
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bcc:	2100      	movs	r1, #0
 8008bce:	2201      	movs	r2, #1
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	db09      	blt.n	8008be8 <__s2b+0x30>
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f7ff ff43 	bl	8008a60 <_Balloc>
 8008bda:	b940      	cbnz	r0, 8008bee <__s2b+0x36>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <__s2b+0x8c>)
 8008be0:	4819      	ldr	r0, [pc, #100]	; (8008c48 <__s2b+0x90>)
 8008be2:	21ce      	movs	r1, #206	; 0xce
 8008be4:	f000 fe44 	bl	8009870 <__assert_func>
 8008be8:	0052      	lsls	r2, r2, #1
 8008bea:	3101      	adds	r1, #1
 8008bec:	e7f0      	b.n	8008bd0 <__s2b+0x18>
 8008bee:	9b08      	ldr	r3, [sp, #32]
 8008bf0:	6143      	str	r3, [r0, #20]
 8008bf2:	2d09      	cmp	r5, #9
 8008bf4:	f04f 0301 	mov.w	r3, #1
 8008bf8:	6103      	str	r3, [r0, #16]
 8008bfa:	dd16      	ble.n	8008c2a <__s2b+0x72>
 8008bfc:	f104 0909 	add.w	r9, r4, #9
 8008c00:	46c8      	mov	r8, r9
 8008c02:	442c      	add	r4, r5
 8008c04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008c08:	4601      	mov	r1, r0
 8008c0a:	3b30      	subs	r3, #48	; 0x30
 8008c0c:	220a      	movs	r2, #10
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7ff ff88 	bl	8008b24 <__multadd>
 8008c14:	45a0      	cmp	r8, r4
 8008c16:	d1f5      	bne.n	8008c04 <__s2b+0x4c>
 8008c18:	f1a5 0408 	sub.w	r4, r5, #8
 8008c1c:	444c      	add	r4, r9
 8008c1e:	1b2d      	subs	r5, r5, r4
 8008c20:	1963      	adds	r3, r4, r5
 8008c22:	42bb      	cmp	r3, r7
 8008c24:	db04      	blt.n	8008c30 <__s2b+0x78>
 8008c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	340a      	adds	r4, #10
 8008c2c:	2509      	movs	r5, #9
 8008c2e:	e7f6      	b.n	8008c1e <__s2b+0x66>
 8008c30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c34:	4601      	mov	r1, r0
 8008c36:	3b30      	subs	r3, #48	; 0x30
 8008c38:	220a      	movs	r2, #10
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ff72 	bl	8008b24 <__multadd>
 8008c40:	e7ee      	b.n	8008c20 <__s2b+0x68>
 8008c42:	bf00      	nop
 8008c44:	0800a714 	.word	0x0800a714
 8008c48:	0800a7a4 	.word	0x0800a7a4

08008c4c <__hi0bits>:
 8008c4c:	0c03      	lsrs	r3, r0, #16
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	b9d3      	cbnz	r3, 8008c88 <__hi0bits+0x3c>
 8008c52:	0400      	lsls	r0, r0, #16
 8008c54:	2310      	movs	r3, #16
 8008c56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c5a:	bf04      	itt	eq
 8008c5c:	0200      	lsleq	r0, r0, #8
 8008c5e:	3308      	addeq	r3, #8
 8008c60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c64:	bf04      	itt	eq
 8008c66:	0100      	lsleq	r0, r0, #4
 8008c68:	3304      	addeq	r3, #4
 8008c6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c6e:	bf04      	itt	eq
 8008c70:	0080      	lsleq	r0, r0, #2
 8008c72:	3302      	addeq	r3, #2
 8008c74:	2800      	cmp	r0, #0
 8008c76:	db05      	blt.n	8008c84 <__hi0bits+0x38>
 8008c78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c7c:	f103 0301 	add.w	r3, r3, #1
 8008c80:	bf08      	it	eq
 8008c82:	2320      	moveq	r3, #32
 8008c84:	4618      	mov	r0, r3
 8008c86:	4770      	bx	lr
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e7e4      	b.n	8008c56 <__hi0bits+0xa>

08008c8c <__lo0bits>:
 8008c8c:	6803      	ldr	r3, [r0, #0]
 8008c8e:	f013 0207 	ands.w	r2, r3, #7
 8008c92:	4601      	mov	r1, r0
 8008c94:	d00b      	beq.n	8008cae <__lo0bits+0x22>
 8008c96:	07da      	lsls	r2, r3, #31
 8008c98:	d424      	bmi.n	8008ce4 <__lo0bits+0x58>
 8008c9a:	0798      	lsls	r0, r3, #30
 8008c9c:	bf49      	itett	mi
 8008c9e:	085b      	lsrmi	r3, r3, #1
 8008ca0:	089b      	lsrpl	r3, r3, #2
 8008ca2:	2001      	movmi	r0, #1
 8008ca4:	600b      	strmi	r3, [r1, #0]
 8008ca6:	bf5c      	itt	pl
 8008ca8:	600b      	strpl	r3, [r1, #0]
 8008caa:	2002      	movpl	r0, #2
 8008cac:	4770      	bx	lr
 8008cae:	b298      	uxth	r0, r3
 8008cb0:	b9b0      	cbnz	r0, 8008ce0 <__lo0bits+0x54>
 8008cb2:	0c1b      	lsrs	r3, r3, #16
 8008cb4:	2010      	movs	r0, #16
 8008cb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cba:	bf04      	itt	eq
 8008cbc:	0a1b      	lsreq	r3, r3, #8
 8008cbe:	3008      	addeq	r0, #8
 8008cc0:	071a      	lsls	r2, r3, #28
 8008cc2:	bf04      	itt	eq
 8008cc4:	091b      	lsreq	r3, r3, #4
 8008cc6:	3004      	addeq	r0, #4
 8008cc8:	079a      	lsls	r2, r3, #30
 8008cca:	bf04      	itt	eq
 8008ccc:	089b      	lsreq	r3, r3, #2
 8008cce:	3002      	addeq	r0, #2
 8008cd0:	07da      	lsls	r2, r3, #31
 8008cd2:	d403      	bmi.n	8008cdc <__lo0bits+0x50>
 8008cd4:	085b      	lsrs	r3, r3, #1
 8008cd6:	f100 0001 	add.w	r0, r0, #1
 8008cda:	d005      	beq.n	8008ce8 <__lo0bits+0x5c>
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	4770      	bx	lr
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	e7e8      	b.n	8008cb6 <__lo0bits+0x2a>
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	4770      	bx	lr
 8008ce8:	2020      	movs	r0, #32
 8008cea:	4770      	bx	lr

08008cec <__i2b>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	460c      	mov	r4, r1
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	f7ff feb5 	bl	8008a60 <_Balloc>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	b928      	cbnz	r0, 8008d06 <__i2b+0x1a>
 8008cfa:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <__i2b+0x24>)
 8008cfc:	4805      	ldr	r0, [pc, #20]	; (8008d14 <__i2b+0x28>)
 8008cfe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008d02:	f000 fdb5 	bl	8009870 <__assert_func>
 8008d06:	2301      	movs	r3, #1
 8008d08:	6144      	str	r4, [r0, #20]
 8008d0a:	6103      	str	r3, [r0, #16]
 8008d0c:	bd10      	pop	{r4, pc}
 8008d0e:	bf00      	nop
 8008d10:	0800a714 	.word	0x0800a714
 8008d14:	0800a7a4 	.word	0x0800a7a4

08008d18 <__multiply>:
 8008d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	690a      	ldr	r2, [r1, #16]
 8008d20:	6923      	ldr	r3, [r4, #16]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	bfb8      	it	lt
 8008d26:	460b      	movlt	r3, r1
 8008d28:	460d      	mov	r5, r1
 8008d2a:	bfbc      	itt	lt
 8008d2c:	4625      	movlt	r5, r4
 8008d2e:	461c      	movlt	r4, r3
 8008d30:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008d34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d38:	68ab      	ldr	r3, [r5, #8]
 8008d3a:	6869      	ldr	r1, [r5, #4]
 8008d3c:	eb0a 0709 	add.w	r7, sl, r9
 8008d40:	42bb      	cmp	r3, r7
 8008d42:	b085      	sub	sp, #20
 8008d44:	bfb8      	it	lt
 8008d46:	3101      	addlt	r1, #1
 8008d48:	f7ff fe8a 	bl	8008a60 <_Balloc>
 8008d4c:	b930      	cbnz	r0, 8008d5c <__multiply+0x44>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b42      	ldr	r3, [pc, #264]	; (8008e5c <__multiply+0x144>)
 8008d52:	4843      	ldr	r0, [pc, #268]	; (8008e60 <__multiply+0x148>)
 8008d54:	f240 115d 	movw	r1, #349	; 0x15d
 8008d58:	f000 fd8a 	bl	8009870 <__assert_func>
 8008d5c:	f100 0614 	add.w	r6, r0, #20
 8008d60:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008d64:	4633      	mov	r3, r6
 8008d66:	2200      	movs	r2, #0
 8008d68:	4543      	cmp	r3, r8
 8008d6a:	d31e      	bcc.n	8008daa <__multiply+0x92>
 8008d6c:	f105 0c14 	add.w	ip, r5, #20
 8008d70:	f104 0314 	add.w	r3, r4, #20
 8008d74:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008d78:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	ebac 0205 	sub.w	r2, ip, r5
 8008d82:	3a15      	subs	r2, #21
 8008d84:	f022 0203 	bic.w	r2, r2, #3
 8008d88:	3204      	adds	r2, #4
 8008d8a:	f105 0115 	add.w	r1, r5, #21
 8008d8e:	458c      	cmp	ip, r1
 8008d90:	bf38      	it	cc
 8008d92:	2204      	movcc	r2, #4
 8008d94:	9201      	str	r2, [sp, #4]
 8008d96:	9a02      	ldr	r2, [sp, #8]
 8008d98:	9303      	str	r3, [sp, #12]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d808      	bhi.n	8008db0 <__multiply+0x98>
 8008d9e:	2f00      	cmp	r7, #0
 8008da0:	dc55      	bgt.n	8008e4e <__multiply+0x136>
 8008da2:	6107      	str	r7, [r0, #16]
 8008da4:	b005      	add	sp, #20
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	f843 2b04 	str.w	r2, [r3], #4
 8008dae:	e7db      	b.n	8008d68 <__multiply+0x50>
 8008db0:	f8b3 a000 	ldrh.w	sl, [r3]
 8008db4:	f1ba 0f00 	cmp.w	sl, #0
 8008db8:	d020      	beq.n	8008dfc <__multiply+0xe4>
 8008dba:	f105 0e14 	add.w	lr, r5, #20
 8008dbe:	46b1      	mov	r9, r6
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008dc6:	f8d9 b000 	ldr.w	fp, [r9]
 8008dca:	b2a1      	uxth	r1, r4
 8008dcc:	fa1f fb8b 	uxth.w	fp, fp
 8008dd0:	fb0a b101 	mla	r1, sl, r1, fp
 8008dd4:	4411      	add	r1, r2
 8008dd6:	f8d9 2000 	ldr.w	r2, [r9]
 8008dda:	0c24      	lsrs	r4, r4, #16
 8008ddc:	0c12      	lsrs	r2, r2, #16
 8008dde:	fb0a 2404 	mla	r4, sl, r4, r2
 8008de2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008de6:	b289      	uxth	r1, r1
 8008de8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008dec:	45f4      	cmp	ip, lr
 8008dee:	f849 1b04 	str.w	r1, [r9], #4
 8008df2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008df6:	d8e4      	bhi.n	8008dc2 <__multiply+0xaa>
 8008df8:	9901      	ldr	r1, [sp, #4]
 8008dfa:	5072      	str	r2, [r6, r1]
 8008dfc:	9a03      	ldr	r2, [sp, #12]
 8008dfe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008e02:	3304      	adds	r3, #4
 8008e04:	f1b9 0f00 	cmp.w	r9, #0
 8008e08:	d01f      	beq.n	8008e4a <__multiply+0x132>
 8008e0a:	6834      	ldr	r4, [r6, #0]
 8008e0c:	f105 0114 	add.w	r1, r5, #20
 8008e10:	46b6      	mov	lr, r6
 8008e12:	f04f 0a00 	mov.w	sl, #0
 8008e16:	880a      	ldrh	r2, [r1, #0]
 8008e18:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008e1c:	fb09 b202 	mla	r2, r9, r2, fp
 8008e20:	4492      	add	sl, r2
 8008e22:	b2a4      	uxth	r4, r4
 8008e24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008e28:	f84e 4b04 	str.w	r4, [lr], #4
 8008e2c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008e30:	f8be 2000 	ldrh.w	r2, [lr]
 8008e34:	0c24      	lsrs	r4, r4, #16
 8008e36:	fb09 2404 	mla	r4, r9, r4, r2
 8008e3a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008e3e:	458c      	cmp	ip, r1
 8008e40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e44:	d8e7      	bhi.n	8008e16 <__multiply+0xfe>
 8008e46:	9a01      	ldr	r2, [sp, #4]
 8008e48:	50b4      	str	r4, [r6, r2]
 8008e4a:	3604      	adds	r6, #4
 8008e4c:	e7a3      	b.n	8008d96 <__multiply+0x7e>
 8008e4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1a5      	bne.n	8008da2 <__multiply+0x8a>
 8008e56:	3f01      	subs	r7, #1
 8008e58:	e7a1      	b.n	8008d9e <__multiply+0x86>
 8008e5a:	bf00      	nop
 8008e5c:	0800a714 	.word	0x0800a714
 8008e60:	0800a7a4 	.word	0x0800a7a4

08008e64 <__pow5mult>:
 8008e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	4615      	mov	r5, r2
 8008e6a:	f012 0203 	ands.w	r2, r2, #3
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	d007      	beq.n	8008e84 <__pow5mult+0x20>
 8008e74:	4c25      	ldr	r4, [pc, #148]	; (8008f0c <__pow5mult+0xa8>)
 8008e76:	3a01      	subs	r2, #1
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e7e:	f7ff fe51 	bl	8008b24 <__multadd>
 8008e82:	4607      	mov	r7, r0
 8008e84:	10ad      	asrs	r5, r5, #2
 8008e86:	d03d      	beq.n	8008f04 <__pow5mult+0xa0>
 8008e88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e8a:	b97c      	cbnz	r4, 8008eac <__pow5mult+0x48>
 8008e8c:	2010      	movs	r0, #16
 8008e8e:	f7ff fdbf 	bl	8008a10 <malloc>
 8008e92:	4602      	mov	r2, r0
 8008e94:	6270      	str	r0, [r6, #36]	; 0x24
 8008e96:	b928      	cbnz	r0, 8008ea4 <__pow5mult+0x40>
 8008e98:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <__pow5mult+0xac>)
 8008e9a:	481e      	ldr	r0, [pc, #120]	; (8008f14 <__pow5mult+0xb0>)
 8008e9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ea0:	f000 fce6 	bl	8009870 <__assert_func>
 8008ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ea8:	6004      	str	r4, [r0, #0]
 8008eaa:	60c4      	str	r4, [r0, #12]
 8008eac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008eb4:	b94c      	cbnz	r4, 8008eca <__pow5mult+0x66>
 8008eb6:	f240 2171 	movw	r1, #625	; 0x271
 8008eba:	4630      	mov	r0, r6
 8008ebc:	f7ff ff16 	bl	8008cec <__i2b>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	f04f 0900 	mov.w	r9, #0
 8008ece:	07eb      	lsls	r3, r5, #31
 8008ed0:	d50a      	bpl.n	8008ee8 <__pow5mult+0x84>
 8008ed2:	4639      	mov	r1, r7
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ff1e 	bl	8008d18 <__multiply>
 8008edc:	4639      	mov	r1, r7
 8008ede:	4680      	mov	r8, r0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7ff fdfd 	bl	8008ae0 <_Bfree>
 8008ee6:	4647      	mov	r7, r8
 8008ee8:	106d      	asrs	r5, r5, #1
 8008eea:	d00b      	beq.n	8008f04 <__pow5mult+0xa0>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	b938      	cbnz	r0, 8008f00 <__pow5mult+0x9c>
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f7ff ff0f 	bl	8008d18 <__multiply>
 8008efa:	6020      	str	r0, [r4, #0]
 8008efc:	f8c0 9000 	str.w	r9, [r0]
 8008f00:	4604      	mov	r4, r0
 8008f02:	e7e4      	b.n	8008ece <__pow5mult+0x6a>
 8008f04:	4638      	mov	r0, r7
 8008f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f0a:	bf00      	nop
 8008f0c:	0800a8f8 	.word	0x0800a8f8
 8008f10:	0800a69e 	.word	0x0800a69e
 8008f14:	0800a7a4 	.word	0x0800a7a4

08008f18 <__lshift>:
 8008f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	6849      	ldr	r1, [r1, #4]
 8008f20:	6923      	ldr	r3, [r4, #16]
 8008f22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f26:	68a3      	ldr	r3, [r4, #8]
 8008f28:	4607      	mov	r7, r0
 8008f2a:	4691      	mov	r9, r2
 8008f2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f30:	f108 0601 	add.w	r6, r8, #1
 8008f34:	42b3      	cmp	r3, r6
 8008f36:	db0b      	blt.n	8008f50 <__lshift+0x38>
 8008f38:	4638      	mov	r0, r7
 8008f3a:	f7ff fd91 	bl	8008a60 <_Balloc>
 8008f3e:	4605      	mov	r5, r0
 8008f40:	b948      	cbnz	r0, 8008f56 <__lshift+0x3e>
 8008f42:	4602      	mov	r2, r0
 8008f44:	4b28      	ldr	r3, [pc, #160]	; (8008fe8 <__lshift+0xd0>)
 8008f46:	4829      	ldr	r0, [pc, #164]	; (8008fec <__lshift+0xd4>)
 8008f48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f4c:	f000 fc90 	bl	8009870 <__assert_func>
 8008f50:	3101      	adds	r1, #1
 8008f52:	005b      	lsls	r3, r3, #1
 8008f54:	e7ee      	b.n	8008f34 <__lshift+0x1c>
 8008f56:	2300      	movs	r3, #0
 8008f58:	f100 0114 	add.w	r1, r0, #20
 8008f5c:	f100 0210 	add.w	r2, r0, #16
 8008f60:	4618      	mov	r0, r3
 8008f62:	4553      	cmp	r3, sl
 8008f64:	db33      	blt.n	8008fce <__lshift+0xb6>
 8008f66:	6920      	ldr	r0, [r4, #16]
 8008f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f6c:	f104 0314 	add.w	r3, r4, #20
 8008f70:	f019 091f 	ands.w	r9, r9, #31
 8008f74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f7c:	d02b      	beq.n	8008fd6 <__lshift+0xbe>
 8008f7e:	f1c9 0e20 	rsb	lr, r9, #32
 8008f82:	468a      	mov	sl, r1
 8008f84:	2200      	movs	r2, #0
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	fa00 f009 	lsl.w	r0, r0, r9
 8008f8c:	4302      	orrs	r2, r0
 8008f8e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f96:	459c      	cmp	ip, r3
 8008f98:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f9c:	d8f3      	bhi.n	8008f86 <__lshift+0x6e>
 8008f9e:	ebac 0304 	sub.w	r3, ip, r4
 8008fa2:	3b15      	subs	r3, #21
 8008fa4:	f023 0303 	bic.w	r3, r3, #3
 8008fa8:	3304      	adds	r3, #4
 8008faa:	f104 0015 	add.w	r0, r4, #21
 8008fae:	4584      	cmp	ip, r0
 8008fb0:	bf38      	it	cc
 8008fb2:	2304      	movcc	r3, #4
 8008fb4:	50ca      	str	r2, [r1, r3]
 8008fb6:	b10a      	cbz	r2, 8008fbc <__lshift+0xa4>
 8008fb8:	f108 0602 	add.w	r6, r8, #2
 8008fbc:	3e01      	subs	r6, #1
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	612e      	str	r6, [r5, #16]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	f7ff fd8c 	bl	8008ae0 <_Bfree>
 8008fc8:	4628      	mov	r0, r5
 8008fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fce:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	e7c5      	b.n	8008f62 <__lshift+0x4a>
 8008fd6:	3904      	subs	r1, #4
 8008fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fe0:	459c      	cmp	ip, r3
 8008fe2:	d8f9      	bhi.n	8008fd8 <__lshift+0xc0>
 8008fe4:	e7ea      	b.n	8008fbc <__lshift+0xa4>
 8008fe6:	bf00      	nop
 8008fe8:	0800a714 	.word	0x0800a714
 8008fec:	0800a7a4 	.word	0x0800a7a4

08008ff0 <__mcmp>:
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	6902      	ldr	r2, [r0, #16]
 8008ff4:	690c      	ldr	r4, [r1, #16]
 8008ff6:	1b12      	subs	r2, r2, r4
 8008ff8:	d10e      	bne.n	8009018 <__mcmp+0x28>
 8008ffa:	f100 0314 	add.w	r3, r0, #20
 8008ffe:	3114      	adds	r1, #20
 8009000:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009004:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009008:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800900c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009010:	42a5      	cmp	r5, r4
 8009012:	d003      	beq.n	800901c <__mcmp+0x2c>
 8009014:	d305      	bcc.n	8009022 <__mcmp+0x32>
 8009016:	2201      	movs	r2, #1
 8009018:	4610      	mov	r0, r2
 800901a:	bd30      	pop	{r4, r5, pc}
 800901c:	4283      	cmp	r3, r0
 800901e:	d3f3      	bcc.n	8009008 <__mcmp+0x18>
 8009020:	e7fa      	b.n	8009018 <__mcmp+0x28>
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	e7f7      	b.n	8009018 <__mcmp+0x28>

08009028 <__mdiff>:
 8009028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	4606      	mov	r6, r0
 8009030:	4611      	mov	r1, r2
 8009032:	4620      	mov	r0, r4
 8009034:	4617      	mov	r7, r2
 8009036:	f7ff ffdb 	bl	8008ff0 <__mcmp>
 800903a:	1e05      	subs	r5, r0, #0
 800903c:	d110      	bne.n	8009060 <__mdiff+0x38>
 800903e:	4629      	mov	r1, r5
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff fd0d 	bl	8008a60 <_Balloc>
 8009046:	b930      	cbnz	r0, 8009056 <__mdiff+0x2e>
 8009048:	4b39      	ldr	r3, [pc, #228]	; (8009130 <__mdiff+0x108>)
 800904a:	4602      	mov	r2, r0
 800904c:	f240 2132 	movw	r1, #562	; 0x232
 8009050:	4838      	ldr	r0, [pc, #224]	; (8009134 <__mdiff+0x10c>)
 8009052:	f000 fc0d 	bl	8009870 <__assert_func>
 8009056:	2301      	movs	r3, #1
 8009058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800905c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009060:	bfa4      	itt	ge
 8009062:	463b      	movge	r3, r7
 8009064:	4627      	movge	r7, r4
 8009066:	4630      	mov	r0, r6
 8009068:	6879      	ldr	r1, [r7, #4]
 800906a:	bfa6      	itte	ge
 800906c:	461c      	movge	r4, r3
 800906e:	2500      	movge	r5, #0
 8009070:	2501      	movlt	r5, #1
 8009072:	f7ff fcf5 	bl	8008a60 <_Balloc>
 8009076:	b920      	cbnz	r0, 8009082 <__mdiff+0x5a>
 8009078:	4b2d      	ldr	r3, [pc, #180]	; (8009130 <__mdiff+0x108>)
 800907a:	4602      	mov	r2, r0
 800907c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009080:	e7e6      	b.n	8009050 <__mdiff+0x28>
 8009082:	693e      	ldr	r6, [r7, #16]
 8009084:	60c5      	str	r5, [r0, #12]
 8009086:	6925      	ldr	r5, [r4, #16]
 8009088:	f107 0114 	add.w	r1, r7, #20
 800908c:	f104 0914 	add.w	r9, r4, #20
 8009090:	f100 0e14 	add.w	lr, r0, #20
 8009094:	f107 0210 	add.w	r2, r7, #16
 8009098:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800909c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80090a0:	46f2      	mov	sl, lr
 80090a2:	2700      	movs	r7, #0
 80090a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80090a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80090ac:	fa1f f883 	uxth.w	r8, r3
 80090b0:	fa17 f78b 	uxtah	r7, r7, fp
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	eba7 0808 	sub.w	r8, r7, r8
 80090ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090c2:	fa1f f888 	uxth.w	r8, r8
 80090c6:	141f      	asrs	r7, r3, #16
 80090c8:	454d      	cmp	r5, r9
 80090ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090ce:	f84a 3b04 	str.w	r3, [sl], #4
 80090d2:	d8e7      	bhi.n	80090a4 <__mdiff+0x7c>
 80090d4:	1b2b      	subs	r3, r5, r4
 80090d6:	3b15      	subs	r3, #21
 80090d8:	f023 0303 	bic.w	r3, r3, #3
 80090dc:	3304      	adds	r3, #4
 80090de:	3415      	adds	r4, #21
 80090e0:	42a5      	cmp	r5, r4
 80090e2:	bf38      	it	cc
 80090e4:	2304      	movcc	r3, #4
 80090e6:	4419      	add	r1, r3
 80090e8:	4473      	add	r3, lr
 80090ea:	469e      	mov	lr, r3
 80090ec:	460d      	mov	r5, r1
 80090ee:	4565      	cmp	r5, ip
 80090f0:	d30e      	bcc.n	8009110 <__mdiff+0xe8>
 80090f2:	f10c 0203 	add.w	r2, ip, #3
 80090f6:	1a52      	subs	r2, r2, r1
 80090f8:	f022 0203 	bic.w	r2, r2, #3
 80090fc:	3903      	subs	r1, #3
 80090fe:	458c      	cmp	ip, r1
 8009100:	bf38      	it	cc
 8009102:	2200      	movcc	r2, #0
 8009104:	441a      	add	r2, r3
 8009106:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800910a:	b17b      	cbz	r3, 800912c <__mdiff+0x104>
 800910c:	6106      	str	r6, [r0, #16]
 800910e:	e7a5      	b.n	800905c <__mdiff+0x34>
 8009110:	f855 8b04 	ldr.w	r8, [r5], #4
 8009114:	fa17 f488 	uxtah	r4, r7, r8
 8009118:	1422      	asrs	r2, r4, #16
 800911a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800911e:	b2a4      	uxth	r4, r4
 8009120:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009124:	f84e 4b04 	str.w	r4, [lr], #4
 8009128:	1417      	asrs	r7, r2, #16
 800912a:	e7e0      	b.n	80090ee <__mdiff+0xc6>
 800912c:	3e01      	subs	r6, #1
 800912e:	e7ea      	b.n	8009106 <__mdiff+0xde>
 8009130:	0800a714 	.word	0x0800a714
 8009134:	0800a7a4 	.word	0x0800a7a4

08009138 <__ulp>:
 8009138:	b082      	sub	sp, #8
 800913a:	ed8d 0b00 	vstr	d0, [sp]
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	4912      	ldr	r1, [pc, #72]	; (800918c <__ulp+0x54>)
 8009142:	4019      	ands	r1, r3
 8009144:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009148:	2900      	cmp	r1, #0
 800914a:	dd05      	ble.n	8009158 <__ulp+0x20>
 800914c:	2200      	movs	r2, #0
 800914e:	460b      	mov	r3, r1
 8009150:	ec43 2b10 	vmov	d0, r2, r3
 8009154:	b002      	add	sp, #8
 8009156:	4770      	bx	lr
 8009158:	4249      	negs	r1, r1
 800915a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800915e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009162:	f04f 0200 	mov.w	r2, #0
 8009166:	f04f 0300 	mov.w	r3, #0
 800916a:	da04      	bge.n	8009176 <__ulp+0x3e>
 800916c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009170:	fa41 f300 	asr.w	r3, r1, r0
 8009174:	e7ec      	b.n	8009150 <__ulp+0x18>
 8009176:	f1a0 0114 	sub.w	r1, r0, #20
 800917a:	291e      	cmp	r1, #30
 800917c:	bfda      	itte	le
 800917e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009182:	fa20 f101 	lsrle.w	r1, r0, r1
 8009186:	2101      	movgt	r1, #1
 8009188:	460a      	mov	r2, r1
 800918a:	e7e1      	b.n	8009150 <__ulp+0x18>
 800918c:	7ff00000 	.word	0x7ff00000

08009190 <__b2d>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	6905      	ldr	r5, [r0, #16]
 8009194:	f100 0714 	add.w	r7, r0, #20
 8009198:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800919c:	1f2e      	subs	r6, r5, #4
 800919e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80091a2:	4620      	mov	r0, r4
 80091a4:	f7ff fd52 	bl	8008c4c <__hi0bits>
 80091a8:	f1c0 0320 	rsb	r3, r0, #32
 80091ac:	280a      	cmp	r0, #10
 80091ae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800922c <__b2d+0x9c>
 80091b2:	600b      	str	r3, [r1, #0]
 80091b4:	dc14      	bgt.n	80091e0 <__b2d+0x50>
 80091b6:	f1c0 0e0b 	rsb	lr, r0, #11
 80091ba:	fa24 f10e 	lsr.w	r1, r4, lr
 80091be:	42b7      	cmp	r7, r6
 80091c0:	ea41 030c 	orr.w	r3, r1, ip
 80091c4:	bf34      	ite	cc
 80091c6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091ca:	2100      	movcs	r1, #0
 80091cc:	3015      	adds	r0, #21
 80091ce:	fa04 f000 	lsl.w	r0, r4, r0
 80091d2:	fa21 f10e 	lsr.w	r1, r1, lr
 80091d6:	ea40 0201 	orr.w	r2, r0, r1
 80091da:	ec43 2b10 	vmov	d0, r2, r3
 80091de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091e0:	42b7      	cmp	r7, r6
 80091e2:	bf3a      	itte	cc
 80091e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091e8:	f1a5 0608 	subcc.w	r6, r5, #8
 80091ec:	2100      	movcs	r1, #0
 80091ee:	380b      	subs	r0, #11
 80091f0:	d017      	beq.n	8009222 <__b2d+0x92>
 80091f2:	f1c0 0c20 	rsb	ip, r0, #32
 80091f6:	fa04 f500 	lsl.w	r5, r4, r0
 80091fa:	42be      	cmp	r6, r7
 80091fc:	fa21 f40c 	lsr.w	r4, r1, ip
 8009200:	ea45 0504 	orr.w	r5, r5, r4
 8009204:	bf8c      	ite	hi
 8009206:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800920a:	2400      	movls	r4, #0
 800920c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009210:	fa01 f000 	lsl.w	r0, r1, r0
 8009214:	fa24 f40c 	lsr.w	r4, r4, ip
 8009218:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800921c:	ea40 0204 	orr.w	r2, r0, r4
 8009220:	e7db      	b.n	80091da <__b2d+0x4a>
 8009222:	ea44 030c 	orr.w	r3, r4, ip
 8009226:	460a      	mov	r2, r1
 8009228:	e7d7      	b.n	80091da <__b2d+0x4a>
 800922a:	bf00      	nop
 800922c:	3ff00000 	.word	0x3ff00000

08009230 <__d2b>:
 8009230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009234:	4689      	mov	r9, r1
 8009236:	2101      	movs	r1, #1
 8009238:	ec57 6b10 	vmov	r6, r7, d0
 800923c:	4690      	mov	r8, r2
 800923e:	f7ff fc0f 	bl	8008a60 <_Balloc>
 8009242:	4604      	mov	r4, r0
 8009244:	b930      	cbnz	r0, 8009254 <__d2b+0x24>
 8009246:	4602      	mov	r2, r0
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <__d2b+0xb0>)
 800924a:	4826      	ldr	r0, [pc, #152]	; (80092e4 <__d2b+0xb4>)
 800924c:	f240 310a 	movw	r1, #778	; 0x30a
 8009250:	f000 fb0e 	bl	8009870 <__assert_func>
 8009254:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800925c:	bb35      	cbnz	r5, 80092ac <__d2b+0x7c>
 800925e:	2e00      	cmp	r6, #0
 8009260:	9301      	str	r3, [sp, #4]
 8009262:	d028      	beq.n	80092b6 <__d2b+0x86>
 8009264:	4668      	mov	r0, sp
 8009266:	9600      	str	r6, [sp, #0]
 8009268:	f7ff fd10 	bl	8008c8c <__lo0bits>
 800926c:	9900      	ldr	r1, [sp, #0]
 800926e:	b300      	cbz	r0, 80092b2 <__d2b+0x82>
 8009270:	9a01      	ldr	r2, [sp, #4]
 8009272:	f1c0 0320 	rsb	r3, r0, #32
 8009276:	fa02 f303 	lsl.w	r3, r2, r3
 800927a:	430b      	orrs	r3, r1
 800927c:	40c2      	lsrs	r2, r0
 800927e:	6163      	str	r3, [r4, #20]
 8009280:	9201      	str	r2, [sp, #4]
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	61a3      	str	r3, [r4, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bf14      	ite	ne
 800928a:	2202      	movne	r2, #2
 800928c:	2201      	moveq	r2, #1
 800928e:	6122      	str	r2, [r4, #16]
 8009290:	b1d5      	cbz	r5, 80092c8 <__d2b+0x98>
 8009292:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009296:	4405      	add	r5, r0
 8009298:	f8c9 5000 	str.w	r5, [r9]
 800929c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092a0:	f8c8 0000 	str.w	r0, [r8]
 80092a4:	4620      	mov	r0, r4
 80092a6:	b003      	add	sp, #12
 80092a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b0:	e7d5      	b.n	800925e <__d2b+0x2e>
 80092b2:	6161      	str	r1, [r4, #20]
 80092b4:	e7e5      	b.n	8009282 <__d2b+0x52>
 80092b6:	a801      	add	r0, sp, #4
 80092b8:	f7ff fce8 	bl	8008c8c <__lo0bits>
 80092bc:	9b01      	ldr	r3, [sp, #4]
 80092be:	6163      	str	r3, [r4, #20]
 80092c0:	2201      	movs	r2, #1
 80092c2:	6122      	str	r2, [r4, #16]
 80092c4:	3020      	adds	r0, #32
 80092c6:	e7e3      	b.n	8009290 <__d2b+0x60>
 80092c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092d0:	f8c9 0000 	str.w	r0, [r9]
 80092d4:	6918      	ldr	r0, [r3, #16]
 80092d6:	f7ff fcb9 	bl	8008c4c <__hi0bits>
 80092da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092de:	e7df      	b.n	80092a0 <__d2b+0x70>
 80092e0:	0800a714 	.word	0x0800a714
 80092e4:	0800a7a4 	.word	0x0800a7a4

080092e8 <__ratio>:
 80092e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ec:	4688      	mov	r8, r1
 80092ee:	4669      	mov	r1, sp
 80092f0:	4681      	mov	r9, r0
 80092f2:	f7ff ff4d 	bl	8009190 <__b2d>
 80092f6:	a901      	add	r1, sp, #4
 80092f8:	4640      	mov	r0, r8
 80092fa:	ec55 4b10 	vmov	r4, r5, d0
 80092fe:	f7ff ff47 	bl	8009190 <__b2d>
 8009302:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009306:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800930a:	eba3 0c02 	sub.w	ip, r3, r2
 800930e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009318:	ec51 0b10 	vmov	r0, r1, d0
 800931c:	2b00      	cmp	r3, #0
 800931e:	bfd6      	itet	le
 8009320:	460a      	movle	r2, r1
 8009322:	462a      	movgt	r2, r5
 8009324:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009328:	468b      	mov	fp, r1
 800932a:	462f      	mov	r7, r5
 800932c:	bfd4      	ite	le
 800932e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009332:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009336:	4620      	mov	r0, r4
 8009338:	ee10 2a10 	vmov	r2, s0
 800933c:	465b      	mov	r3, fp
 800933e:	4639      	mov	r1, r7
 8009340:	f7f7 fa8c 	bl	800085c <__aeabi_ddiv>
 8009344:	ec41 0b10 	vmov	d0, r0, r1
 8009348:	b003      	add	sp, #12
 800934a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800934e <__copybits>:
 800934e:	3901      	subs	r1, #1
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	1149      	asrs	r1, r1, #5
 8009354:	6914      	ldr	r4, [r2, #16]
 8009356:	3101      	adds	r1, #1
 8009358:	f102 0314 	add.w	r3, r2, #20
 800935c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009360:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009364:	1f05      	subs	r5, r0, #4
 8009366:	42a3      	cmp	r3, r4
 8009368:	d30c      	bcc.n	8009384 <__copybits+0x36>
 800936a:	1aa3      	subs	r3, r4, r2
 800936c:	3b11      	subs	r3, #17
 800936e:	f023 0303 	bic.w	r3, r3, #3
 8009372:	3211      	adds	r2, #17
 8009374:	42a2      	cmp	r2, r4
 8009376:	bf88      	it	hi
 8009378:	2300      	movhi	r3, #0
 800937a:	4418      	add	r0, r3
 800937c:	2300      	movs	r3, #0
 800937e:	4288      	cmp	r0, r1
 8009380:	d305      	bcc.n	800938e <__copybits+0x40>
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	f853 6b04 	ldr.w	r6, [r3], #4
 8009388:	f845 6f04 	str.w	r6, [r5, #4]!
 800938c:	e7eb      	b.n	8009366 <__copybits+0x18>
 800938e:	f840 3b04 	str.w	r3, [r0], #4
 8009392:	e7f4      	b.n	800937e <__copybits+0x30>

08009394 <__any_on>:
 8009394:	f100 0214 	add.w	r2, r0, #20
 8009398:	6900      	ldr	r0, [r0, #16]
 800939a:	114b      	asrs	r3, r1, #5
 800939c:	4298      	cmp	r0, r3
 800939e:	b510      	push	{r4, lr}
 80093a0:	db11      	blt.n	80093c6 <__any_on+0x32>
 80093a2:	dd0a      	ble.n	80093ba <__any_on+0x26>
 80093a4:	f011 011f 	ands.w	r1, r1, #31
 80093a8:	d007      	beq.n	80093ba <__any_on+0x26>
 80093aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80093ae:	fa24 f001 	lsr.w	r0, r4, r1
 80093b2:	fa00 f101 	lsl.w	r1, r0, r1
 80093b6:	428c      	cmp	r4, r1
 80093b8:	d10b      	bne.n	80093d2 <__any_on+0x3e>
 80093ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80093be:	4293      	cmp	r3, r2
 80093c0:	d803      	bhi.n	80093ca <__any_on+0x36>
 80093c2:	2000      	movs	r0, #0
 80093c4:	bd10      	pop	{r4, pc}
 80093c6:	4603      	mov	r3, r0
 80093c8:	e7f7      	b.n	80093ba <__any_on+0x26>
 80093ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d0f5      	beq.n	80093be <__any_on+0x2a>
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7f6      	b.n	80093c4 <__any_on+0x30>

080093d6 <_calloc_r>:
 80093d6:	b513      	push	{r0, r1, r4, lr}
 80093d8:	434a      	muls	r2, r1
 80093da:	4611      	mov	r1, r2
 80093dc:	9201      	str	r2, [sp, #4]
 80093de:	f000 f859 	bl	8009494 <_malloc_r>
 80093e2:	4604      	mov	r4, r0
 80093e4:	b118      	cbz	r0, 80093ee <_calloc_r+0x18>
 80093e6:	9a01      	ldr	r2, [sp, #4]
 80093e8:	2100      	movs	r1, #0
 80093ea:	f7fc fba9 	bl	8005b40 <memset>
 80093ee:	4620      	mov	r0, r4
 80093f0:	b002      	add	sp, #8
 80093f2:	bd10      	pop	{r4, pc}

080093f4 <_free_r>:
 80093f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d048      	beq.n	800948c <_free_r+0x98>
 80093fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093fe:	9001      	str	r0, [sp, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f1a1 0404 	sub.w	r4, r1, #4
 8009406:	bfb8      	it	lt
 8009408:	18e4      	addlt	r4, r4, r3
 800940a:	f000 fa7b 	bl	8009904 <__malloc_lock>
 800940e:	4a20      	ldr	r2, [pc, #128]	; (8009490 <_free_r+0x9c>)
 8009410:	9801      	ldr	r0, [sp, #4]
 8009412:	6813      	ldr	r3, [r2, #0]
 8009414:	4615      	mov	r5, r2
 8009416:	b933      	cbnz	r3, 8009426 <_free_r+0x32>
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	6014      	str	r4, [r2, #0]
 800941c:	b003      	add	sp, #12
 800941e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009422:	f000 ba75 	b.w	8009910 <__malloc_unlock>
 8009426:	42a3      	cmp	r3, r4
 8009428:	d90b      	bls.n	8009442 <_free_r+0x4e>
 800942a:	6821      	ldr	r1, [r4, #0]
 800942c:	1862      	adds	r2, r4, r1
 800942e:	4293      	cmp	r3, r2
 8009430:	bf04      	itt	eq
 8009432:	681a      	ldreq	r2, [r3, #0]
 8009434:	685b      	ldreq	r3, [r3, #4]
 8009436:	6063      	str	r3, [r4, #4]
 8009438:	bf04      	itt	eq
 800943a:	1852      	addeq	r2, r2, r1
 800943c:	6022      	streq	r2, [r4, #0]
 800943e:	602c      	str	r4, [r5, #0]
 8009440:	e7ec      	b.n	800941c <_free_r+0x28>
 8009442:	461a      	mov	r2, r3
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	b10b      	cbz	r3, 800944c <_free_r+0x58>
 8009448:	42a3      	cmp	r3, r4
 800944a:	d9fa      	bls.n	8009442 <_free_r+0x4e>
 800944c:	6811      	ldr	r1, [r2, #0]
 800944e:	1855      	adds	r5, r2, r1
 8009450:	42a5      	cmp	r5, r4
 8009452:	d10b      	bne.n	800946c <_free_r+0x78>
 8009454:	6824      	ldr	r4, [r4, #0]
 8009456:	4421      	add	r1, r4
 8009458:	1854      	adds	r4, r2, r1
 800945a:	42a3      	cmp	r3, r4
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	d1dd      	bne.n	800941c <_free_r+0x28>
 8009460:	681c      	ldr	r4, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	6053      	str	r3, [r2, #4]
 8009466:	4421      	add	r1, r4
 8009468:	6011      	str	r1, [r2, #0]
 800946a:	e7d7      	b.n	800941c <_free_r+0x28>
 800946c:	d902      	bls.n	8009474 <_free_r+0x80>
 800946e:	230c      	movs	r3, #12
 8009470:	6003      	str	r3, [r0, #0]
 8009472:	e7d3      	b.n	800941c <_free_r+0x28>
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	1961      	adds	r1, r4, r5
 8009478:	428b      	cmp	r3, r1
 800947a:	bf04      	itt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	bf04      	itt	eq
 8009484:	1949      	addeq	r1, r1, r5
 8009486:	6021      	streq	r1, [r4, #0]
 8009488:	6054      	str	r4, [r2, #4]
 800948a:	e7c7      	b.n	800941c <_free_r+0x28>
 800948c:	b003      	add	sp, #12
 800948e:	bd30      	pop	{r4, r5, pc}
 8009490:	2000024c 	.word	0x2000024c

08009494 <_malloc_r>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	1ccd      	adds	r5, r1, #3
 8009498:	f025 0503 	bic.w	r5, r5, #3
 800949c:	3508      	adds	r5, #8
 800949e:	2d0c      	cmp	r5, #12
 80094a0:	bf38      	it	cc
 80094a2:	250c      	movcc	r5, #12
 80094a4:	2d00      	cmp	r5, #0
 80094a6:	4606      	mov	r6, r0
 80094a8:	db01      	blt.n	80094ae <_malloc_r+0x1a>
 80094aa:	42a9      	cmp	r1, r5
 80094ac:	d903      	bls.n	80094b6 <_malloc_r+0x22>
 80094ae:	230c      	movs	r3, #12
 80094b0:	6033      	str	r3, [r6, #0]
 80094b2:	2000      	movs	r0, #0
 80094b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094b6:	f000 fa25 	bl	8009904 <__malloc_lock>
 80094ba:	4921      	ldr	r1, [pc, #132]	; (8009540 <_malloc_r+0xac>)
 80094bc:	680a      	ldr	r2, [r1, #0]
 80094be:	4614      	mov	r4, r2
 80094c0:	b99c      	cbnz	r4, 80094ea <_malloc_r+0x56>
 80094c2:	4f20      	ldr	r7, [pc, #128]	; (8009544 <_malloc_r+0xb0>)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	b923      	cbnz	r3, 80094d2 <_malloc_r+0x3e>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 f9a0 	bl	8009810 <_sbrk_r>
 80094d0:	6038      	str	r0, [r7, #0]
 80094d2:	4629      	mov	r1, r5
 80094d4:	4630      	mov	r0, r6
 80094d6:	f000 f99b 	bl	8009810 <_sbrk_r>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d123      	bne.n	8009526 <_malloc_r+0x92>
 80094de:	230c      	movs	r3, #12
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 fa14 	bl	8009910 <__malloc_unlock>
 80094e8:	e7e3      	b.n	80094b2 <_malloc_r+0x1e>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	1b5b      	subs	r3, r3, r5
 80094ee:	d417      	bmi.n	8009520 <_malloc_r+0x8c>
 80094f0:	2b0b      	cmp	r3, #11
 80094f2:	d903      	bls.n	80094fc <_malloc_r+0x68>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	441c      	add	r4, r3
 80094f8:	6025      	str	r5, [r4, #0]
 80094fa:	e004      	b.n	8009506 <_malloc_r+0x72>
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	42a2      	cmp	r2, r4
 8009500:	bf0c      	ite	eq
 8009502:	600b      	streq	r3, [r1, #0]
 8009504:	6053      	strne	r3, [r2, #4]
 8009506:	4630      	mov	r0, r6
 8009508:	f000 fa02 	bl	8009910 <__malloc_unlock>
 800950c:	f104 000b 	add.w	r0, r4, #11
 8009510:	1d23      	adds	r3, r4, #4
 8009512:	f020 0007 	bic.w	r0, r0, #7
 8009516:	1ac2      	subs	r2, r0, r3
 8009518:	d0cc      	beq.n	80094b4 <_malloc_r+0x20>
 800951a:	1a1b      	subs	r3, r3, r0
 800951c:	50a3      	str	r3, [r4, r2]
 800951e:	e7c9      	b.n	80094b4 <_malloc_r+0x20>
 8009520:	4622      	mov	r2, r4
 8009522:	6864      	ldr	r4, [r4, #4]
 8009524:	e7cc      	b.n	80094c0 <_malloc_r+0x2c>
 8009526:	1cc4      	adds	r4, r0, #3
 8009528:	f024 0403 	bic.w	r4, r4, #3
 800952c:	42a0      	cmp	r0, r4
 800952e:	d0e3      	beq.n	80094f8 <_malloc_r+0x64>
 8009530:	1a21      	subs	r1, r4, r0
 8009532:	4630      	mov	r0, r6
 8009534:	f000 f96c 	bl	8009810 <_sbrk_r>
 8009538:	3001      	adds	r0, #1
 800953a:	d1dd      	bne.n	80094f8 <_malloc_r+0x64>
 800953c:	e7cf      	b.n	80094de <_malloc_r+0x4a>
 800953e:	bf00      	nop
 8009540:	2000024c 	.word	0x2000024c
 8009544:	20000250 	.word	0x20000250

08009548 <__ssputs_r>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	688e      	ldr	r6, [r1, #8]
 800954e:	429e      	cmp	r6, r3
 8009550:	4682      	mov	sl, r0
 8009552:	460c      	mov	r4, r1
 8009554:	4690      	mov	r8, r2
 8009556:	461f      	mov	r7, r3
 8009558:	d838      	bhi.n	80095cc <__ssputs_r+0x84>
 800955a:	898a      	ldrh	r2, [r1, #12]
 800955c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009560:	d032      	beq.n	80095c8 <__ssputs_r+0x80>
 8009562:	6825      	ldr	r5, [r4, #0]
 8009564:	6909      	ldr	r1, [r1, #16]
 8009566:	eba5 0901 	sub.w	r9, r5, r1
 800956a:	6965      	ldr	r5, [r4, #20]
 800956c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009574:	3301      	adds	r3, #1
 8009576:	444b      	add	r3, r9
 8009578:	106d      	asrs	r5, r5, #1
 800957a:	429d      	cmp	r5, r3
 800957c:	bf38      	it	cc
 800957e:	461d      	movcc	r5, r3
 8009580:	0553      	lsls	r3, r2, #21
 8009582:	d531      	bpl.n	80095e8 <__ssputs_r+0xa0>
 8009584:	4629      	mov	r1, r5
 8009586:	f7ff ff85 	bl	8009494 <_malloc_r>
 800958a:	4606      	mov	r6, r0
 800958c:	b950      	cbnz	r0, 80095a4 <__ssputs_r+0x5c>
 800958e:	230c      	movs	r3, #12
 8009590:	f8ca 3000 	str.w	r3, [sl]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	f04f 30ff 	mov.w	r0, #4294967295
 80095a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a4:	6921      	ldr	r1, [r4, #16]
 80095a6:	464a      	mov	r2, r9
 80095a8:	f7ff fa4c 	bl	8008a44 <memcpy>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	6126      	str	r6, [r4, #16]
 80095ba:	6165      	str	r5, [r4, #20]
 80095bc:	444e      	add	r6, r9
 80095be:	eba5 0509 	sub.w	r5, r5, r9
 80095c2:	6026      	str	r6, [r4, #0]
 80095c4:	60a5      	str	r5, [r4, #8]
 80095c6:	463e      	mov	r6, r7
 80095c8:	42be      	cmp	r6, r7
 80095ca:	d900      	bls.n	80095ce <__ssputs_r+0x86>
 80095cc:	463e      	mov	r6, r7
 80095ce:	4632      	mov	r2, r6
 80095d0:	6820      	ldr	r0, [r4, #0]
 80095d2:	4641      	mov	r1, r8
 80095d4:	f000 f97c 	bl	80098d0 <memmove>
 80095d8:	68a3      	ldr	r3, [r4, #8]
 80095da:	6822      	ldr	r2, [r4, #0]
 80095dc:	1b9b      	subs	r3, r3, r6
 80095de:	4432      	add	r2, r6
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6022      	str	r2, [r4, #0]
 80095e4:	2000      	movs	r0, #0
 80095e6:	e7db      	b.n	80095a0 <__ssputs_r+0x58>
 80095e8:	462a      	mov	r2, r5
 80095ea:	f000 f997 	bl	800991c <_realloc_r>
 80095ee:	4606      	mov	r6, r0
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d1e1      	bne.n	80095b8 <__ssputs_r+0x70>
 80095f4:	6921      	ldr	r1, [r4, #16]
 80095f6:	4650      	mov	r0, sl
 80095f8:	f7ff fefc 	bl	80093f4 <_free_r>
 80095fc:	e7c7      	b.n	800958e <__ssputs_r+0x46>
	...

08009600 <_svfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4698      	mov	r8, r3
 8009606:	898b      	ldrh	r3, [r1, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	b09d      	sub	sp, #116	; 0x74
 800960c:	4607      	mov	r7, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4614      	mov	r4, r2
 8009612:	d50e      	bpl.n	8009632 <_svfiprintf_r+0x32>
 8009614:	690b      	ldr	r3, [r1, #16]
 8009616:	b963      	cbnz	r3, 8009632 <_svfiprintf_r+0x32>
 8009618:	2140      	movs	r1, #64	; 0x40
 800961a:	f7ff ff3b 	bl	8009494 <_malloc_r>
 800961e:	6028      	str	r0, [r5, #0]
 8009620:	6128      	str	r0, [r5, #16]
 8009622:	b920      	cbnz	r0, 800962e <_svfiprintf_r+0x2e>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e0d1      	b.n	80097d2 <_svfiprintf_r+0x1d2>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	616b      	str	r3, [r5, #20]
 8009632:	2300      	movs	r3, #0
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	2320      	movs	r3, #32
 8009638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009640:	2330      	movs	r3, #48	; 0x30
 8009642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097ec <_svfiprintf_r+0x1ec>
 8009646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964a:	f04f 0901 	mov.w	r9, #1
 800964e:	4623      	mov	r3, r4
 8009650:	469a      	mov	sl, r3
 8009652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009656:	b10a      	cbz	r2, 800965c <_svfiprintf_r+0x5c>
 8009658:	2a25      	cmp	r2, #37	; 0x25
 800965a:	d1f9      	bne.n	8009650 <_svfiprintf_r+0x50>
 800965c:	ebba 0b04 	subs.w	fp, sl, r4
 8009660:	d00b      	beq.n	800967a <_svfiprintf_r+0x7a>
 8009662:	465b      	mov	r3, fp
 8009664:	4622      	mov	r2, r4
 8009666:	4629      	mov	r1, r5
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff ff6d 	bl	8009548 <__ssputs_r>
 800966e:	3001      	adds	r0, #1
 8009670:	f000 80aa 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009676:	445a      	add	r2, fp
 8009678:	9209      	str	r2, [sp, #36]	; 0x24
 800967a:	f89a 3000 	ldrb.w	r3, [sl]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80a2 	beq.w	80097c8 <_svfiprintf_r+0x1c8>
 8009684:	2300      	movs	r3, #0
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968e:	f10a 0a01 	add.w	sl, sl, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969a:	931a      	str	r3, [sp, #104]	; 0x68
 800969c:	4654      	mov	r4, sl
 800969e:	2205      	movs	r2, #5
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	4851      	ldr	r0, [pc, #324]	; (80097ec <_svfiprintf_r+0x1ec>)
 80096a6:	f7f6 fda3 	bl	80001f0 <memchr>
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	b9d8      	cbnz	r0, 80096e6 <_svfiprintf_r+0xe6>
 80096ae:	06d0      	lsls	r0, r2, #27
 80096b0:	bf44      	itt	mi
 80096b2:	2320      	movmi	r3, #32
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b8:	0711      	lsls	r1, r2, #28
 80096ba:	bf44      	itt	mi
 80096bc:	232b      	movmi	r3, #43	; 0x2b
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b2a      	cmp	r3, #42	; 0x2a
 80096c8:	d015      	beq.n	80096f6 <_svfiprintf_r+0xf6>
 80096ca:	9a07      	ldr	r2, [sp, #28]
 80096cc:	4654      	mov	r4, sl
 80096ce:	2000      	movs	r0, #0
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4621      	mov	r1, r4
 80096d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096da:	3b30      	subs	r3, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d94e      	bls.n	800977e <_svfiprintf_r+0x17e>
 80096e0:	b1b0      	cbz	r0, 8009710 <_svfiprintf_r+0x110>
 80096e2:	9207      	str	r2, [sp, #28]
 80096e4:	e014      	b.n	8009710 <_svfiprintf_r+0x110>
 80096e6:	eba0 0308 	sub.w	r3, r0, r8
 80096ea:	fa09 f303 	lsl.w	r3, r9, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	46a2      	mov	sl, r4
 80096f4:	e7d2      	b.n	800969c <_svfiprintf_r+0x9c>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	1d19      	adds	r1, r3, #4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	9103      	str	r1, [sp, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbb      	ittet	lt
 8009702:	425b      	neglt	r3, r3
 8009704:	f042 0202 	orrlt.w	r2, r2, #2
 8009708:	9307      	strge	r3, [sp, #28]
 800970a:	9307      	strlt	r3, [sp, #28]
 800970c:	bfb8      	it	lt
 800970e:	9204      	strlt	r2, [sp, #16]
 8009710:	7823      	ldrb	r3, [r4, #0]
 8009712:	2b2e      	cmp	r3, #46	; 0x2e
 8009714:	d10c      	bne.n	8009730 <_svfiprintf_r+0x130>
 8009716:	7863      	ldrb	r3, [r4, #1]
 8009718:	2b2a      	cmp	r3, #42	; 0x2a
 800971a:	d135      	bne.n	8009788 <_svfiprintf_r+0x188>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9203      	str	r2, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfb8      	it	lt
 8009728:	f04f 33ff 	movlt.w	r3, #4294967295
 800972c:	3402      	adds	r4, #2
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097fc <_svfiprintf_r+0x1fc>
 8009734:	7821      	ldrb	r1, [r4, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	4650      	mov	r0, sl
 800973a:	f7f6 fd59 	bl	80001f0 <memchr>
 800973e:	b140      	cbz	r0, 8009752 <_svfiprintf_r+0x152>
 8009740:	2340      	movs	r3, #64	; 0x40
 8009742:	eba0 000a 	sub.w	r0, r0, sl
 8009746:	fa03 f000 	lsl.w	r0, r3, r0
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	4303      	orrs	r3, r0
 800974e:	3401      	adds	r4, #1
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009756:	4826      	ldr	r0, [pc, #152]	; (80097f0 <_svfiprintf_r+0x1f0>)
 8009758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800975c:	2206      	movs	r2, #6
 800975e:	f7f6 fd47 	bl	80001f0 <memchr>
 8009762:	2800      	cmp	r0, #0
 8009764:	d038      	beq.n	80097d8 <_svfiprintf_r+0x1d8>
 8009766:	4b23      	ldr	r3, [pc, #140]	; (80097f4 <_svfiprintf_r+0x1f4>)
 8009768:	bb1b      	cbnz	r3, 80097b2 <_svfiprintf_r+0x1b2>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	3307      	adds	r3, #7
 800976e:	f023 0307 	bic.w	r3, r3, #7
 8009772:	3308      	adds	r3, #8
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009778:	4433      	add	r3, r6
 800977a:	9309      	str	r3, [sp, #36]	; 0x24
 800977c:	e767      	b.n	800964e <_svfiprintf_r+0x4e>
 800977e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009782:	460c      	mov	r4, r1
 8009784:	2001      	movs	r0, #1
 8009786:	e7a5      	b.n	80096d4 <_svfiprintf_r+0xd4>
 8009788:	2300      	movs	r3, #0
 800978a:	3401      	adds	r4, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	4619      	mov	r1, r3
 8009790:	f04f 0c0a 	mov.w	ip, #10
 8009794:	4620      	mov	r0, r4
 8009796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979a:	3a30      	subs	r2, #48	; 0x30
 800979c:	2a09      	cmp	r2, #9
 800979e:	d903      	bls.n	80097a8 <_svfiprintf_r+0x1a8>
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0c5      	beq.n	8009730 <_svfiprintf_r+0x130>
 80097a4:	9105      	str	r1, [sp, #20]
 80097a6:	e7c3      	b.n	8009730 <_svfiprintf_r+0x130>
 80097a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ac:	4604      	mov	r4, r0
 80097ae:	2301      	movs	r3, #1
 80097b0:	e7f0      	b.n	8009794 <_svfiprintf_r+0x194>
 80097b2:	ab03      	add	r3, sp, #12
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	462a      	mov	r2, r5
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097ba:	a904      	add	r1, sp, #16
 80097bc:	4638      	mov	r0, r7
 80097be:	f7fc fa67 	bl	8005c90 <_printf_float>
 80097c2:	1c42      	adds	r2, r0, #1
 80097c4:	4606      	mov	r6, r0
 80097c6:	d1d6      	bne.n	8009776 <_svfiprintf_r+0x176>
 80097c8:	89ab      	ldrh	r3, [r5, #12]
 80097ca:	065b      	lsls	r3, r3, #25
 80097cc:	f53f af2c 	bmi.w	8009628 <_svfiprintf_r+0x28>
 80097d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d2:	b01d      	add	sp, #116	; 0x74
 80097d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <_svfiprintf_r+0x1f8>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4638      	mov	r0, r7
 80097e4:	f7fc fcf8 	bl	80061d8 <_printf_i>
 80097e8:	e7eb      	b.n	80097c2 <_svfiprintf_r+0x1c2>
 80097ea:	bf00      	nop
 80097ec:	0800a904 	.word	0x0800a904
 80097f0:	0800a90e 	.word	0x0800a90e
 80097f4:	08005c91 	.word	0x08005c91
 80097f8:	08009549 	.word	0x08009549
 80097fc:	0800a90a 	.word	0x0800a90a

08009800 <nan>:
 8009800:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009808 <nan+0x8>
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	00000000 	.word	0x00000000
 800980c:	7ff80000 	.word	0x7ff80000

08009810 <_sbrk_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d06      	ldr	r5, [pc, #24]	; (800982c <_sbrk_r+0x1c>)
 8009814:	2300      	movs	r3, #0
 8009816:	4604      	mov	r4, r0
 8009818:	4608      	mov	r0, r1
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	f7f9 fbce 	bl	8002fbc <_sbrk>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d102      	bne.n	800982a <_sbrk_r+0x1a>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	b103      	cbz	r3, 800982a <_sbrk_r+0x1a>
 8009828:	6023      	str	r3, [r4, #0]
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	20000408 	.word	0x20000408

08009830 <strncmp>:
 8009830:	b510      	push	{r4, lr}
 8009832:	b16a      	cbz	r2, 8009850 <strncmp+0x20>
 8009834:	3901      	subs	r1, #1
 8009836:	1884      	adds	r4, r0, r2
 8009838:	f810 3b01 	ldrb.w	r3, [r0], #1
 800983c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009840:	4293      	cmp	r3, r2
 8009842:	d103      	bne.n	800984c <strncmp+0x1c>
 8009844:	42a0      	cmp	r0, r4
 8009846:	d001      	beq.n	800984c <strncmp+0x1c>
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f5      	bne.n	8009838 <strncmp+0x8>
 800984c:	1a98      	subs	r0, r3, r2
 800984e:	bd10      	pop	{r4, pc}
 8009850:	4610      	mov	r0, r2
 8009852:	e7fc      	b.n	800984e <strncmp+0x1e>

08009854 <__ascii_wctomb>:
 8009854:	b149      	cbz	r1, 800986a <__ascii_wctomb+0x16>
 8009856:	2aff      	cmp	r2, #255	; 0xff
 8009858:	bf85      	ittet	hi
 800985a:	238a      	movhi	r3, #138	; 0x8a
 800985c:	6003      	strhi	r3, [r0, #0]
 800985e:	700a      	strbls	r2, [r1, #0]
 8009860:	f04f 30ff 	movhi.w	r0, #4294967295
 8009864:	bf98      	it	ls
 8009866:	2001      	movls	r0, #1
 8009868:	4770      	bx	lr
 800986a:	4608      	mov	r0, r1
 800986c:	4770      	bx	lr
	...

08009870 <__assert_func>:
 8009870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009872:	4614      	mov	r4, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4b09      	ldr	r3, [pc, #36]	; (800989c <__assert_func+0x2c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4605      	mov	r5, r0
 800987c:	68d8      	ldr	r0, [r3, #12]
 800987e:	b14c      	cbz	r4, 8009894 <__assert_func+0x24>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <__assert_func+0x30>)
 8009882:	9100      	str	r1, [sp, #0]
 8009884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009888:	4906      	ldr	r1, [pc, #24]	; (80098a4 <__assert_func+0x34>)
 800988a:	462b      	mov	r3, r5
 800988c:	f000 f80e 	bl	80098ac <fiprintf>
 8009890:	f000 fa84 	bl	8009d9c <abort>
 8009894:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <__assert_func+0x38>)
 8009896:	461c      	mov	r4, r3
 8009898:	e7f3      	b.n	8009882 <__assert_func+0x12>
 800989a:	bf00      	nop
 800989c:	20000020 	.word	0x20000020
 80098a0:	0800a915 	.word	0x0800a915
 80098a4:	0800a922 	.word	0x0800a922
 80098a8:	0800a950 	.word	0x0800a950

080098ac <fiprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b503      	push	{r0, r1, lr}
 80098b0:	4601      	mov	r1, r0
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4805      	ldr	r0, [pc, #20]	; (80098cc <fiprintf+0x20>)
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 f87d 	bl	80099bc <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	20000020 	.word	0x20000020

080098d0 <memmove>:
 80098d0:	4288      	cmp	r0, r1
 80098d2:	b510      	push	{r4, lr}
 80098d4:	eb01 0402 	add.w	r4, r1, r2
 80098d8:	d902      	bls.n	80098e0 <memmove+0x10>
 80098da:	4284      	cmp	r4, r0
 80098dc:	4623      	mov	r3, r4
 80098de:	d807      	bhi.n	80098f0 <memmove+0x20>
 80098e0:	1e43      	subs	r3, r0, #1
 80098e2:	42a1      	cmp	r1, r4
 80098e4:	d008      	beq.n	80098f8 <memmove+0x28>
 80098e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ee:	e7f8      	b.n	80098e2 <memmove+0x12>
 80098f0:	4402      	add	r2, r0
 80098f2:	4601      	mov	r1, r0
 80098f4:	428a      	cmp	r2, r1
 80098f6:	d100      	bne.n	80098fa <memmove+0x2a>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009902:	e7f7      	b.n	80098f4 <memmove+0x24>

08009904 <__malloc_lock>:
 8009904:	4801      	ldr	r0, [pc, #4]	; (800990c <__malloc_lock+0x8>)
 8009906:	f000 bc09 	b.w	800a11c <__retarget_lock_acquire_recursive>
 800990a:	bf00      	nop
 800990c:	20000410 	.word	0x20000410

08009910 <__malloc_unlock>:
 8009910:	4801      	ldr	r0, [pc, #4]	; (8009918 <__malloc_unlock+0x8>)
 8009912:	f000 bc04 	b.w	800a11e <__retarget_lock_release_recursive>
 8009916:	bf00      	nop
 8009918:	20000410 	.word	0x20000410

0800991c <_realloc_r>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	4607      	mov	r7, r0
 8009920:	4614      	mov	r4, r2
 8009922:	460e      	mov	r6, r1
 8009924:	b921      	cbnz	r1, 8009930 <_realloc_r+0x14>
 8009926:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800992a:	4611      	mov	r1, r2
 800992c:	f7ff bdb2 	b.w	8009494 <_malloc_r>
 8009930:	b922      	cbnz	r2, 800993c <_realloc_r+0x20>
 8009932:	f7ff fd5f 	bl	80093f4 <_free_r>
 8009936:	4625      	mov	r5, r4
 8009938:	4628      	mov	r0, r5
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	f000 fc54 	bl	800a1e8 <_malloc_usable_size_r>
 8009940:	42a0      	cmp	r0, r4
 8009942:	d20f      	bcs.n	8009964 <_realloc_r+0x48>
 8009944:	4621      	mov	r1, r4
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff fda4 	bl	8009494 <_malloc_r>
 800994c:	4605      	mov	r5, r0
 800994e:	2800      	cmp	r0, #0
 8009950:	d0f2      	beq.n	8009938 <_realloc_r+0x1c>
 8009952:	4631      	mov	r1, r6
 8009954:	4622      	mov	r2, r4
 8009956:	f7ff f875 	bl	8008a44 <memcpy>
 800995a:	4631      	mov	r1, r6
 800995c:	4638      	mov	r0, r7
 800995e:	f7ff fd49 	bl	80093f4 <_free_r>
 8009962:	e7e9      	b.n	8009938 <_realloc_r+0x1c>
 8009964:	4635      	mov	r5, r6
 8009966:	e7e7      	b.n	8009938 <_realloc_r+0x1c>

08009968 <__sfputc_r>:
 8009968:	6893      	ldr	r3, [r2, #8]
 800996a:	3b01      	subs	r3, #1
 800996c:	2b00      	cmp	r3, #0
 800996e:	b410      	push	{r4}
 8009970:	6093      	str	r3, [r2, #8]
 8009972:	da08      	bge.n	8009986 <__sfputc_r+0x1e>
 8009974:	6994      	ldr	r4, [r2, #24]
 8009976:	42a3      	cmp	r3, r4
 8009978:	db01      	blt.n	800997e <__sfputc_r+0x16>
 800997a:	290a      	cmp	r1, #10
 800997c:	d103      	bne.n	8009986 <__sfputc_r+0x1e>
 800997e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009982:	f000 b94b 	b.w	8009c1c <__swbuf_r>
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	1c58      	adds	r0, r3, #1
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	7019      	strb	r1, [r3, #0]
 800998e:	4608      	mov	r0, r1
 8009990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009994:	4770      	bx	lr

08009996 <__sfputs_r>:
 8009996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009998:	4606      	mov	r6, r0
 800999a:	460f      	mov	r7, r1
 800999c:	4614      	mov	r4, r2
 800999e:	18d5      	adds	r5, r2, r3
 80099a0:	42ac      	cmp	r4, r5
 80099a2:	d101      	bne.n	80099a8 <__sfputs_r+0x12>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e007      	b.n	80099b8 <__sfputs_r+0x22>
 80099a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ac:	463a      	mov	r2, r7
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7ff ffda 	bl	8009968 <__sfputc_r>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	d1f3      	bne.n	80099a0 <__sfputs_r+0xa>
 80099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099bc <_vfiprintf_r>:
 80099bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c0:	460d      	mov	r5, r1
 80099c2:	b09d      	sub	sp, #116	; 0x74
 80099c4:	4614      	mov	r4, r2
 80099c6:	4698      	mov	r8, r3
 80099c8:	4606      	mov	r6, r0
 80099ca:	b118      	cbz	r0, 80099d4 <_vfiprintf_r+0x18>
 80099cc:	6983      	ldr	r3, [r0, #24]
 80099ce:	b90b      	cbnz	r3, 80099d4 <_vfiprintf_r+0x18>
 80099d0:	f000 fb06 	bl	8009fe0 <__sinit>
 80099d4:	4b89      	ldr	r3, [pc, #548]	; (8009bfc <_vfiprintf_r+0x240>)
 80099d6:	429d      	cmp	r5, r3
 80099d8:	d11b      	bne.n	8009a12 <_vfiprintf_r+0x56>
 80099da:	6875      	ldr	r5, [r6, #4]
 80099dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d405      	bmi.n	80099ee <_vfiprintf_r+0x32>
 80099e2:	89ab      	ldrh	r3, [r5, #12]
 80099e4:	059a      	lsls	r2, r3, #22
 80099e6:	d402      	bmi.n	80099ee <_vfiprintf_r+0x32>
 80099e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ea:	f000 fb97 	bl	800a11c <__retarget_lock_acquire_recursive>
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	071b      	lsls	r3, r3, #28
 80099f2:	d501      	bpl.n	80099f8 <_vfiprintf_r+0x3c>
 80099f4:	692b      	ldr	r3, [r5, #16]
 80099f6:	b9eb      	cbnz	r3, 8009a34 <_vfiprintf_r+0x78>
 80099f8:	4629      	mov	r1, r5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f000 f960 	bl	8009cc0 <__swsetup_r>
 8009a00:	b1c0      	cbz	r0, 8009a34 <_vfiprintf_r+0x78>
 8009a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a04:	07dc      	lsls	r4, r3, #31
 8009a06:	d50e      	bpl.n	8009a26 <_vfiprintf_r+0x6a>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	b01d      	add	sp, #116	; 0x74
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	4b7b      	ldr	r3, [pc, #492]	; (8009c00 <_vfiprintf_r+0x244>)
 8009a14:	429d      	cmp	r5, r3
 8009a16:	d101      	bne.n	8009a1c <_vfiprintf_r+0x60>
 8009a18:	68b5      	ldr	r5, [r6, #8]
 8009a1a:	e7df      	b.n	80099dc <_vfiprintf_r+0x20>
 8009a1c:	4b79      	ldr	r3, [pc, #484]	; (8009c04 <_vfiprintf_r+0x248>)
 8009a1e:	429d      	cmp	r5, r3
 8009a20:	bf08      	it	eq
 8009a22:	68f5      	ldreq	r5, [r6, #12]
 8009a24:	e7da      	b.n	80099dc <_vfiprintf_r+0x20>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	0598      	lsls	r0, r3, #22
 8009a2a:	d4ed      	bmi.n	8009a08 <_vfiprintf_r+0x4c>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2e:	f000 fb76 	bl	800a11e <__retarget_lock_release_recursive>
 8009a32:	e7e9      	b.n	8009a08 <_vfiprintf_r+0x4c>
 8009a34:	2300      	movs	r3, #0
 8009a36:	9309      	str	r3, [sp, #36]	; 0x24
 8009a38:	2320      	movs	r3, #32
 8009a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a42:	2330      	movs	r3, #48	; 0x30
 8009a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c08 <_vfiprintf_r+0x24c>
 8009a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a4c:	f04f 0901 	mov.w	r9, #1
 8009a50:	4623      	mov	r3, r4
 8009a52:	469a      	mov	sl, r3
 8009a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a58:	b10a      	cbz	r2, 8009a5e <_vfiprintf_r+0xa2>
 8009a5a:	2a25      	cmp	r2, #37	; 0x25
 8009a5c:	d1f9      	bne.n	8009a52 <_vfiprintf_r+0x96>
 8009a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a62:	d00b      	beq.n	8009a7c <_vfiprintf_r+0xc0>
 8009a64:	465b      	mov	r3, fp
 8009a66:	4622      	mov	r2, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ff93 	bl	8009996 <__sfputs_r>
 8009a70:	3001      	adds	r0, #1
 8009a72:	f000 80aa 	beq.w	8009bca <_vfiprintf_r+0x20e>
 8009a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a78:	445a      	add	r2, fp
 8009a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a2 	beq.w	8009bca <_vfiprintf_r+0x20e>
 8009a86:	2300      	movs	r3, #0
 8009a88:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	9307      	str	r3, [sp, #28]
 8009a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8009a9e:	4654      	mov	r4, sl
 8009aa0:	2205      	movs	r2, #5
 8009aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa6:	4858      	ldr	r0, [pc, #352]	; (8009c08 <_vfiprintf_r+0x24c>)
 8009aa8:	f7f6 fba2 	bl	80001f0 <memchr>
 8009aac:	9a04      	ldr	r2, [sp, #16]
 8009aae:	b9d8      	cbnz	r0, 8009ae8 <_vfiprintf_r+0x12c>
 8009ab0:	06d1      	lsls	r1, r2, #27
 8009ab2:	bf44      	itt	mi
 8009ab4:	2320      	movmi	r3, #32
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aba:	0713      	lsls	r3, r2, #28
 8009abc:	bf44      	itt	mi
 8009abe:	232b      	movmi	r3, #43	; 0x2b
 8009ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aca:	d015      	beq.n	8009af8 <_vfiprintf_r+0x13c>
 8009acc:	9a07      	ldr	r2, [sp, #28]
 8009ace:	4654      	mov	r4, sl
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f04f 0c0a 	mov.w	ip, #10
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009adc:	3b30      	subs	r3, #48	; 0x30
 8009ade:	2b09      	cmp	r3, #9
 8009ae0:	d94e      	bls.n	8009b80 <_vfiprintf_r+0x1c4>
 8009ae2:	b1b0      	cbz	r0, 8009b12 <_vfiprintf_r+0x156>
 8009ae4:	9207      	str	r2, [sp, #28]
 8009ae6:	e014      	b.n	8009b12 <_vfiprintf_r+0x156>
 8009ae8:	eba0 0308 	sub.w	r3, r0, r8
 8009aec:	fa09 f303 	lsl.w	r3, r9, r3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	46a2      	mov	sl, r4
 8009af6:	e7d2      	b.n	8009a9e <_vfiprintf_r+0xe2>
 8009af8:	9b03      	ldr	r3, [sp, #12]
 8009afa:	1d19      	adds	r1, r3, #4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	9103      	str	r1, [sp, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	bfbb      	ittet	lt
 8009b04:	425b      	neglt	r3, r3
 8009b06:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0a:	9307      	strge	r3, [sp, #28]
 8009b0c:	9307      	strlt	r3, [sp, #28]
 8009b0e:	bfb8      	it	lt
 8009b10:	9204      	strlt	r2, [sp, #16]
 8009b12:	7823      	ldrb	r3, [r4, #0]
 8009b14:	2b2e      	cmp	r3, #46	; 0x2e
 8009b16:	d10c      	bne.n	8009b32 <_vfiprintf_r+0x176>
 8009b18:	7863      	ldrb	r3, [r4, #1]
 8009b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1c:	d135      	bne.n	8009b8a <_vfiprintf_r+0x1ce>
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	1d1a      	adds	r2, r3, #4
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	9203      	str	r2, [sp, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bfb8      	it	lt
 8009b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b2e:	3402      	adds	r4, #2
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c18 <_vfiprintf_r+0x25c>
 8009b36:	7821      	ldrb	r1, [r4, #0]
 8009b38:	2203      	movs	r2, #3
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f7f6 fb58 	bl	80001f0 <memchr>
 8009b40:	b140      	cbz	r0, 8009b54 <_vfiprintf_r+0x198>
 8009b42:	2340      	movs	r3, #64	; 0x40
 8009b44:	eba0 000a 	sub.w	r0, r0, sl
 8009b48:	fa03 f000 	lsl.w	r0, r3, r0
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	4303      	orrs	r3, r0
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	482c      	ldr	r0, [pc, #176]	; (8009c0c <_vfiprintf_r+0x250>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb46 	bl	80001f0 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d03f      	beq.n	8009be8 <_vfiprintf_r+0x22c>
 8009b68:	4b29      	ldr	r3, [pc, #164]	; (8009c10 <_vfiprintf_r+0x254>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x1f8>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	443b      	add	r3, r7
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	e767      	b.n	8009a50 <_vfiprintf_r+0x94>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a5      	b.n	8009ad6 <_vfiprintf_r+0x11a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	; 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_vfiprintf_r+0x1ee>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c5      	beq.n	8009b32 <_vfiprintf_r+0x176>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c3      	b.n	8009b32 <_vfiprintf_r+0x176>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_vfiprintf_r+0x1da>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b16      	ldr	r3, [pc, #88]	; (8009c14 <_vfiprintf_r+0x258>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7fc f866 	bl	8005c90 <_printf_float>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	1c78      	adds	r0, r7, #1
 8009bc8:	d1d6      	bne.n	8009b78 <_vfiprintf_r+0x1bc>
 8009bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bcc:	07d9      	lsls	r1, r3, #31
 8009bce:	d405      	bmi.n	8009bdc <_vfiprintf_r+0x220>
 8009bd0:	89ab      	ldrh	r3, [r5, #12]
 8009bd2:	059a      	lsls	r2, r3, #22
 8009bd4:	d402      	bmi.n	8009bdc <_vfiprintf_r+0x220>
 8009bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd8:	f000 faa1 	bl	800a11e <__retarget_lock_release_recursive>
 8009bdc:	89ab      	ldrh	r3, [r5, #12]
 8009bde:	065b      	lsls	r3, r3, #25
 8009be0:	f53f af12 	bmi.w	8009a08 <_vfiprintf_r+0x4c>
 8009be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009be6:	e711      	b.n	8009a0c <_vfiprintf_r+0x50>
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <_vfiprintf_r+0x258>)
 8009bf0:	a904      	add	r1, sp, #16
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7fc faf0 	bl	80061d8 <_printf_i>
 8009bf8:	e7e4      	b.n	8009bc4 <_vfiprintf_r+0x208>
 8009bfa:	bf00      	nop
 8009bfc:	0800a974 	.word	0x0800a974
 8009c00:	0800a994 	.word	0x0800a994
 8009c04:	0800a954 	.word	0x0800a954
 8009c08:	0800a904 	.word	0x0800a904
 8009c0c:	0800a90e 	.word	0x0800a90e
 8009c10:	08005c91 	.word	0x08005c91
 8009c14:	08009997 	.word	0x08009997
 8009c18:	0800a90a 	.word	0x0800a90a

08009c1c <__swbuf_r>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	460e      	mov	r6, r1
 8009c20:	4614      	mov	r4, r2
 8009c22:	4605      	mov	r5, r0
 8009c24:	b118      	cbz	r0, 8009c2e <__swbuf_r+0x12>
 8009c26:	6983      	ldr	r3, [r0, #24]
 8009c28:	b90b      	cbnz	r3, 8009c2e <__swbuf_r+0x12>
 8009c2a:	f000 f9d9 	bl	8009fe0 <__sinit>
 8009c2e:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <__swbuf_r+0x98>)
 8009c30:	429c      	cmp	r4, r3
 8009c32:	d12b      	bne.n	8009c8c <__swbuf_r+0x70>
 8009c34:	686c      	ldr	r4, [r5, #4]
 8009c36:	69a3      	ldr	r3, [r4, #24]
 8009c38:	60a3      	str	r3, [r4, #8]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	071a      	lsls	r2, r3, #28
 8009c3e:	d52f      	bpl.n	8009ca0 <__swbuf_r+0x84>
 8009c40:	6923      	ldr	r3, [r4, #16]
 8009c42:	b36b      	cbz	r3, 8009ca0 <__swbuf_r+0x84>
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	6963      	ldr	r3, [r4, #20]
 8009c4c:	b2f6      	uxtb	r6, r6
 8009c4e:	4283      	cmp	r3, r0
 8009c50:	4637      	mov	r7, r6
 8009c52:	dc04      	bgt.n	8009c5e <__swbuf_r+0x42>
 8009c54:	4621      	mov	r1, r4
 8009c56:	4628      	mov	r0, r5
 8009c58:	f000 f92e 	bl	8009eb8 <_fflush_r>
 8009c5c:	bb30      	cbnz	r0, 8009cac <__swbuf_r+0x90>
 8009c5e:	68a3      	ldr	r3, [r4, #8]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	60a3      	str	r3, [r4, #8]
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	6022      	str	r2, [r4, #0]
 8009c6a:	701e      	strb	r6, [r3, #0]
 8009c6c:	6963      	ldr	r3, [r4, #20]
 8009c6e:	3001      	adds	r0, #1
 8009c70:	4283      	cmp	r3, r0
 8009c72:	d004      	beq.n	8009c7e <__swbuf_r+0x62>
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	07db      	lsls	r3, r3, #31
 8009c78:	d506      	bpl.n	8009c88 <__swbuf_r+0x6c>
 8009c7a:	2e0a      	cmp	r6, #10
 8009c7c:	d104      	bne.n	8009c88 <__swbuf_r+0x6c>
 8009c7e:	4621      	mov	r1, r4
 8009c80:	4628      	mov	r0, r5
 8009c82:	f000 f919 	bl	8009eb8 <_fflush_r>
 8009c86:	b988      	cbnz	r0, 8009cac <__swbuf_r+0x90>
 8009c88:	4638      	mov	r0, r7
 8009c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <__swbuf_r+0x9c>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d101      	bne.n	8009c96 <__swbuf_r+0x7a>
 8009c92:	68ac      	ldr	r4, [r5, #8]
 8009c94:	e7cf      	b.n	8009c36 <__swbuf_r+0x1a>
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <__swbuf_r+0xa0>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	bf08      	it	eq
 8009c9c:	68ec      	ldreq	r4, [r5, #12]
 8009c9e:	e7ca      	b.n	8009c36 <__swbuf_r+0x1a>
 8009ca0:	4621      	mov	r1, r4
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 f80c 	bl	8009cc0 <__swsetup_r>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d0cb      	beq.n	8009c44 <__swbuf_r+0x28>
 8009cac:	f04f 37ff 	mov.w	r7, #4294967295
 8009cb0:	e7ea      	b.n	8009c88 <__swbuf_r+0x6c>
 8009cb2:	bf00      	nop
 8009cb4:	0800a974 	.word	0x0800a974
 8009cb8:	0800a994 	.word	0x0800a994
 8009cbc:	0800a954 	.word	0x0800a954

08009cc0 <__swsetup_r>:
 8009cc0:	4b32      	ldr	r3, [pc, #200]	; (8009d8c <__swsetup_r+0xcc>)
 8009cc2:	b570      	push	{r4, r5, r6, lr}
 8009cc4:	681d      	ldr	r5, [r3, #0]
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	b125      	cbz	r5, 8009cd6 <__swsetup_r+0x16>
 8009ccc:	69ab      	ldr	r3, [r5, #24]
 8009cce:	b913      	cbnz	r3, 8009cd6 <__swsetup_r+0x16>
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f000 f985 	bl	8009fe0 <__sinit>
 8009cd6:	4b2e      	ldr	r3, [pc, #184]	; (8009d90 <__swsetup_r+0xd0>)
 8009cd8:	429c      	cmp	r4, r3
 8009cda:	d10f      	bne.n	8009cfc <__swsetup_r+0x3c>
 8009cdc:	686c      	ldr	r4, [r5, #4]
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce4:	0719      	lsls	r1, r3, #28
 8009ce6:	d42c      	bmi.n	8009d42 <__swsetup_r+0x82>
 8009ce8:	06dd      	lsls	r5, r3, #27
 8009cea:	d411      	bmi.n	8009d10 <__swsetup_r+0x50>
 8009cec:	2309      	movs	r3, #9
 8009cee:	6033      	str	r3, [r6, #0]
 8009cf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cf4:	81a3      	strh	r3, [r4, #12]
 8009cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfa:	e03e      	b.n	8009d7a <__swsetup_r+0xba>
 8009cfc:	4b25      	ldr	r3, [pc, #148]	; (8009d94 <__swsetup_r+0xd4>)
 8009cfe:	429c      	cmp	r4, r3
 8009d00:	d101      	bne.n	8009d06 <__swsetup_r+0x46>
 8009d02:	68ac      	ldr	r4, [r5, #8]
 8009d04:	e7eb      	b.n	8009cde <__swsetup_r+0x1e>
 8009d06:	4b24      	ldr	r3, [pc, #144]	; (8009d98 <__swsetup_r+0xd8>)
 8009d08:	429c      	cmp	r4, r3
 8009d0a:	bf08      	it	eq
 8009d0c:	68ec      	ldreq	r4, [r5, #12]
 8009d0e:	e7e6      	b.n	8009cde <__swsetup_r+0x1e>
 8009d10:	0758      	lsls	r0, r3, #29
 8009d12:	d512      	bpl.n	8009d3a <__swsetup_r+0x7a>
 8009d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d16:	b141      	cbz	r1, 8009d2a <__swsetup_r+0x6a>
 8009d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d1c:	4299      	cmp	r1, r3
 8009d1e:	d002      	beq.n	8009d26 <__swsetup_r+0x66>
 8009d20:	4630      	mov	r0, r6
 8009d22:	f7ff fb67 	bl	80093f4 <_free_r>
 8009d26:	2300      	movs	r3, #0
 8009d28:	6363      	str	r3, [r4, #52]	; 0x34
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	2300      	movs	r3, #0
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	6923      	ldr	r3, [r4, #16]
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	f043 0308 	orr.w	r3, r3, #8
 8009d40:	81a3      	strh	r3, [r4, #12]
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	b94b      	cbnz	r3, 8009d5a <__swsetup_r+0x9a>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d50:	d003      	beq.n	8009d5a <__swsetup_r+0x9a>
 8009d52:	4621      	mov	r1, r4
 8009d54:	4630      	mov	r0, r6
 8009d56:	f000 fa07 	bl	800a168 <__smakebuf_r>
 8009d5a:	89a0      	ldrh	r0, [r4, #12]
 8009d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d60:	f010 0301 	ands.w	r3, r0, #1
 8009d64:	d00a      	beq.n	8009d7c <__swsetup_r+0xbc>
 8009d66:	2300      	movs	r3, #0
 8009d68:	60a3      	str	r3, [r4, #8]
 8009d6a:	6963      	ldr	r3, [r4, #20]
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	61a3      	str	r3, [r4, #24]
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	b943      	cbnz	r3, 8009d86 <__swsetup_r+0xc6>
 8009d74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d78:	d1ba      	bne.n	8009cf0 <__swsetup_r+0x30>
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	0781      	lsls	r1, r0, #30
 8009d7e:	bf58      	it	pl
 8009d80:	6963      	ldrpl	r3, [r4, #20]
 8009d82:	60a3      	str	r3, [r4, #8]
 8009d84:	e7f4      	b.n	8009d70 <__swsetup_r+0xb0>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e7f7      	b.n	8009d7a <__swsetup_r+0xba>
 8009d8a:	bf00      	nop
 8009d8c:	20000020 	.word	0x20000020
 8009d90:	0800a974 	.word	0x0800a974
 8009d94:	0800a994 	.word	0x0800a994
 8009d98:	0800a954 	.word	0x0800a954

08009d9c <abort>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	2006      	movs	r0, #6
 8009da0:	f000 fa52 	bl	800a248 <raise>
 8009da4:	2001      	movs	r0, #1
 8009da6:	f7f9 f891 	bl	8002ecc <_exit>
	...

08009dac <__sflush_r>:
 8009dac:	898a      	ldrh	r2, [r1, #12]
 8009dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db2:	4605      	mov	r5, r0
 8009db4:	0710      	lsls	r0, r2, #28
 8009db6:	460c      	mov	r4, r1
 8009db8:	d458      	bmi.n	8009e6c <__sflush_r+0xc0>
 8009dba:	684b      	ldr	r3, [r1, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	dc05      	bgt.n	8009dcc <__sflush_r+0x20>
 8009dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dc02      	bgt.n	8009dcc <__sflush_r+0x20>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	d0f9      	beq.n	8009dc6 <__sflush_r+0x1a>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dd8:	682f      	ldr	r7, [r5, #0]
 8009dda:	602b      	str	r3, [r5, #0]
 8009ddc:	d032      	beq.n	8009e44 <__sflush_r+0x98>
 8009dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	075a      	lsls	r2, r3, #29
 8009de4:	d505      	bpl.n	8009df2 <__sflush_r+0x46>
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	1ac0      	subs	r0, r0, r3
 8009dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dec:	b10b      	cbz	r3, 8009df2 <__sflush_r+0x46>
 8009dee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009df0:	1ac0      	subs	r0, r0, r3
 8009df2:	2300      	movs	r3, #0
 8009df4:	4602      	mov	r2, r0
 8009df6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df8:	6a21      	ldr	r1, [r4, #32]
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b0      	blx	r6
 8009dfe:	1c43      	adds	r3, r0, #1
 8009e00:	89a3      	ldrh	r3, [r4, #12]
 8009e02:	d106      	bne.n	8009e12 <__sflush_r+0x66>
 8009e04:	6829      	ldr	r1, [r5, #0]
 8009e06:	291d      	cmp	r1, #29
 8009e08:	d82c      	bhi.n	8009e64 <__sflush_r+0xb8>
 8009e0a:	4a2a      	ldr	r2, [pc, #168]	; (8009eb4 <__sflush_r+0x108>)
 8009e0c:	40ca      	lsrs	r2, r1
 8009e0e:	07d6      	lsls	r6, r2, #31
 8009e10:	d528      	bpl.n	8009e64 <__sflush_r+0xb8>
 8009e12:	2200      	movs	r2, #0
 8009e14:	6062      	str	r2, [r4, #4]
 8009e16:	04d9      	lsls	r1, r3, #19
 8009e18:	6922      	ldr	r2, [r4, #16]
 8009e1a:	6022      	str	r2, [r4, #0]
 8009e1c:	d504      	bpl.n	8009e28 <__sflush_r+0x7c>
 8009e1e:	1c42      	adds	r2, r0, #1
 8009e20:	d101      	bne.n	8009e26 <__sflush_r+0x7a>
 8009e22:	682b      	ldr	r3, [r5, #0]
 8009e24:	b903      	cbnz	r3, 8009e28 <__sflush_r+0x7c>
 8009e26:	6560      	str	r0, [r4, #84]	; 0x54
 8009e28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e2a:	602f      	str	r7, [r5, #0]
 8009e2c:	2900      	cmp	r1, #0
 8009e2e:	d0ca      	beq.n	8009dc6 <__sflush_r+0x1a>
 8009e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e34:	4299      	cmp	r1, r3
 8009e36:	d002      	beq.n	8009e3e <__sflush_r+0x92>
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f7ff fadb 	bl	80093f4 <_free_r>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	6360      	str	r0, [r4, #52]	; 0x34
 8009e42:	e7c1      	b.n	8009dc8 <__sflush_r+0x1c>
 8009e44:	6a21      	ldr	r1, [r4, #32]
 8009e46:	2301      	movs	r3, #1
 8009e48:	4628      	mov	r0, r5
 8009e4a:	47b0      	blx	r6
 8009e4c:	1c41      	adds	r1, r0, #1
 8009e4e:	d1c7      	bne.n	8009de0 <__sflush_r+0x34>
 8009e50:	682b      	ldr	r3, [r5, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0c4      	beq.n	8009de0 <__sflush_r+0x34>
 8009e56:	2b1d      	cmp	r3, #29
 8009e58:	d001      	beq.n	8009e5e <__sflush_r+0xb2>
 8009e5a:	2b16      	cmp	r3, #22
 8009e5c:	d101      	bne.n	8009e62 <__sflush_r+0xb6>
 8009e5e:	602f      	str	r7, [r5, #0]
 8009e60:	e7b1      	b.n	8009dc6 <__sflush_r+0x1a>
 8009e62:	89a3      	ldrh	r3, [r4, #12]
 8009e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e68:	81a3      	strh	r3, [r4, #12]
 8009e6a:	e7ad      	b.n	8009dc8 <__sflush_r+0x1c>
 8009e6c:	690f      	ldr	r7, [r1, #16]
 8009e6e:	2f00      	cmp	r7, #0
 8009e70:	d0a9      	beq.n	8009dc6 <__sflush_r+0x1a>
 8009e72:	0793      	lsls	r3, r2, #30
 8009e74:	680e      	ldr	r6, [r1, #0]
 8009e76:	bf08      	it	eq
 8009e78:	694b      	ldreq	r3, [r1, #20]
 8009e7a:	600f      	str	r7, [r1, #0]
 8009e7c:	bf18      	it	ne
 8009e7e:	2300      	movne	r3, #0
 8009e80:	eba6 0807 	sub.w	r8, r6, r7
 8009e84:	608b      	str	r3, [r1, #8]
 8009e86:	f1b8 0f00 	cmp.w	r8, #0
 8009e8a:	dd9c      	ble.n	8009dc6 <__sflush_r+0x1a>
 8009e8c:	6a21      	ldr	r1, [r4, #32]
 8009e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e90:	4643      	mov	r3, r8
 8009e92:	463a      	mov	r2, r7
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b0      	blx	r6
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	dc06      	bgt.n	8009eaa <__sflush_r+0xfe>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e78e      	b.n	8009dc8 <__sflush_r+0x1c>
 8009eaa:	4407      	add	r7, r0
 8009eac:	eba8 0800 	sub.w	r8, r8, r0
 8009eb0:	e7e9      	b.n	8009e86 <__sflush_r+0xda>
 8009eb2:	bf00      	nop
 8009eb4:	20400001 	.word	0x20400001

08009eb8 <_fflush_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	690b      	ldr	r3, [r1, #16]
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	460c      	mov	r4, r1
 8009ec0:	b913      	cbnz	r3, 8009ec8 <_fflush_r+0x10>
 8009ec2:	2500      	movs	r5, #0
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	b118      	cbz	r0, 8009ed2 <_fflush_r+0x1a>
 8009eca:	6983      	ldr	r3, [r0, #24]
 8009ecc:	b90b      	cbnz	r3, 8009ed2 <_fflush_r+0x1a>
 8009ece:	f000 f887 	bl	8009fe0 <__sinit>
 8009ed2:	4b14      	ldr	r3, [pc, #80]	; (8009f24 <_fflush_r+0x6c>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d11b      	bne.n	8009f10 <_fflush_r+0x58>
 8009ed8:	686c      	ldr	r4, [r5, #4]
 8009eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ef      	beq.n	8009ec2 <_fflush_r+0xa>
 8009ee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ee4:	07d0      	lsls	r0, r2, #31
 8009ee6:	d404      	bmi.n	8009ef2 <_fflush_r+0x3a>
 8009ee8:	0599      	lsls	r1, r3, #22
 8009eea:	d402      	bmi.n	8009ef2 <_fflush_r+0x3a>
 8009eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eee:	f000 f915 	bl	800a11c <__retarget_lock_acquire_recursive>
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	f7ff ff59 	bl	8009dac <__sflush_r>
 8009efa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009efc:	07da      	lsls	r2, r3, #31
 8009efe:	4605      	mov	r5, r0
 8009f00:	d4e0      	bmi.n	8009ec4 <_fflush_r+0xc>
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	059b      	lsls	r3, r3, #22
 8009f06:	d4dd      	bmi.n	8009ec4 <_fflush_r+0xc>
 8009f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0a:	f000 f908 	bl	800a11e <__retarget_lock_release_recursive>
 8009f0e:	e7d9      	b.n	8009ec4 <_fflush_r+0xc>
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <_fflush_r+0x70>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d101      	bne.n	8009f1a <_fflush_r+0x62>
 8009f16:	68ac      	ldr	r4, [r5, #8]
 8009f18:	e7df      	b.n	8009eda <_fflush_r+0x22>
 8009f1a:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <_fflush_r+0x74>)
 8009f1c:	429c      	cmp	r4, r3
 8009f1e:	bf08      	it	eq
 8009f20:	68ec      	ldreq	r4, [r5, #12]
 8009f22:	e7da      	b.n	8009eda <_fflush_r+0x22>
 8009f24:	0800a974 	.word	0x0800a974
 8009f28:	0800a994 	.word	0x0800a994
 8009f2c:	0800a954 	.word	0x0800a954

08009f30 <std>:
 8009f30:	2300      	movs	r3, #0
 8009f32:	b510      	push	{r4, lr}
 8009f34:	4604      	mov	r4, r0
 8009f36:	e9c0 3300 	strd	r3, r3, [r0]
 8009f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f3e:	6083      	str	r3, [r0, #8]
 8009f40:	8181      	strh	r1, [r0, #12]
 8009f42:	6643      	str	r3, [r0, #100]	; 0x64
 8009f44:	81c2      	strh	r2, [r0, #14]
 8009f46:	6183      	str	r3, [r0, #24]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	2208      	movs	r2, #8
 8009f4c:	305c      	adds	r0, #92	; 0x5c
 8009f4e:	f7fb fdf7 	bl	8005b40 <memset>
 8009f52:	4b05      	ldr	r3, [pc, #20]	; (8009f68 <std+0x38>)
 8009f54:	6263      	str	r3, [r4, #36]	; 0x24
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <std+0x3c>)
 8009f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <std+0x40>)
 8009f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <std+0x44>)
 8009f60:	6224      	str	r4, [r4, #32]
 8009f62:	6323      	str	r3, [r4, #48]	; 0x30
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	bf00      	nop
 8009f68:	0800a281 	.word	0x0800a281
 8009f6c:	0800a2a3 	.word	0x0800a2a3
 8009f70:	0800a2db 	.word	0x0800a2db
 8009f74:	0800a2ff 	.word	0x0800a2ff

08009f78 <_cleanup_r>:
 8009f78:	4901      	ldr	r1, [pc, #4]	; (8009f80 <_cleanup_r+0x8>)
 8009f7a:	f000 b8af 	b.w	800a0dc <_fwalk_reent>
 8009f7e:	bf00      	nop
 8009f80:	08009eb9 	.word	0x08009eb9

08009f84 <__sfmoreglue>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	1e4a      	subs	r2, r1, #1
 8009f88:	2568      	movs	r5, #104	; 0x68
 8009f8a:	4355      	muls	r5, r2
 8009f8c:	460e      	mov	r6, r1
 8009f8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f92:	f7ff fa7f 	bl	8009494 <_malloc_r>
 8009f96:	4604      	mov	r4, r0
 8009f98:	b140      	cbz	r0, 8009fac <__sfmoreglue+0x28>
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	60a0      	str	r0, [r4, #8]
 8009fa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fa8:	f7fb fdca 	bl	8005b40 <memset>
 8009fac:	4620      	mov	r0, r4
 8009fae:	bd70      	pop	{r4, r5, r6, pc}

08009fb0 <__sfp_lock_acquire>:
 8009fb0:	4801      	ldr	r0, [pc, #4]	; (8009fb8 <__sfp_lock_acquire+0x8>)
 8009fb2:	f000 b8b3 	b.w	800a11c <__retarget_lock_acquire_recursive>
 8009fb6:	bf00      	nop
 8009fb8:	20000414 	.word	0x20000414

08009fbc <__sfp_lock_release>:
 8009fbc:	4801      	ldr	r0, [pc, #4]	; (8009fc4 <__sfp_lock_release+0x8>)
 8009fbe:	f000 b8ae 	b.w	800a11e <__retarget_lock_release_recursive>
 8009fc2:	bf00      	nop
 8009fc4:	20000414 	.word	0x20000414

08009fc8 <__sinit_lock_acquire>:
 8009fc8:	4801      	ldr	r0, [pc, #4]	; (8009fd0 <__sinit_lock_acquire+0x8>)
 8009fca:	f000 b8a7 	b.w	800a11c <__retarget_lock_acquire_recursive>
 8009fce:	bf00      	nop
 8009fd0:	2000040f 	.word	0x2000040f

08009fd4 <__sinit_lock_release>:
 8009fd4:	4801      	ldr	r0, [pc, #4]	; (8009fdc <__sinit_lock_release+0x8>)
 8009fd6:	f000 b8a2 	b.w	800a11e <__retarget_lock_release_recursive>
 8009fda:	bf00      	nop
 8009fdc:	2000040f 	.word	0x2000040f

08009fe0 <__sinit>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	f7ff fff0 	bl	8009fc8 <__sinit_lock_acquire>
 8009fe8:	69a3      	ldr	r3, [r4, #24]
 8009fea:	b11b      	cbz	r3, 8009ff4 <__sinit+0x14>
 8009fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff0:	f7ff bff0 	b.w	8009fd4 <__sinit_lock_release>
 8009ff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <__sinit+0x68>)
 8009ffc:	4a13      	ldr	r2, [pc, #76]	; (800a04c <__sinit+0x6c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	62a2      	str	r2, [r4, #40]	; 0x28
 800a002:	42a3      	cmp	r3, r4
 800a004:	bf04      	itt	eq
 800a006:	2301      	moveq	r3, #1
 800a008:	61a3      	streq	r3, [r4, #24]
 800a00a:	4620      	mov	r0, r4
 800a00c:	f000 f820 	bl	800a050 <__sfp>
 800a010:	6060      	str	r0, [r4, #4]
 800a012:	4620      	mov	r0, r4
 800a014:	f000 f81c 	bl	800a050 <__sfp>
 800a018:	60a0      	str	r0, [r4, #8]
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 f818 	bl	800a050 <__sfp>
 800a020:	2200      	movs	r2, #0
 800a022:	60e0      	str	r0, [r4, #12]
 800a024:	2104      	movs	r1, #4
 800a026:	6860      	ldr	r0, [r4, #4]
 800a028:	f7ff ff82 	bl	8009f30 <std>
 800a02c:	68a0      	ldr	r0, [r4, #8]
 800a02e:	2201      	movs	r2, #1
 800a030:	2109      	movs	r1, #9
 800a032:	f7ff ff7d 	bl	8009f30 <std>
 800a036:	68e0      	ldr	r0, [r4, #12]
 800a038:	2202      	movs	r2, #2
 800a03a:	2112      	movs	r1, #18
 800a03c:	f7ff ff78 	bl	8009f30 <std>
 800a040:	2301      	movs	r3, #1
 800a042:	61a3      	str	r3, [r4, #24]
 800a044:	e7d2      	b.n	8009fec <__sinit+0xc>
 800a046:	bf00      	nop
 800a048:	0800a4fc 	.word	0x0800a4fc
 800a04c:	08009f79 	.word	0x08009f79

0800a050 <__sfp>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	4607      	mov	r7, r0
 800a054:	f7ff ffac 	bl	8009fb0 <__sfp_lock_acquire>
 800a058:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <__sfp+0x84>)
 800a05a:	681e      	ldr	r6, [r3, #0]
 800a05c:	69b3      	ldr	r3, [r6, #24]
 800a05e:	b913      	cbnz	r3, 800a066 <__sfp+0x16>
 800a060:	4630      	mov	r0, r6
 800a062:	f7ff ffbd 	bl	8009fe0 <__sinit>
 800a066:	3648      	adds	r6, #72	; 0x48
 800a068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	d503      	bpl.n	800a078 <__sfp+0x28>
 800a070:	6833      	ldr	r3, [r6, #0]
 800a072:	b30b      	cbz	r3, 800a0b8 <__sfp+0x68>
 800a074:	6836      	ldr	r6, [r6, #0]
 800a076:	e7f7      	b.n	800a068 <__sfp+0x18>
 800a078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a07c:	b9d5      	cbnz	r5, 800a0b4 <__sfp+0x64>
 800a07e:	4b16      	ldr	r3, [pc, #88]	; (800a0d8 <__sfp+0x88>)
 800a080:	60e3      	str	r3, [r4, #12]
 800a082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a086:	6665      	str	r5, [r4, #100]	; 0x64
 800a088:	f000 f847 	bl	800a11a <__retarget_lock_init_recursive>
 800a08c:	f7ff ff96 	bl	8009fbc <__sfp_lock_release>
 800a090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a098:	6025      	str	r5, [r4, #0]
 800a09a:	61a5      	str	r5, [r4, #24]
 800a09c:	2208      	movs	r2, #8
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0a4:	f7fb fd4c 	bl	8005b40 <memset>
 800a0a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b4:	3468      	adds	r4, #104	; 0x68
 800a0b6:	e7d9      	b.n	800a06c <__sfp+0x1c>
 800a0b8:	2104      	movs	r1, #4
 800a0ba:	4638      	mov	r0, r7
 800a0bc:	f7ff ff62 	bl	8009f84 <__sfmoreglue>
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	6030      	str	r0, [r6, #0]
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d1d5      	bne.n	800a074 <__sfp+0x24>
 800a0c8:	f7ff ff78 	bl	8009fbc <__sfp_lock_release>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	e7ee      	b.n	800a0b0 <__sfp+0x60>
 800a0d2:	bf00      	nop
 800a0d4:	0800a4fc 	.word	0x0800a4fc
 800a0d8:	ffff0001 	.word	0xffff0001

0800a0dc <_fwalk_reent>:
 800a0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	4688      	mov	r8, r1
 800a0e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0e8:	2700      	movs	r7, #0
 800a0ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0ee:	f1b9 0901 	subs.w	r9, r9, #1
 800a0f2:	d505      	bpl.n	800a100 <_fwalk_reent+0x24>
 800a0f4:	6824      	ldr	r4, [r4, #0]
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	d1f7      	bne.n	800a0ea <_fwalk_reent+0xe>
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a100:	89ab      	ldrh	r3, [r5, #12]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d907      	bls.n	800a116 <_fwalk_reent+0x3a>
 800a106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a10a:	3301      	adds	r3, #1
 800a10c:	d003      	beq.n	800a116 <_fwalk_reent+0x3a>
 800a10e:	4629      	mov	r1, r5
 800a110:	4630      	mov	r0, r6
 800a112:	47c0      	blx	r8
 800a114:	4307      	orrs	r7, r0
 800a116:	3568      	adds	r5, #104	; 0x68
 800a118:	e7e9      	b.n	800a0ee <_fwalk_reent+0x12>

0800a11a <__retarget_lock_init_recursive>:
 800a11a:	4770      	bx	lr

0800a11c <__retarget_lock_acquire_recursive>:
 800a11c:	4770      	bx	lr

0800a11e <__retarget_lock_release_recursive>:
 800a11e:	4770      	bx	lr

0800a120 <__swhatbuf_r>:
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	460e      	mov	r6, r1
 800a124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a128:	2900      	cmp	r1, #0
 800a12a:	b096      	sub	sp, #88	; 0x58
 800a12c:	4614      	mov	r4, r2
 800a12e:	461d      	mov	r5, r3
 800a130:	da07      	bge.n	800a142 <__swhatbuf_r+0x22>
 800a132:	2300      	movs	r3, #0
 800a134:	602b      	str	r3, [r5, #0]
 800a136:	89b3      	ldrh	r3, [r6, #12]
 800a138:	061a      	lsls	r2, r3, #24
 800a13a:	d410      	bmi.n	800a15e <__swhatbuf_r+0x3e>
 800a13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a140:	e00e      	b.n	800a160 <__swhatbuf_r+0x40>
 800a142:	466a      	mov	r2, sp
 800a144:	f000 f902 	bl	800a34c <_fstat_r>
 800a148:	2800      	cmp	r0, #0
 800a14a:	dbf2      	blt.n	800a132 <__swhatbuf_r+0x12>
 800a14c:	9a01      	ldr	r2, [sp, #4]
 800a14e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a152:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a156:	425a      	negs	r2, r3
 800a158:	415a      	adcs	r2, r3
 800a15a:	602a      	str	r2, [r5, #0]
 800a15c:	e7ee      	b.n	800a13c <__swhatbuf_r+0x1c>
 800a15e:	2340      	movs	r3, #64	; 0x40
 800a160:	2000      	movs	r0, #0
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	b016      	add	sp, #88	; 0x58
 800a166:	bd70      	pop	{r4, r5, r6, pc}

0800a168 <__smakebuf_r>:
 800a168:	898b      	ldrh	r3, [r1, #12]
 800a16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a16c:	079d      	lsls	r5, r3, #30
 800a16e:	4606      	mov	r6, r0
 800a170:	460c      	mov	r4, r1
 800a172:	d507      	bpl.n	800a184 <__smakebuf_r+0x1c>
 800a174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	2301      	movs	r3, #1
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	b002      	add	sp, #8
 800a182:	bd70      	pop	{r4, r5, r6, pc}
 800a184:	ab01      	add	r3, sp, #4
 800a186:	466a      	mov	r2, sp
 800a188:	f7ff ffca 	bl	800a120 <__swhatbuf_r>
 800a18c:	9900      	ldr	r1, [sp, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff f97f 	bl	8009494 <_malloc_r>
 800a196:	b948      	cbnz	r0, 800a1ac <__smakebuf_r+0x44>
 800a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19c:	059a      	lsls	r2, r3, #22
 800a19e:	d4ef      	bmi.n	800a180 <__smakebuf_r+0x18>
 800a1a0:	f023 0303 	bic.w	r3, r3, #3
 800a1a4:	f043 0302 	orr.w	r3, r3, #2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	e7e3      	b.n	800a174 <__smakebuf_r+0xc>
 800a1ac:	4b0d      	ldr	r3, [pc, #52]	; (800a1e4 <__smakebuf_r+0x7c>)
 800a1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	6020      	str	r0, [r4, #0]
 800a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b8:	81a3      	strh	r3, [r4, #12]
 800a1ba:	9b00      	ldr	r3, [sp, #0]
 800a1bc:	6163      	str	r3, [r4, #20]
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	6120      	str	r0, [r4, #16]
 800a1c2:	b15b      	cbz	r3, 800a1dc <__smakebuf_r+0x74>
 800a1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 f8d1 	bl	800a370 <_isatty_r>
 800a1ce:	b128      	cbz	r0, 800a1dc <__smakebuf_r+0x74>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f023 0303 	bic.w	r3, r3, #3
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	89a0      	ldrh	r0, [r4, #12]
 800a1de:	4305      	orrs	r5, r0
 800a1e0:	81a5      	strh	r5, [r4, #12]
 800a1e2:	e7cd      	b.n	800a180 <__smakebuf_r+0x18>
 800a1e4:	08009f79 	.word	0x08009f79

0800a1e8 <_malloc_usable_size_r>:
 800a1e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1ec:	1f18      	subs	r0, r3, #4
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bfbc      	itt	lt
 800a1f2:	580b      	ldrlt	r3, [r1, r0]
 800a1f4:	18c0      	addlt	r0, r0, r3
 800a1f6:	4770      	bx	lr

0800a1f8 <_raise_r>:
 800a1f8:	291f      	cmp	r1, #31
 800a1fa:	b538      	push	{r3, r4, r5, lr}
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	460d      	mov	r5, r1
 800a200:	d904      	bls.n	800a20c <_raise_r+0x14>
 800a202:	2316      	movs	r3, #22
 800a204:	6003      	str	r3, [r0, #0]
 800a206:	f04f 30ff 	mov.w	r0, #4294967295
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a20e:	b112      	cbz	r2, 800a216 <_raise_r+0x1e>
 800a210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a214:	b94b      	cbnz	r3, 800a22a <_raise_r+0x32>
 800a216:	4620      	mov	r0, r4
 800a218:	f000 f830 	bl	800a27c <_getpid_r>
 800a21c:	462a      	mov	r2, r5
 800a21e:	4601      	mov	r1, r0
 800a220:	4620      	mov	r0, r4
 800a222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a226:	f000 b817 	b.w	800a258 <_kill_r>
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d00a      	beq.n	800a244 <_raise_r+0x4c>
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	d103      	bne.n	800a23a <_raise_r+0x42>
 800a232:	2316      	movs	r3, #22
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	2001      	movs	r0, #1
 800a238:	e7e7      	b.n	800a20a <_raise_r+0x12>
 800a23a:	2400      	movs	r4, #0
 800a23c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a240:	4628      	mov	r0, r5
 800a242:	4798      	blx	r3
 800a244:	2000      	movs	r0, #0
 800a246:	e7e0      	b.n	800a20a <_raise_r+0x12>

0800a248 <raise>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <raise+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f7ff bfd3 	b.w	800a1f8 <_raise_r>
 800a252:	bf00      	nop
 800a254:	20000020 	.word	0x20000020

0800a258 <_kill_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d07      	ldr	r5, [pc, #28]	; (800a278 <_kill_r+0x20>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	4611      	mov	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f8 fe21 	bl	8002eac <_kill>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d102      	bne.n	800a274 <_kill_r+0x1c>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	b103      	cbz	r3, 800a274 <_kill_r+0x1c>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd38      	pop	{r3, r4, r5, pc}
 800a276:	bf00      	nop
 800a278:	20000408 	.word	0x20000408

0800a27c <_getpid_r>:
 800a27c:	f7f8 be0e 	b.w	8002e9c <_getpid>

0800a280 <__sread>:
 800a280:	b510      	push	{r4, lr}
 800a282:	460c      	mov	r4, r1
 800a284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a288:	f000 f894 	bl	800a3b4 <_read_r>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	bfab      	itete	ge
 800a290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a292:	89a3      	ldrhlt	r3, [r4, #12]
 800a294:	181b      	addge	r3, r3, r0
 800a296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a29a:	bfac      	ite	ge
 800a29c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a29e:	81a3      	strhlt	r3, [r4, #12]
 800a2a0:	bd10      	pop	{r4, pc}

0800a2a2 <__swrite>:
 800a2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	898b      	ldrh	r3, [r1, #12]
 800a2aa:	05db      	lsls	r3, r3, #23
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4616      	mov	r6, r2
 800a2b2:	d505      	bpl.n	800a2c0 <__swrite+0x1e>
 800a2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f000 f868 	bl	800a390 <_lseek_r>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	463b      	mov	r3, r7
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d6:	f000 b817 	b.w	800a308 <_write_r>

0800a2da <__sseek>:
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e2:	f000 f855 	bl	800a390 <_lseek_r>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	bf15      	itete	ne
 800a2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2f6:	81a3      	strheq	r3, [r4, #12]
 800a2f8:	bf18      	it	ne
 800a2fa:	81a3      	strhne	r3, [r4, #12]
 800a2fc:	bd10      	pop	{r4, pc}

0800a2fe <__sclose>:
 800a2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a302:	f000 b813 	b.w	800a32c <_close_r>
	...

0800a308 <_write_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d07      	ldr	r5, [pc, #28]	; (800a328 <_write_r+0x20>)
 800a30c:	4604      	mov	r4, r0
 800a30e:	4608      	mov	r0, r1
 800a310:	4611      	mov	r1, r2
 800a312:	2200      	movs	r2, #0
 800a314:	602a      	str	r2, [r5, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	f7f8 fdff 	bl	8002f1a <_write>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_write_r+0x1e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_write_r+0x1e>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000408 	.word	0x20000408

0800a32c <_close_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d06      	ldr	r5, [pc, #24]	; (800a348 <_close_r+0x1c>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	602b      	str	r3, [r5, #0]
 800a338:	f7f8 fe0b 	bl	8002f52 <_close>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_close_r+0x1a>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_close_r+0x1a>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	20000408 	.word	0x20000408

0800a34c <_fstat_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_fstat_r+0x20>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	4611      	mov	r1, r2
 800a358:	602b      	str	r3, [r5, #0]
 800a35a:	f7f8 fe06 	bl	8002f6a <_fstat>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d102      	bne.n	800a368 <_fstat_r+0x1c>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	b103      	cbz	r3, 800a368 <_fstat_r+0x1c>
 800a366:	6023      	str	r3, [r4, #0]
 800a368:	bd38      	pop	{r3, r4, r5, pc}
 800a36a:	bf00      	nop
 800a36c:	20000408 	.word	0x20000408

0800a370 <_isatty_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d06      	ldr	r5, [pc, #24]	; (800a38c <_isatty_r+0x1c>)
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4608      	mov	r0, r1
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	f7f8 fe05 	bl	8002f8a <_isatty>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_isatty_r+0x1a>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_isatty_r+0x1a>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	20000408 	.word	0x20000408

0800a390 <_lseek_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_lseek_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f8 fdfe 	bl	8002fa0 <_lseek>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_lseek_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_lseek_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	20000408 	.word	0x20000408

0800a3b4 <_read_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_read_r+0x20>)
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	4608      	mov	r0, r1
 800a3bc:	4611      	mov	r1, r2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	602a      	str	r2, [r5, #0]
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f7f8 fd8c 	bl	8002ee0 <_read>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_read_r+0x1e>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_read_r+0x1e>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	20000408 	.word	0x20000408

0800a3d8 <round>:
 800a3d8:	ec51 0b10 	vmov	r0, r1, d0
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a3e2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a3e6:	2c13      	cmp	r4, #19
 800a3e8:	ee10 2a10 	vmov	r2, s0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	dc19      	bgt.n	800a424 <round+0x4c>
 800a3f0:	2c00      	cmp	r4, #0
 800a3f2:	da09      	bge.n	800a408 <round+0x30>
 800a3f4:	3401      	adds	r4, #1
 800a3f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a3fa:	d103      	bne.n	800a404 <round+0x2c>
 800a3fc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a400:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a404:	2100      	movs	r1, #0
 800a406:	e028      	b.n	800a45a <round+0x82>
 800a408:	4d15      	ldr	r5, [pc, #84]	; (800a460 <round+0x88>)
 800a40a:	4125      	asrs	r5, r4
 800a40c:	ea01 0605 	and.w	r6, r1, r5
 800a410:	4332      	orrs	r2, r6
 800a412:	d00e      	beq.n	800a432 <round+0x5a>
 800a414:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a418:	fa42 f404 	asr.w	r4, r2, r4
 800a41c:	4423      	add	r3, r4
 800a41e:	ea23 0305 	bic.w	r3, r3, r5
 800a422:	e7ef      	b.n	800a404 <round+0x2c>
 800a424:	2c33      	cmp	r4, #51	; 0x33
 800a426:	dd07      	ble.n	800a438 <round+0x60>
 800a428:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a42c:	d101      	bne.n	800a432 <round+0x5a>
 800a42e:	f7f5 ff35 	bl	800029c <__adddf3>
 800a432:	ec41 0b10 	vmov	d0, r0, r1
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a43c:	f04f 35ff 	mov.w	r5, #4294967295
 800a440:	40f5      	lsrs	r5, r6
 800a442:	4228      	tst	r0, r5
 800a444:	d0f5      	beq.n	800a432 <round+0x5a>
 800a446:	2101      	movs	r1, #1
 800a448:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a44c:	fa01 f404 	lsl.w	r4, r1, r4
 800a450:	1912      	adds	r2, r2, r4
 800a452:	bf28      	it	cs
 800a454:	185b      	addcs	r3, r3, r1
 800a456:	ea22 0105 	bic.w	r1, r2, r5
 800a45a:	4608      	mov	r0, r1
 800a45c:	4619      	mov	r1, r3
 800a45e:	e7e8      	b.n	800a432 <round+0x5a>
 800a460:	000fffff 	.word	0x000fffff

0800a464 <roundf>:
 800a464:	ee10 0a10 	vmov	r0, s0
 800a468:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a46c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800a470:	2a16      	cmp	r2, #22
 800a472:	dc15      	bgt.n	800a4a0 <roundf+0x3c>
 800a474:	2a00      	cmp	r2, #0
 800a476:	da08      	bge.n	800a48a <roundf+0x26>
 800a478:	3201      	adds	r2, #1
 800a47a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800a47e:	d101      	bne.n	800a484 <roundf+0x20>
 800a480:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800a484:	ee00 3a10 	vmov	s0, r3
 800a488:	4770      	bx	lr
 800a48a:	4908      	ldr	r1, [pc, #32]	; (800a4ac <roundf+0x48>)
 800a48c:	4111      	asrs	r1, r2
 800a48e:	4208      	tst	r0, r1
 800a490:	d0fa      	beq.n	800a488 <roundf+0x24>
 800a492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a496:	4113      	asrs	r3, r2
 800a498:	4403      	add	r3, r0
 800a49a:	ea23 0301 	bic.w	r3, r3, r1
 800a49e:	e7f1      	b.n	800a484 <roundf+0x20>
 800a4a0:	2a80      	cmp	r2, #128	; 0x80
 800a4a2:	d1f1      	bne.n	800a488 <roundf+0x24>
 800a4a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	007fffff 	.word	0x007fffff

0800a4b0 <_init>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	bf00      	nop
 800a4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b6:	bc08      	pop	{r3}
 800a4b8:	469e      	mov	lr, r3
 800a4ba:	4770      	bx	lr

0800a4bc <_fini>:
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	bf00      	nop
 800a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c2:	bc08      	pop	{r3}
 800a4c4:	469e      	mov	lr, r3
 800a4c6:	4770      	bx	lr
