
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009258  08009258  00019258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800972c  0800972c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009734  08009734  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001e4  08009920  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08009920  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d635  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef2  00000000  00000000  0002d849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000945e  00000000  00000000  00030e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003da8  00000000  00000000  0003a2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0003e08e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000047c4  00000000  00000000  0003e0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009240 	.word	0x08009240

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009240 	.word	0x08009240

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <DWT_Delay_Init+0x58>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a13      	ldr	r2, [pc, #76]	; (8001054 <DWT_Delay_Init+0x58>)
 8001006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800100a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <DWT_Delay_Init+0x58>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <DWT_Delay_Init+0x58>)
 8001012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001016:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <DWT_Delay_Init+0x5c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <DWT_Delay_Init+0x5c>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <DWT_Delay_Init+0x5c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <DWT_Delay_Init+0x5c>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <DWT_Delay_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8001036:	bf00      	nop
  __NOP();
 8001038:	bf00      	nop
  __NOP();
 800103a:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <DWT_Delay_Init+0x5c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8001044:	2300      	movs	r3, #0
 8001046:	e000      	b.n	800104a <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8001048:	2301      	movs	r3, #1
  }
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000edf0 	.word	0xe000edf0
 8001058:	e0001000 	.word	0xe0001000

0800105c <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <DWT_Delay_us+0x40>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800106a:	f002 fbf1 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 800106e:	4603      	mov	r3, r0
 8001070:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <DWT_Delay_us+0x44>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001080:	bf00      	nop
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <DWT_Delay_us+0x40>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad2      	subs	r2, r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3f8      	bcc.n	8001082 <DWT_Delay_us+0x26>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e0001000 	.word	0xe0001000
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <lcd16x2_enablePulse+0x34>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <lcd16x2_enablePulse+0x38>)
 80010ae:	8811      	ldrh	r1, [r2, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ff86 	bl	8002fc4 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80010b8:	2014      	movs	r0, #20
 80010ba:	f7ff ffcf 	bl	800105c <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <lcd16x2_enablePulse+0x34>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <lcd16x2_enablePulse+0x38>)
 80010c4:	8811      	ldrh	r1, [r2, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 ff7b 	bl	8002fc4 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80010ce:	203c      	movs	r0, #60	; 0x3c
 80010d0:	f7ff ffc4 	bl	800105c <DWT_Delay_us>
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000200 	.word	0x20000200
 80010dc:	20000206 	.word	0x20000206

080010e0 <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <lcd16x2_rs+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <lcd16x2_rs+0x28>)
 80010f0:	8811      	ldrh	r1, [r2, #0]
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 ff65 	bl	8002fc4 <HAL_GPIO_WritePin>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000200 	.word	0x20000200
 8001108:	20000204 	.word	0x20000204

0800110c <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8001124:	4b5f      	ldr	r3, [pc, #380]	; (80012a4 <lcd16x2_write+0x198>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d05a      	beq.n	80011e2 <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800112c:	4b5e      	ldr	r3, [pc, #376]	; (80012a8 <lcd16x2_write+0x19c>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <lcd16x2_write+0x1a0>)
 8001132:	8819      	ldrh	r1, [r3, #0]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	f001 ff41 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001142:	4b59      	ldr	r3, [pc, #356]	; (80012a8 <lcd16x2_write+0x19c>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	4b5a      	ldr	r3, [pc, #360]	; (80012b0 <lcd16x2_write+0x1a4>)
 8001148:	8819      	ldrh	r1, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	461a      	mov	r2, r3
 8001154:	f001 ff36 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001158:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <lcd16x2_write+0x19c>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <lcd16x2_write+0x1a8>)
 800115e:	8819      	ldrh	r1, [r3, #0]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	b2db      	uxtb	r3, r3
 8001168:	461a      	mov	r2, r3
 800116a:	f001 ff2b 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800116e:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <lcd16x2_write+0x19c>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <lcd16x2_write+0x1ac>)
 8001174:	8819      	ldrh	r1, [r3, #0]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	f001 ff20 	bl	8002fc4 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001184:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <lcd16x2_write+0x1b0>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <lcd16x2_write+0x1b4>)
 800118a:	8819      	ldrh	r1, [r3, #0]
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	461a      	mov	r2, r3
 8001196:	f001 ff15 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 800119a:	4b48      	ldr	r3, [pc, #288]	; (80012bc <lcd16x2_write+0x1b0>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	4b49      	ldr	r3, [pc, #292]	; (80012c4 <lcd16x2_write+0x1b8>)
 80011a0:	8819      	ldrh	r1, [r3, #0]
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	f001 ff0a 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80011b0:	4b42      	ldr	r3, [pc, #264]	; (80012bc <lcd16x2_write+0x1b0>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <lcd16x2_write+0x1bc>)
 80011b6:	8819      	ldrh	r1, [r3, #0]
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	461a      	mov	r2, r3
 80011c2:	f001 feff 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <lcd16x2_write+0x1b0>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <lcd16x2_write+0x1c0>)
 80011cc:	8819      	ldrh	r1, [r3, #0]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	f001 fef4 	bl	8002fc4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80011dc:	f7ff ff62 	bl	80010a4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 80011e0:	e05b      	b.n	800129a <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80011e2:	4b36      	ldr	r3, [pc, #216]	; (80012bc <lcd16x2_write+0x1b0>)
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <lcd16x2_write+0x1b4>)
 80011e8:	8819      	ldrh	r1, [r3, #0]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	f001 fee6 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <lcd16x2_write+0x1b0>)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <lcd16x2_write+0x1b8>)
 80011fe:	8819      	ldrh	r1, [r3, #0]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	461a      	mov	r2, r3
 800120a:	f001 fedb 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <lcd16x2_write+0x1b0>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <lcd16x2_write+0x1bc>)
 8001214:	8819      	ldrh	r1, [r3, #0]
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	461a      	mov	r2, r3
 8001220:	f001 fed0 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <lcd16x2_write+0x1b0>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	4b28      	ldr	r3, [pc, #160]	; (80012cc <lcd16x2_write+0x1c0>)
 800122a:	8819      	ldrh	r1, [r3, #0]
 800122c:	7bbb      	ldrb	r3, [r7, #14]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	f001 fec5 	bl	8002fc4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800123a:	f7ff ff33 	bl	80010a4 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <lcd16x2_write+0x1b0>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <lcd16x2_write+0x1b4>)
 8001244:	8819      	ldrh	r1, [r3, #0]
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	f001 feb8 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <lcd16x2_write+0x1b0>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <lcd16x2_write+0x1b8>)
 800125a:	8819      	ldrh	r1, [r3, #0]
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	f001 fead 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <lcd16x2_write+0x1b0>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <lcd16x2_write+0x1bc>)
 8001270:	8819      	ldrh	r1, [r3, #0]
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	f001 fea2 	bl	8002fc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <lcd16x2_write+0x1b0>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <lcd16x2_write+0x1c0>)
 8001286:	8819      	ldrh	r1, [r3, #0]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	f001 fe97 	bl	8002fc4 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001296:	f7ff ff05 	bl	80010a4 <lcd16x2_enablePulse>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000208 	.word	0x20000208
 80012ac:	2000020c 	.word	0x2000020c
 80012b0:	2000020e 	.word	0x2000020e
 80012b4:	20000210 	.word	0x20000210
 80012b8:	20000212 	.word	0x20000212
 80012bc:	20000214 	.word	0x20000214
 80012c0:	20000218 	.word	0x20000218
 80012c4:	2000021a 	.word	0x2000021a
 80012c8:	2000021c 	.word	0x2000021c
 80012cc:	2000021e 	.word	0x2000021e

080012d0 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ff00 	bl	80010e0 <lcd16x2_rs>
  lcd16x2_write(cmd);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff12 	bl	800110c <lcd16x2_write>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80012fa:	2001      	movs	r0, #1
 80012fc:	f7ff fef0 	bl	80010e0 <lcd16x2_rs>
  lcd16x2_write(data);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff02 	bl	800110c <lcd16x2_write>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fedc 	bl	80010e0 <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <lcd16x2_write4+0x7c>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <lcd16x2_write4+0x80>)
 800132e:	8819      	ldrh	r1, [r3, #0]
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	f001 fe43 	bl	8002fc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <lcd16x2_write4+0x7c>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <lcd16x2_write4+0x84>)
 8001344:	8819      	ldrh	r1, [r3, #0]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	f001 fe38 	bl	8002fc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <lcd16x2_write4+0x7c>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <lcd16x2_write4+0x88>)
 800135a:	8819      	ldrh	r1, [r3, #0]
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	f001 fe2d 	bl	8002fc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <lcd16x2_write4+0x7c>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <lcd16x2_write4+0x8c>)
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	f001 fe22 	bl	8002fc4 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001380:	f7ff fe90 	bl	80010a4 <lcd16x2_enablePulse>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000214 	.word	0x20000214
 8001390:	20000218 	.word	0x20000218
 8001394:	2000021a 	.word	0x2000021a
 8001398:	2000021c 	.word	0x2000021c
 800139c:	2000021e 	.word	0x2000021e

080013a0 <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	4613      	mov	r3, r2
 80013b0:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80013b2:	f7ff fe23 	bl	8000ffc <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <lcd16x2_init_4bits+0xa8>)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80013bc:	4a23      	ldr	r2, [pc, #140]	; (800144c <lcd16x2_init_4bits+0xac>)
 80013be:	897b      	ldrh	r3, [r7, #10]
 80013c0:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <lcd16x2_init_4bits+0xb0>)
 80013c4:	893b      	ldrh	r3, [r7, #8]
 80013c6:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <lcd16x2_init_4bits+0xb4>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <lcd16x2_init_4bits+0xb8>)
 80013d0:	8b3b      	ldrh	r3, [r7, #24]
 80013d2:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <lcd16x2_init_4bits+0xbc>)
 80013d6:	8bbb      	ldrh	r3, [r7, #28]
 80013d8:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <lcd16x2_init_4bits+0xc0>)
 80013dc:	8c3b      	ldrh	r3, [r7, #32]
 80013de:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <lcd16x2_init_4bits+0xc4>)
 80013e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013e4:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <lcd16x2_init_4bits+0xc8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <lcd16x2_init_4bits+0xcc>)
 80013ee:	2228      	movs	r2, #40	; 0x28
 80013f0:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80013f2:	2014      	movs	r0, #20
 80013f4:	f000 ff32 	bl	800225c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f7ff ff89 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 80013fe:	2005      	movs	r0, #5
 8001400:	f000 ff2c 	bl	800225c <HAL_Delay>
  lcd16x2_write4(0x3);
 8001404:	2003      	movs	r0, #3
 8001406:	f7ff ff83 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f000 ff26 	bl	800225c <HAL_Delay>
  lcd16x2_write4(0x3);
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff ff7d 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f000 ff20 	bl	800225c <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 800141c:	2002      	movs	r0, #2
 800141e:	f7ff ff77 	bl	8001310 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f000 ff1a 	bl	800225c <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001428:	2028      	movs	r0, #40	; 0x28
 800142a:	f7ff ff51 	bl	80012d0 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800142e:	200f      	movs	r0, #15
 8001430:	f7ff ff4e 	bl	80012d0 <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ff4b 	bl	80012d0 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 ff0e 	bl	800225c <HAL_Delay>
}
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000200 	.word	0x20000200
 800144c:	20000204 	.word	0x20000204
 8001450:	20000206 	.word	0x20000206
 8001454:	20000214 	.word	0x20000214
 8001458:	20000218 	.word	0x20000218
 800145c:	2000021a 	.word	0x2000021a
 8001460:	2000021c 	.word	0x2000021c
 8001464:	2000021e 	.word	0x2000021e
 8001468:	20000000 	.word	0x20000000
 800146c:	20000002 	.word	0x20000002

08001470 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	460a      	mov	r2, r1
 800147a:	71fb      	strb	r3, [r7, #7]
 800147c:	4613      	mov	r3, r2
 800147e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d108      	bne.n	80014a0 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001494:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff19 	bl	80012d0 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800149e:	e007      	b.n	80014b0 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80014a6:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff10 	bl	80012d0 <lcd16x2_writeCommand>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <lcd16x2_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 80014bc:	2100      	movs	r1, #0
 80014be:	2001      	movs	r0, #1
 80014c0:	f7ff ffd6 	bl	8001470 <lcd16x2_setCursor>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if(state)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 80014d8:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f043 0303 	orr.w	r3, r3, #3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 80014e4:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fef0 	bl	80012d0 <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80014f0:	e00b      	b.n	800150a <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 80014fe:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <lcd16x2_cursorShow+0x4c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fee3 	bl	80012d0 <lcd16x2_writeCommand>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000001 	.word	0x20000001

08001518 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001518:	b40f      	push	{r0, r1, r2, r3}
 800151a:	b590      	push	{r4, r7, lr}
 800151c:	b089      	sub	sp, #36	; 0x24
 800151e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001520:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001524:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800152e:	4618      	mov	r0, r3
 8001530:	f004 ffaa 	bl	8006488 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001534:	2300      	movs	r3, #0
 8001536:	77fb      	strb	r3, [r7, #31]
 8001538:	e00b      	b.n	8001552 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	f107 0220 	add.w	r2, r7, #32
 8001540:	4413      	add	r3, r2
 8001542:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fed2 	bl	80012f0 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800154c:	7ffb      	ldrb	r3, [r7, #31]
 800154e:	3301      	adds	r3, #1
 8001550:	77fb      	strb	r3, [r7, #31]
 8001552:	7ffc      	ldrb	r4, [r7, #31]
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe41 	bl	80001e0 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	429c      	cmp	r4, r3
 8001562:	d202      	bcs.n	800156a <lcd16x2_printf+0x52>
 8001564:	7ffb      	ldrb	r3, [r7, #31]
 8001566:	2b0f      	cmp	r3, #15
 8001568:	d9e7      	bls.n	800153a <lcd16x2_printf+0x22>
  }
}
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001574:	b004      	add	sp, #16
 8001576:	4770      	bx	lr

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f000 fdfb 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f8a1 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f000 fa57 	bl	8001a38 <MX_GPIO_Init>
  MX_ADC1_Init();
 800158a:	f000 f8fd 	bl	8001788 <MX_ADC1_Init>
  MX_TIM5_Init();
 800158e:	f000 f9db 	bl	8001948 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001592:	f000 f94d 	bl	8001830 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001596:	4844      	ldr	r0, [pc, #272]	; (80016a8 <main+0x130>)
 8001598:	f002 f9b6 	bl	8003908 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800159c:	2100      	movs	r1, #0
 800159e:	4842      	ldr	r0, [pc, #264]	; (80016a8 <main+0x130>)
 80015a0:	f002 fac6 	bl	8003b30 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim5);
 80015a4:	4841      	ldr	r0, [pc, #260]	; (80016ac <main+0x134>)
 80015a6:	f002 f9af 	bl	8003908 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80015aa:	2104      	movs	r1, #4
 80015ac:	483f      	ldr	r0, [pc, #252]	; (80016ac <main+0x134>)
 80015ae:	f002 fabf 	bl	8003b30 <HAL_TIM_PWM_Start>

  lcd16x2_init_4bits(GPIOB, GPIO_PIN_1, GPIO_PIN_0,
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	9303      	str	r3, [sp, #12]
 80015b6:	2340      	movs	r3, #64	; 0x40
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	2320      	movs	r3, #32
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	2310      	movs	r3, #16
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <main+0x138>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	2102      	movs	r1, #2
 80015c8:	483a      	ldr	r0, [pc, #232]	; (80016b4 <main+0x13c>)
 80015ca:	f7ff fee9 	bl	80013a0 <lcd16x2_init_4bits>
		  GPIOA, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7);
  lcd16x2_cursorShow(false);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff ff7a 	bl	80014c8 <lcd16x2_cursorShow>
  lcd16x2_printf("Hello World");
 80015d4:	4838      	ldr	r0, [pc, #224]	; (80016b8 <main+0x140>)
 80015d6:	f7ff ff9f 	bl	8001518 <lcd16x2_printf>
  int count = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (count%2 == 0) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10d      	bne.n	8001604 <main+0x8c>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //Turn on green LED on PA5
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ee:	4830      	ldr	r0, [pc, #192]	; (80016b0 <main+0x138>)
 80015f0:	f001 fce8 	bl	8002fc4 <HAL_GPIO_WritePin>
	  		select_ADC_CH11();
 80015f4:	f000 fb16 	bl	8001c24 <select_ADC_CH11>
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);//DISABLE_PWM_CH2();
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <main+0x130>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001600:	635a      	str	r2, [r3, #52]	; 0x34
 8001602:	e00b      	b.n	800161c <main+0xa4>

	  	} else {
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //Turn on green LED on PA5
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800160a:	4829      	ldr	r0, [pc, #164]	; (80016b0 <main+0x138>)
 800160c:	f001 fcda 	bl	8002fc4 <HAL_GPIO_WritePin>
	  		select_ADC_CH12();
 8001610:	f000 fb28 	bl	8001c64 <select_ADC_CH12>
	  		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <main+0x130>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2200      	movs	r2, #0
 800161a:	635a      	str	r2, [r3, #52]	; 0x34
	  	}
	  	count++;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]

	  	HAL_ADC_Start(&hadc1);
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <main+0x144>)
 8001624:	f000 fe82 	bl	800232c <HAL_ADC_Start>
	  	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	4823      	ldr	r0, [pc, #140]	; (80016bc <main+0x144>)
 800162e:	f000 ff64 	bl	80024fa <HAL_ADC_PollForConversion>
	  	sample = HAL_ADC_GetValue(&hadc1);
 8001632:	4822      	ldr	r0, [pc, #136]	; (80016bc <main+0x144>)
 8001634:	f000 ffec 	bl	8002610 <HAL_ADC_GetValue>
 8001638:	60b8      	str	r0, [r7, #8]

	  	HAL_ADC_Stop(&hadc1);
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <main+0x144>)
 800163c:	f000 ff2a 	bl	8002494 <HAL_ADC_Stop>
	  	batteryVoltage = (float)sample*3.3/255.0;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164a:	ee17 0a90 	vmov	r0, s15
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	a311      	add	r3, pc, #68	; (adr r3, 8001698 <main+0x120>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffd6 	bl	8000608 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	a30e      	add	r3, pc, #56	; (adr r3, 80016a0 <main+0x128>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f8f7 	bl	800085c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fabf 	bl	8000bf8 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	607b      	str	r3, [r7, #4]

	  	//lcd16x2_1stLine();
	  	//lcd16x2_printf("%.5f", batteryVoltage);
	  	lcd16x2_2ndLine();
 800167e:	f7ff ff1b 	bl	80014b8 <lcd16x2_2ndLine>
	  	lcd16x2_printf("%f", rpm);
 8001682:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <main+0x148>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff66 	bl	8000558 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <main+0x14c>)
 8001692:	f7ff ff41 	bl	8001518 <lcd16x2_printf>
	  if (count%2 == 0) {
 8001696:	e7a2      	b.n	80015de <main+0x66>
 8001698:	66666666 	.word	0x66666666
 800169c:	400a6666 	.word	0x400a6666
 80016a0:	00000000 	.word	0x00000000
 80016a4:	406fe000 	.word	0x406fe000
 80016a8:	200002c4 	.word	0x200002c4
 80016ac:	20000230 	.word	0x20000230
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400
 80016b8:	08009258 	.word	0x08009258
 80016bc:	20000278 	.word	0x20000278
 80016c0:	200002c0 	.word	0x200002c0
 80016c4:	08009264 	.word	0x08009264

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	; 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	; 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f003 f966 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <SystemClock_Config+0xb8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <SystemClock_Config+0xb8>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <SystemClock_Config+0xb8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <SystemClock_Config+0xbc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <SystemClock_Config+0xbc>)
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <SystemClock_Config+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001728:	2302      	movs	r3, #2
 800172a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172c:	2301      	movs	r3, #1
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001730:	2310      	movs	r3, #16
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fc73 	bl	8003028 <HAL_RCC_OscConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001748:	f000 faac 	bl	8001ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	230f      	movs	r3, #15
 800174e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fed6 	bl	8003518 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001772:	f000 fa97 	bl	8001ca4 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	; 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_ADC1_Init+0x9c>)
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <MX_ADC1_Init+0xa0>)
 800179e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017cc:	4a17      	ldr	r2, [pc, #92]	; (800182c <MX_ADC1_Init+0xa4>)
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_ADC1_Init+0x9c>)
 80017ec:	f000 fd5a 	bl	80022a4 <HAL_ADC_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80017f6:	f000 fa55 	bl	8001ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80017fa:	230a      	movs	r3, #10
 80017fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_ADC1_Init+0x9c>)
 800180c:	f000 ff0e 	bl	800262c <HAL_ADC_ConfigChannel>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001816:	f000 fa45 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000278 	.word	0x20000278
 8001828:	40012000 	.word	0x40012000
 800182c:	0f000001 	.word	0x0f000001

08001830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	615a      	str	r2, [r3, #20]
 800185e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <MX_TIM2_Init+0x110>)
 8001862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <MX_TIM2_Init+0x110>)
 800186a:	229f      	movs	r2, #159	; 0x9f
 800186c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_TIM2_Init+0x110>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4292967295;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <MX_TIM2_Init+0x110>)
 8001876:	4a33      	ldr	r2, [pc, #204]	; (8001944 <MX_TIM2_Init+0x114>)
 8001878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_TIM2_Init+0x110>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_TIM2_Init+0x110>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001886:	482e      	ldr	r0, [pc, #184]	; (8001940 <MX_TIM2_Init+0x110>)
 8001888:	f001 ffee 	bl	8003868 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001892:	f000 fa07 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4827      	ldr	r0, [pc, #156]	; (8001940 <MX_TIM2_Init+0x110>)
 80018a4:	f002 fc12 	bl	80040cc <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80018ae:	f000 f9f9 	bl	8001ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018b2:	4823      	ldr	r0, [pc, #140]	; (8001940 <MX_TIM2_Init+0x110>)
 80018b4:	f002 f8e3 	bl	8003a7e <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018be:	f000 f9f1 	bl	8001ca4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80018c2:	481f      	ldr	r0, [pc, #124]	; (8001940 <MX_TIM2_Init+0x110>)
 80018c4:	f002 f882 	bl	80039cc <HAL_TIM_OC_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80018ce:	f000 f9e9 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <MX_TIM2_Init+0x110>)
 80018e2:	f002 ffb5 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0xc0>
  {
    Error_Handler();
 80018ec:	f000 f9da 	bl	8001ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80018f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_TIM2_Init+0x110>)
 800190a:	f002 fb21 	bl	8003f50 <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001914:	f000 f9c6 	bl	8001ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001918:	2300      	movs	r3, #0
 800191a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2204      	movs	r2, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM2_Init+0x110>)
 8001924:	f002 fabc 	bl	8003ea0 <HAL_TIM_OC_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800192e:	f000 f9b9 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM2_Init+0x110>)
 8001934:	f000 fa6c 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 8001938:	bf00      	nop
 800193a:	3738      	adds	r7, #56	; 0x38
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002c4 	.word	0x200002c4
 8001944:	ffe17b7f 	.word	0xffe17b7f

08001948 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08e      	sub	sp, #56	; 0x38
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <MX_TIM5_Init+0xe8>)
 800197a:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <MX_TIM5_Init+0xec>)
 800197c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 159;
 800197e:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <MX_TIM5_Init+0xe8>)
 8001980:	229f      	movs	r2, #159	; 0x9f
 8001982:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <MX_TIM5_Init+0xe8>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <MX_TIM5_Init+0xe8>)
 800198c:	f04f 32ff 	mov.w	r2, #4294967295
 8001990:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <MX_TIM5_Init+0xe8>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <MX_TIM5_Init+0xe8>)
 800199a:	2200      	movs	r2, #0
 800199c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800199e:	4824      	ldr	r0, [pc, #144]	; (8001a30 <MX_TIM5_Init+0xe8>)
 80019a0:	f001 ff62 	bl	8003868 <HAL_TIM_Base_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80019aa:	f000 f97b 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019b8:	4619      	mov	r1, r3
 80019ba:	481d      	ldr	r0, [pc, #116]	; (8001a30 <MX_TIM5_Init+0xe8>)
 80019bc:	f002 fb86 	bl	80040cc <HAL_TIM_ConfigClockSource>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80019c6:	f000 f96d 	bl	8001ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019ca:	4819      	ldr	r0, [pc, #100]	; (8001a30 <MX_TIM5_Init+0xe8>)
 80019cc:	f002 f857 	bl	8003a7e <HAL_TIM_PWM_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80019d6:	f000 f965 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	4619      	mov	r1, r3
 80019e8:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM5_Init+0xe8>)
 80019ea:	f002 ff31 	bl	8004850 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80019f4:	f000 f956 	bl	8001ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	; 0x60
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80019fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM5_Init+0xe8>)
 8001a12:	f002 fa9d 	bl	8003f50 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001a1c:	f000 f942 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM5_Init+0xe8>)
 8001a22:	f000 f9f5 	bl	8001e10 <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000230 	.word	0x20000230
 8001a34:	40000c00 	.word	0x40000c00

08001a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b35      	ldr	r3, [pc, #212]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a30      	ldr	r2, [pc, #192]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <MX_GPIO_Init+0x118>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8001aa8:	482a      	ldr	r0, [pc, #168]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001aaa:	f001 fa8b 	bl	8002fc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	4829      	ldr	r0, [pc, #164]	; (8001b58 <MX_GPIO_Init+0x120>)
 8001ab4:	f001 fa86 	bl	8002fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001ab8:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8001abc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4820      	ldr	r0, [pc, #128]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001ad2:	f001 f8db 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	481a      	ldr	r0, [pc, #104]	; (8001b58 <MX_GPIO_Init+0x120>)
 8001aee:	f001 f8cd 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001af2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af8:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_GPIO_Init+0x124>)
 8001afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4619      	mov	r1, r3
 8001b06:	4816      	ldr	r0, [pc, #88]	; (8001b60 <MX_GPIO_Init+0x128>)
 8001b08:	f001 f8c0 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_GPIO_Init+0x124>)
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_GPIO_Init+0x11c>)
 8001b22:	f001 f8b3 	bl	8002c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	2017      	movs	r0, #23
 8001b2c:	f001 f877 	bl	8002c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b30:	2017      	movs	r0, #23
 8001b32:	f001 f890 	bl	8002c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2028      	movs	r0, #40	; 0x28
 8001b3c:	f001 f86f 	bl	8002c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b40:	2028      	movs	r0, #40	; 0x28
 8001b42:	f001 f888 	bl	8002c56 <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	10110000 	.word	0x10110000
 8001b60:	40020800 	.word	0x40020800
 8001b64:	00000000 	.word	0x00000000

08001b68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin ) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == GPIO_PIN_6 ) {
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d102      	bne.n	8001b7e <HAL_GPIO_EXTI_Callback+0x16>
		int f = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
	} else if ( GPIO_Pin == GPIO_PIN_8 ) {
		if ( HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_8 ) ) {
			forward_rotation = true;
		}
	}
}
 8001b7c:	e03d      	b.n	8001bfa <HAL_GPIO_EXTI_Callback+0x92>
	} else if ( GPIO_Pin == GPIO_PIN_7 ) {
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	2b80      	cmp	r3, #128	; 0x80
 8001b82:	d12b      	bne.n	8001bdc <HAL_GPIO_EXTI_Callback+0x74>
		int cycle_count = __HAL_TIM_GET_COUNTER(&htim5);
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	60fb      	str	r3, [r7, #12]
		rpm = (float)60.0/(1.0e-5*24.0*cycle_count);//1.0e5/cycle_freq;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fcd1 	bl	8000534 <__aeabi_i2d>
 8001b92:	a31d      	add	r3, pc, #116	; (adr r3, 8001c08 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fd36 	bl	8000608 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	491b      	ldr	r1, [pc, #108]	; (8001c14 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ba6:	f7fe fe59 	bl	800085c <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff f821 	bl	8000bf8 <__aeabi_d2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a17      	ldr	r2, [pc, #92]	; (8001c18 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001bba:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim5, 0);
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
		if ( HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_8 ) ) {
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	4814      	ldr	r0, [pc, #80]	; (8001c1c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001bca:	f001 f9e3 	bl	8002f94 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d012      	beq.n	8001bfa <HAL_GPIO_EXTI_Callback+0x92>
			forward_rotation = false;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
}
 8001bda:	e00e      	b.n	8001bfa <HAL_GPIO_EXTI_Callback+0x92>
	} else if ( GPIO_Pin == GPIO_PIN_8 ) {
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d10a      	bne.n	8001bfa <HAL_GPIO_EXTI_Callback+0x92>
		if ( HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_8 ) ) {
 8001be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001bea:	f001 f9d3 	bl	8002f94 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_GPIO_EXTI_Callback+0x92>
			forward_rotation = true;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	f3af 8000 	nop.w
 8001c08:	4d551d6a 	.word	0x4d551d6a
 8001c0c:	3f2f7510 	.word	0x3f2f7510
 8001c10:	20000230 	.word	0x20000230
 8001c14:	404e0000 	.word	0x404e0000
 8001c18:	200002c0 	.word	0x200002c0
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	2000022c 	.word	0x2000022c

08001c24 <select_ADC_CH11>:
  {
	Error_Handler();
  }
}

void select_ADC_CH11(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_11;
 8001c36:	230b      	movs	r3, #11
 8001c38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c42:	463b      	mov	r3, r7
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <select_ADC_CH11+0x3c>)
 8001c48:	f000 fcf0 	bl	800262c <HAL_ADC_ConfigChannel>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <select_ADC_CH11+0x32>
  {
	Error_Handler();
 8001c52:	f000 f827 	bl	8001ca4 <Error_Handler>
  }
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000278 	.word	0x20000278

08001c64 <select_ADC_CH12>:

void select_ADC_CH12(void) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  sConfig.Channel = ADC_CHANNEL_12;
 8001c76:	230c      	movs	r3, #12
 8001c78:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <select_ADC_CH12+0x3c>)
 8001c88:	f000 fcd0 	bl	800262c <HAL_ADC_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <select_ADC_CH12+0x32>
  {
	Error_Handler();
 8001c92:	f000 f807 	bl	8001ca4 <Error_Handler>
  }
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000278 	.word	0x20000278

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cac:	e7fe      	b.n	8001cac <Error_Handler+0x8>
	...

08001cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_ADC_MspInit+0x7c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d127      	bne.n	8001d72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_ADC_MspInit+0x84>)
 8001d6e:	f000 ff8d 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d116      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a19      	ldr	r2, [pc, #100]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	201c      	movs	r0, #28
 8001dbc:	f000 ff2f 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc0:	201c      	movs	r0, #28
 8001dc2:	f000 ff48 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001dc6:	e01a      	b.n	8001dfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_TIM_Base_MspInit+0x84>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d115      	bne.n	8001dfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001ddc:	f043 0308 	orr.w	r3, r3, #8
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_TIM_Base_MspInit+0x80>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	2032      	movs	r0, #50	; 0x32
 8001df4:	f000 ff13 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001df8:	2032      	movs	r0, #50	; 0x32
 8001dfa:	f000 ff2c 	bl	8002c56 <HAL_NVIC_EnableIRQ>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40000c00 	.word	0x40000c00

08001e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d11e      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <HAL_TIM_MspPostInit+0xb4>)
 8001e6a:	f000 ff0f 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e6e:	e022      	b.n	8001eb6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_TIM_MspPostInit+0xb8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d11d      	bne.n	8001eb6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <HAL_TIM_MspPostInit+0xb0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e96:	2302      	movs	r3, #2
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <HAL_TIM_MspPostInit+0xb4>)
 8001eb2:	f000 feeb 	bl	8002c8c <HAL_GPIO_Init>
}
 8001eb6:	bf00      	nop
 8001eb8:	3728      	adds	r7, #40	; 0x28
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40000c00 	.word	0x40000c00

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f000 f980 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f24:	2040      	movs	r0, #64	; 0x40
 8001f26:	f001 f867 	bl	8002ff8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f2a:	2080      	movs	r0, #128	; 0x80
 8001f2c:	f001 f864 	bl	8002ff8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f34:	f001 f860 	bl	8002ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM2_IRQHandler+0x10>)
 8001f42:	f001 fea5 	bl	8003c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200002c4 	.word	0x200002c4

08001f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f58:	f001 f84e 	bl	8002ff8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f64:	4802      	ldr	r0, [pc, #8]	; (8001f70 <TIM5_IRQHandler+0x10>)
 8001f66:	f001 fe93 	bl	8003c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000230 	.word	0x20000230

08001f74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_kill>:

int _kill(int pid, int sig)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f8e:	f002 fce1 	bl	8004954 <__errno>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2216      	movs	r2, #22
 8001f96:	601a      	str	r2, [r3, #0]
	return -1;
 8001f98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_exit>:

void _exit (int status)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fac:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ffe7 	bl	8001f84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fb6:	e7fe      	b.n	8001fb6 <_exit+0x12>

08001fb8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fca:	f3af 8000 	nop.w
 8001fce:	4601      	mov	r1, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	b2ca      	uxtb	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf0      	blt.n	8001fca <_read+0x12>
	}

return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e009      	b.n	8002018 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf1      	blt.n	8002004 <_write+0x12>
	}
	return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002052:	605a      	str	r2, [r3, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f002 fc46 	bl	8004954 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20018000 	.word	0x20018000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	20000220 	.word	0x20000220
 80020fc:	20000320 	.word	0x20000320

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002140:	4c0b      	ldr	r4, [pc, #44]	; (8002170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800214e:	f7ff ffd7 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f002 fc05 	bl	8004960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7ff fa0f 	bl	8001578 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800215c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002168:	0800973c 	.word	0x0800973c
  ldr r2, =_sbss
 800216c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002170:	20000320 	.word	0x20000320

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 fd31 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fd80 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fd49 	bl	8002c72 <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 fd11 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000004 	.word	0x20000004
 8002214:	2000000c 	.word	0x2000000c
 8002218:	20000008 	.word	0x20000008

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c
 8002240:	2000030c 	.word	0x2000030c

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	2000030c 	.word	0x2000030c

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000000c 	.word	0x2000000c

080022a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e033      	b.n	8002322 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fd1c 	bl	8001d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d118      	bne.n	8002314 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ea:	f023 0302 	bic.w	r3, r3, #2
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 faba 	bl	8002870 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
 8002312:	e001      	b.n	8002318 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
	...

0800232c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_Start+0x1a>
 8002342:	2302      	movs	r3, #2
 8002344:	e097      	b.n	8002476 <HAL_ADC_Start+0x14a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d018      	beq.n	800238e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800236c:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_ADC_Start+0x158>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <HAL_ADC_Start+0x15c>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	0c9a      	lsrs	r2, r3, #18
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d15f      	bne.n	800245c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	f023 0206 	bic.w	r2, r3, #6
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_ADC_Start+0x160>)
 80023fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d129      	bne.n	8002474 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	e020      	b.n	8002474 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_ADC_Start+0x164>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d11b      	bne.n	8002474 <HAL_ADC_Start+0x148>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	e00b      	b.n	8002474 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000004 	.word	0x20000004
 8002488:	431bde83 	.word	0x431bde83
 800248c:	40012300 	.word	0x40012300
 8002490:	40012000 	.word	0x40012000

08002494 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Stop+0x16>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e021      	b.n	80024ee <HAL_ADC_Stop+0x5a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002516:	d113      	bne.n	8002540 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002526:	d10b      	bne.n	8002540 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e063      	b.n	8002608 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002540:	f7ff fe80 	bl	8002244 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002546:	e021      	b.n	800258c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254e:	d01d      	beq.n	800258c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_ADC_PollForConversion+0x6c>
 8002556:	f7ff fe75 	bl	8002244 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d212      	bcs.n	800258c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d00b      	beq.n	800258c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e03d      	b.n	8002608 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d1d6      	bne.n	8002548 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f06f 0212 	mvn.w	r2, #18
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d123      	bne.n	8002606 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11f      	bne.n	8002606 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d111      	bne.n	8002606 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x1c>
 8002644:	2302      	movs	r3, #2
 8002646:	e105      	b.n	8002854 <HAL_ADC_ConfigChannel+0x228>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b09      	cmp	r3, #9
 8002656:	d925      	bls.n	80026a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68d9      	ldr	r1, [r3, #12]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	3b1e      	subs	r3, #30
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43da      	mvns	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	400a      	ands	r2, r1
 800267c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68d9      	ldr	r1, [r3, #12]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	4603      	mov	r3, r0
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4403      	add	r3, r0
 8002696:	3b1e      	subs	r3, #30
 8002698:	409a      	lsls	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	430a      	orrs	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	e022      	b.n	80026ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6919      	ldr	r1, [r3, #16]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	2207      	movs	r2, #7
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	400a      	ands	r2, r1
 80026c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4403      	add	r3, r0
 80026e0:	409a      	lsls	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d824      	bhi.n	800273c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b05      	subs	r3, #5
 8002704:	221f      	movs	r2, #31
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b05      	subs	r3, #5
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	635a      	str	r2, [r3, #52]	; 0x34
 800273a:	e04c      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d824      	bhi.n	800278e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	3b23      	subs	r3, #35	; 0x23
 8002756:	221f      	movs	r2, #31
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43da      	mvns	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	400a      	ands	r2, r1
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b23      	subs	r3, #35	; 0x23
 8002780:	fa00 f203 	lsl.w	r2, r0, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
 800278c:	e023      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b41      	subs	r3, #65	; 0x41
 80027a0:	221f      	movs	r2, #31
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	3b41      	subs	r3, #65	; 0x41
 80027ca:	fa00 f203 	lsl.w	r2, r0, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d6:	4b22      	ldr	r3, [pc, #136]	; (8002860 <HAL_ADC_ConfigChannel+0x234>)
 80027d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_ADC_ConfigChannel+0x238>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d109      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1cc>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b12      	cmp	r3, #18
 80027ea:	d105      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_ADC_ConfigChannel+0x238>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d123      	bne.n	800284a <HAL_ADC_ConfigChannel+0x21e>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d003      	beq.n	8002812 <HAL_ADC_ConfigChannel+0x1e6>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b11      	cmp	r3, #17
 8002810:	d11b      	bne.n	800284a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b10      	cmp	r3, #16
 8002824:	d111      	bne.n	800284a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <HAL_ADC_ConfigChannel+0x23c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_ADC_ConfigChannel+0x240>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0c9a      	lsrs	r2, r3, #18
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800283c:	e002      	b.n	8002844 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3b01      	subs	r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f9      	bne.n	800283e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000
 8002868:	20000004 	.word	0x20000004
 800286c:	431bde83 	.word	0x431bde83

08002870 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002878:	4b79      	ldr	r3, [pc, #484]	; (8002a60 <ADC_Init+0x1f0>)
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	021a      	lsls	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	4a58      	ldr	r2, [pc, #352]	; (8002a64 <ADC_Init+0x1f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6899      	ldr	r1, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e00f      	b.n	800296e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800296c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0202 	bic.w	r2, r2, #2
 800297c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7e1b      	ldrb	r3, [r3, #24]
 8002988:	005a      	lsls	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	3b01      	subs	r3, #1
 80029c8:	035a      	lsls	r2, r3, #13
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e007      	b.n	80029e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	051a      	lsls	r2, r3, #20
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a26:	025a      	lsls	r2, r3, #9
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	029a      	lsls	r2, r3, #10
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40012300 	.word	0x40012300
 8002a64:	0f000001 	.word	0x0f000001

08002a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 0307 	and.w	r3, r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db0b      	blt.n	8002af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <__NVIC_EnableIRQ+0x38>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff8e 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff29 	bl	8002a68 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff3e 	bl	8002ab0 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff8e 	bl	8002b5c <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5d 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff31 	bl	8002acc <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e159      	b.n	8002f5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 8148 	bne.w	8002f56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d005      	beq.n	8002cde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d130      	bne.n	8002d40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2203      	movs	r2, #3
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d14:	2201      	movs	r2, #1
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 0201 	and.w	r2, r3, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d017      	beq.n	8002d7c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 0303 	and.w	r3, r3, #3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a2 	beq.w	8002f56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_GPIO_Init+0x2e8>)
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <HAL_GPIO_Init+0x2e8>)
 8002e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e20:	6453      	str	r3, [r2, #68]	; 0x44
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_GPIO_Init+0x2e8>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2e:	4a52      	ldr	r2, [pc, #328]	; (8002f78 <HAL_GPIO_Init+0x2ec>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <HAL_GPIO_Init+0x2f0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d019      	beq.n	8002e8e <HAL_GPIO_Init+0x202>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a48      	ldr	r2, [pc, #288]	; (8002f80 <HAL_GPIO_Init+0x2f4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d013      	beq.n	8002e8a <HAL_GPIO_Init+0x1fe>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <HAL_GPIO_Init+0x2f8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00d      	beq.n	8002e86 <HAL_GPIO_Init+0x1fa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a46      	ldr	r2, [pc, #280]	; (8002f88 <HAL_GPIO_Init+0x2fc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <HAL_GPIO_Init+0x1f6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a45      	ldr	r2, [pc, #276]	; (8002f8c <HAL_GPIO_Init+0x300>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d101      	bne.n	8002e7e <HAL_GPIO_Init+0x1f2>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x204>
 8002e7e:	2307      	movs	r3, #7
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x204>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x204>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x204>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x204>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_GPIO_Init+0x2ec>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed2:	4a2f      	ldr	r2, [pc, #188]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efc:	4a24      	ldr	r2, [pc, #144]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b18      	ldr	r3, [pc, #96]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HAL_GPIO_Init+0x304>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f aea2 	bls.w	8002ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40013c00 	.word	0x40013c00

08002f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e001      	b.n	8002fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd4:	787b      	ldrb	r3, [r7, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe0:	e003      	b.n	8002fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	041a      	lsls	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	619a      	str	r2, [r3, #24]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d006      	beq.n	800301c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fda6 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40013c00 	.word	0x40013c00

08003028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e264      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d075      	beq.n	8003132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003046:	4ba3      	ldr	r3, [pc, #652]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4ba0      	ldr	r3, [pc, #640]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305a:	2b08      	cmp	r3, #8
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b9d      	ldr	r3, [pc, #628]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b99      	ldr	r3, [pc, #612]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x108>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e23f      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x74>
 800308e:	4b91      	ldr	r3, [pc, #580]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a90      	ldr	r2, [pc, #576]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x98>
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b88      	ldr	r3, [pc, #544]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a87      	ldr	r2, [pc, #540]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 80030c0:	4b84      	ldr	r3, [pc, #528]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a83      	ldr	r2, [pc, #524]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a80      	ldr	r2, [pc, #512]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7ff f8b0 	bl	8002244 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f8ac 	bl	8002244 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e204      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xc0>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f89c 	bl	8002244 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff f898 	bl	8002244 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1f0      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0xe8>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b62      	ldr	r3, [pc, #392]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b5c      	ldr	r3, [pc, #368]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c4      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b56      	ldr	r3, [pc, #344]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4952      	ldr	r1, [pc, #328]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <HAL_RCC_OscConfig+0x2b0>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7ff f851 	bl	8002244 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a6:	f7ff f84d 	bl	8002244 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a5      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b46      	ldr	r3, [pc, #280]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b43      	ldr	r3, [pc, #268]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4940      	ldr	r1, [pc, #256]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0x2b0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7ff f830 	bl	8002244 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7ff f82c 	bl	8002244 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e184      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d030      	beq.n	8003274 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b30      	ldr	r3, [pc, #192]	; (80032dc <HAL_RCC_OscConfig+0x2b4>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7ff f810 	bl	8002244 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7ff f80c 	bl	8002244 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e164      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x200>
 8003246:	e015      	b.n	8003274 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <HAL_RCC_OscConfig+0x2b4>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fff9 	bl	8002244 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fff5 	bl	8002244 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e14d      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80a0 	beq.w	80033c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_RCC_OscConfig+0x2b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d121      	bne.n	8003302 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_RCC_OscConfig+0x2b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_RCC_OscConfig+0x2b8>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7fe ffbb 	bl	8002244 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e011      	b.n	80032f6 <HAL_RCC_OscConfig+0x2ce>
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	42470000 	.word	0x42470000
 80032dc:	42470e80 	.word	0x42470e80
 80032e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe ffae 	bl	8002244 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e106      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	4b85      	ldr	r3, [pc, #532]	; (800350c <HAL_RCC_OscConfig+0x4e4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <HAL_RCC_OscConfig+0x2f0>
 800330a:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	; 0x70
 8003316:	e01c      	b.n	8003352 <HAL_RCC_OscConfig+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b05      	cmp	r3, #5
 800331e:	d10c      	bne.n	800333a <HAL_RCC_OscConfig+0x312>
 8003320:	4b7b      	ldr	r3, [pc, #492]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a7a      	ldr	r2, [pc, #488]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a77      	ldr	r2, [pc, #476]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e00b      	b.n	8003352 <HAL_RCC_OscConfig+0x32a>
 800333a:	4b75      	ldr	r3, [pc, #468]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a74      	ldr	r2, [pc, #464]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
 8003346:	4b72      	ldr	r3, [pc, #456]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	4a71      	ldr	r2, [pc, #452]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d015      	beq.n	8003386 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7fe ff73 	bl	8002244 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fe ff6f 	bl	8002244 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0c5      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	4b65      	ldr	r3, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ee      	beq.n	8003362 <HAL_RCC_OscConfig+0x33a>
 8003384:	e014      	b.n	80033b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe ff5d 	bl	8002244 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fe ff59 	bl	8002244 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	; 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e0af      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ee      	bne.n	800338e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d105      	bne.n	80033c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b6:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f000 809b 	beq.w	8003502 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033cc:	4b50      	ldr	r3, [pc, #320]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d05c      	beq.n	8003492 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d141      	bne.n	8003464 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe ff2d 	bl	8002244 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe ff29 	bl	8002244 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e081      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	019b      	lsls	r3, r3, #6
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	3b01      	subs	r3, #1
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	4937      	ldr	r1, [pc, #220]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <HAL_RCC_OscConfig+0x4ec>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe ff02 	bl	8002244 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fefe 	bl	8002244 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e056      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003456:	4b2e      	ldr	r3, [pc, #184]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x41c>
 8003462:	e04e      	b.n	8003502 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_RCC_OscConfig+0x4ec>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe feeb 	bl	8002244 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003472:	f7fe fee7 	bl	8002244 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e03f      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f0      	bne.n	8003472 <HAL_RCC_OscConfig+0x44a>
 8003490:	e037      	b.n	8003502 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e032      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_RCC_OscConfig+0x4e8>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d028      	beq.n	80034fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d121      	bne.n	80034fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d11a      	bne.n	80034fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d111      	bne.n	80034fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40007000 	.word	0x40007000
 8003510:	40023800 	.word	0x40023800
 8003514:	42470060 	.word	0x42470060

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fe fe1c 	bl	8002244 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe fe18 	bl	8002244 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	; (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fd7c 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08009268 	.word	0x08009268
 80036dc:	20000004 	.word	0x20000004
 80036e0:	20000008 	.word	0x20000008

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036ea:	2100      	movs	r1, #0
 80036ec:	6079      	str	r1, [r7, #4]
 80036ee:	2100      	movs	r1, #0
 80036f0:	60f9      	str	r1, [r7, #12]
 80036f2:	2100      	movs	r1, #0
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036f6:	2100      	movs	r1, #0
 80036f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fa:	4952      	ldr	r1, [pc, #328]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 80036fc:	6889      	ldr	r1, [r1, #8]
 80036fe:	f001 010c 	and.w	r1, r1, #12
 8003702:	2908      	cmp	r1, #8
 8003704:	d00d      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x3e>
 8003706:	2908      	cmp	r1, #8
 8003708:	f200 8094 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x150>
 800370c:	2900      	cmp	r1, #0
 800370e:	d002      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x32>
 8003710:	2904      	cmp	r1, #4
 8003712:	d003      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x38>
 8003714:	e08e      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003716:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_GetSysClockFreq+0x164>)
 8003718:	60bb      	str	r3, [r7, #8]
       break;
 800371a:	e08e      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371c:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_RCC_GetSysClockFreq+0x168>)
 800371e:	60bb      	str	r3, [r7, #8]
      break;
 8003720:	e08b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003722:	4948      	ldr	r1, [pc, #288]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 8003724:	6849      	ldr	r1, [r1, #4]
 8003726:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800372a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372c:	4945      	ldr	r1, [pc, #276]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 800372e:	6849      	ldr	r1, [r1, #4]
 8003730:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003734:	2900      	cmp	r1, #0
 8003736:	d024      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003738:	4942      	ldr	r1, [pc, #264]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 800373a:	6849      	ldr	r1, [r1, #4]
 800373c:	0989      	lsrs	r1, r1, #6
 800373e:	4608      	mov	r0, r1
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003748:	f04f 0500 	mov.w	r5, #0
 800374c:	ea00 0204 	and.w	r2, r0, r4
 8003750:	ea01 0305 	and.w	r3, r1, r5
 8003754:	493d      	ldr	r1, [pc, #244]	; (800384c <HAL_RCC_GetSysClockFreq+0x168>)
 8003756:	fb01 f003 	mul.w	r0, r1, r3
 800375a:	2100      	movs	r1, #0
 800375c:	fb01 f102 	mul.w	r1, r1, r2
 8003760:	1844      	adds	r4, r0, r1
 8003762:	493a      	ldr	r1, [pc, #232]	; (800384c <HAL_RCC_GetSysClockFreq+0x168>)
 8003764:	fba2 0101 	umull	r0, r1, r2, r1
 8003768:	1863      	adds	r3, r4, r1
 800376a:	4619      	mov	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	f7fd fa90 	bl	8000c98 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4613      	mov	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e04a      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	461a      	mov	r2, r3
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003792:	f04f 0100 	mov.w	r1, #0
 8003796:	ea02 0400 	and.w	r4, r2, r0
 800379a:	ea03 0501 	and.w	r5, r3, r1
 800379e:	4620      	mov	r0, r4
 80037a0:	4629      	mov	r1, r5
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	014b      	lsls	r3, r1, #5
 80037ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037b0:	0142      	lsls	r2, r0, #5
 80037b2:	4610      	mov	r0, r2
 80037b4:	4619      	mov	r1, r3
 80037b6:	1b00      	subs	r0, r0, r4
 80037b8:	eb61 0105 	sbc.w	r1, r1, r5
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	018b      	lsls	r3, r1, #6
 80037c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037ca:	0182      	lsls	r2, r0, #6
 80037cc:	1a12      	subs	r2, r2, r0
 80037ce:	eb63 0301 	sbc.w	r3, r3, r1
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f04f 0100 	mov.w	r1, #0
 80037da:	00d9      	lsls	r1, r3, #3
 80037dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037e0:	00d0      	lsls	r0, r2, #3
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	1912      	adds	r2, r2, r4
 80037e8:	eb45 0303 	adc.w	r3, r5, r3
 80037ec:	f04f 0000 	mov.w	r0, #0
 80037f0:	f04f 0100 	mov.w	r1, #0
 80037f4:	0299      	lsls	r1, r3, #10
 80037f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037fa:	0290      	lsls	r0, r2, #10
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	f7fd fa44 	bl	8000c98 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <HAL_RCC_GetSysClockFreq+0x160>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	60bb      	str	r3, [r7, #8]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_RCC_GetSysClockFreq+0x164>)
 8003836:	60bb      	str	r3, [r7, #8]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	68bb      	ldr	r3, [r7, #8]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bdb0      	pop	{r4, r5, r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	017d7840 	.word	0x017d7840

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e041      	b.n	80038fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fe fa7a 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 fd06 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e044      	b.n	80039aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1e      	ldr	r2, [pc, #120]	; (80039b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x6c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d013      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x6c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x6c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x6c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x6c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d111      	bne.n	8003998 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b06      	cmp	r3, #6
 8003984:	d010      	beq.n	80039a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	e007      	b.n	80039a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40014000 	.word	0x40014000

080039cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e041      	b.n	8003a62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f839 	bl	8003a6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	f000 fc54 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e041      	b.n	8003b14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f839 	bl	8003b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 fbfb 	bl	80042b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_TIM_PWM_Start+0x24>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e022      	b.n	8003b9a <HAL_TIM_PWM_Start+0x6a>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d109      	bne.n	8003b6e <HAL_TIM_PWM_Start+0x3e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	e015      	b.n	8003b9a <HAL_TIM_PWM_Start+0x6a>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d109      	bne.n	8003b88 <HAL_TIM_PWM_Start+0x58>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e008      	b.n	8003b9a <HAL_TIM_PWM_Start+0x6a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e068      	b.n	8003c74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_PWM_Start+0x82>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	e013      	b.n	8003bda <HAL_TIM_PWM_Start+0xaa>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_PWM_Start+0x92>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc0:	e00b      	b.n	8003bda <HAL_TIM_PWM_Start+0xaa>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start+0xa2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	e003      	b.n	8003bda <HAL_TIM_PWM_Start+0xaa>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	6839      	ldr	r1, [r7, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 fe0e 	bl	8004804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a23      	ldr	r2, [pc, #140]	; (8003c7c <HAL_TIM_PWM_Start+0x14c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d107      	bne.n	8003c02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1d      	ldr	r2, [pc, #116]	; (8003c7c <HAL_TIM_PWM_Start+0x14c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x10e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d013      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x10e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a19      	ldr	r2, [pc, #100]	; (8003c80 <HAL_TIM_PWM_Start+0x150>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x10e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <HAL_TIM_PWM_Start+0x154>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x10e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_TIM_PWM_Start+0x158>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x10e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <HAL_TIM_PWM_Start+0x15c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d010      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c60:	e007      	b.n	8003c72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40000400 	.word	0x40000400
 8003c84:	40000800 	.word	0x40000800
 8003c88:	40000c00 	.word	0x40000c00
 8003c8c:	40014000 	.word	0x40014000

08003c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0202 	mvn.w	r2, #2
 8003cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fad2 	bl	800427c <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fac4 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fad5 	bl	8004290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0204 	mvn.w	r2, #4
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 faa8 	bl	800427c <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fa9a 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 faab 	bl	8004290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0208 	mvn.w	r2, #8
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2204      	movs	r2, #4
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa7e 	bl	800427c <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa70 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fa81 	bl	8004290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0310 	and.w	r3, r3, #16
 8003d9e:	2b10      	cmp	r3, #16
 8003da0:	d122      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d11b      	bne.n	8003de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0210 	mvn.w	r2, #16
 8003db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa54 	bl	800427c <HAL_TIM_IC_CaptureCallback>
 8003dd4:	e005      	b.n	8003de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fa46 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa57 	bl	8004290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d10e      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d107      	bne.n	8003e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0201 	mvn.w	r2, #1
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa20 	bl	8004254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1e:	2b80      	cmp	r3, #128	; 0x80
 8003e20:	d10e      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d107      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fd80 	bl	8004940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b40      	cmp	r3, #64	; 0x40
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fa1c 	bl	80042a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0220 	mvn.w	r2, #32
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fd4a 	bl	800492c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_TIM_OC_ConfigChannel+0x1a>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e046      	b.n	8003f48 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b0c      	cmp	r3, #12
 8003ec6:	d839      	bhi.n	8003f3c <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003f3d 	.word	0x08003f3d
 8003edc:	08003f3d 	.word	0x08003f3d
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f3d 	.word	0x08003f3d
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003f3d 	.word	0x08003f3d
 8003ef0:	08003f21 	.word	0x08003f21
 8003ef4:	08003f3d 	.word	0x08003f3d
 8003ef8:	08003f3d 	.word	0x08003f3d
 8003efc:	08003f3d 	.word	0x08003f3d
 8003f00:	08003f2f 	.word	0x08003f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fa54 	bl	80043b8 <TIM_OC1_SetConfig>
      break;
 8003f10:	e015      	b.n	8003f3e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fab3 	bl	8004484 <TIM_OC2_SetConfig>
      break;
 8003f1e:	e00e      	b.n	8003f3e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fb18 	bl	800455c <TIM_OC3_SetConfig>
      break;
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fb7b 	bl	8004630 <TIM_OC4_SetConfig>
      break;
 8003f3a:	e000      	b.n	8003f3e <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e0ac      	b.n	80040c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	f200 809f 	bhi.w	80040b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fb5 	.word	0x08003fb5
 8003f84:	080040b9 	.word	0x080040b9
 8003f88:	080040b9 	.word	0x080040b9
 8003f8c:	080040b9 	.word	0x080040b9
 8003f90:	08003ff5 	.word	0x08003ff5
 8003f94:	080040b9 	.word	0x080040b9
 8003f98:	080040b9 	.word	0x080040b9
 8003f9c:	080040b9 	.word	0x080040b9
 8003fa0:	08004037 	.word	0x08004037
 8003fa4:	080040b9 	.word	0x080040b9
 8003fa8:	080040b9 	.word	0x080040b9
 8003fac:	080040b9 	.word	0x080040b9
 8003fb0:	08004077 	.word	0x08004077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f9fc 	bl	80043b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0208 	orr.w	r2, r2, #8
 8003fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0204 	bic.w	r2, r2, #4
 8003fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6999      	ldr	r1, [r3, #24]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	619a      	str	r2, [r3, #24]
      break;
 8003ff2:	e062      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fa42 	bl	8004484 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800400e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6999      	ldr	r1, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	619a      	str	r2, [r3, #24]
      break;
 8004034:	e041      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fa8d 	bl	800455c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0208 	orr.w	r2, r2, #8
 8004050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0204 	bic.w	r2, r2, #4
 8004060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69d9      	ldr	r1, [r3, #28]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
      break;
 8004074:	e021      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fad7 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69d9      	ldr	r1, [r3, #28]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	021a      	lsls	r2, r3, #8
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	61da      	str	r2, [r3, #28]
      break;
 80040b6:	e000      	b.n	80040ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80040b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_TIM_ConfigClockSource+0x18>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e0b3      	b.n	800424c <HAL_TIM_ConfigClockSource+0x180>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411c:	d03e      	beq.n	800419c <HAL_TIM_ConfigClockSource+0xd0>
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004122:	f200 8087 	bhi.w	8004234 <HAL_TIM_ConfigClockSource+0x168>
 8004126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412a:	f000 8085 	beq.w	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 800412e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004132:	d87f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 8004134:	2b70      	cmp	r3, #112	; 0x70
 8004136:	d01a      	beq.n	800416e <HAL_TIM_ConfigClockSource+0xa2>
 8004138:	2b70      	cmp	r3, #112	; 0x70
 800413a:	d87b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 800413c:	2b60      	cmp	r3, #96	; 0x60
 800413e:	d050      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x116>
 8004140:	2b60      	cmp	r3, #96	; 0x60
 8004142:	d877      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 8004144:	2b50      	cmp	r3, #80	; 0x50
 8004146:	d03c      	beq.n	80041c2 <HAL_TIM_ConfigClockSource+0xf6>
 8004148:	2b50      	cmp	r3, #80	; 0x50
 800414a:	d873      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d058      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x136>
 8004150:	2b40      	cmp	r3, #64	; 0x40
 8004152:	d86f      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 8004154:	2b30      	cmp	r3, #48	; 0x30
 8004156:	d064      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x156>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d86b      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 800415c:	2b20      	cmp	r3, #32
 800415e:	d060      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x156>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d867      	bhi.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x156>
 8004168:	2b10      	cmp	r3, #16
 800416a:	d05a      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800416c:	e062      	b.n	8004234 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f000 fb21 	bl	80047c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004190:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	609a      	str	r2, [r3, #8]
      break;
 800419a:	e04e      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6899      	ldr	r1, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f000 fb0a 	bl	80047c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689a      	ldr	r2, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041be:	609a      	str	r2, [r3, #8]
      break;
 80041c0:	e03b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f000 fa7e 	bl	80046d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2150      	movs	r1, #80	; 0x50
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fad7 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 80041e0:	e02b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fa9d 	bl	800472e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2160      	movs	r1, #96	; 0x60
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fac7 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004200:	e01b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fa5e 	bl	80046d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fab7 	bl	800478e <TIM_ITRx_SetConfig>
      break;
 8004220:	e00b      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f000 faae 	bl	800478e <TIM_ITRx_SetConfig>
        break;
 8004232:	e002      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004238:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a34      	ldr	r2, [pc, #208]	; (800439c <TIM_Base_SetConfig+0xe4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00f      	beq.n	80042f0 <TIM_Base_SetConfig+0x38>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d6:	d00b      	beq.n	80042f0 <TIM_Base_SetConfig+0x38>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <TIM_Base_SetConfig+0xe8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d007      	beq.n	80042f0 <TIM_Base_SetConfig+0x38>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <TIM_Base_SetConfig+0xec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_Base_SetConfig+0x38>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a2f      	ldr	r2, [pc, #188]	; (80043a8 <TIM_Base_SetConfig+0xf0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a25      	ldr	r2, [pc, #148]	; (800439c <TIM_Base_SetConfig+0xe4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01b      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d017      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <TIM_Base_SetConfig+0xe8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <TIM_Base_SetConfig+0xec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d00f      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a20      	ldr	r2, [pc, #128]	; (80043a8 <TIM_Base_SetConfig+0xf0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00b      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a1f      	ldr	r2, [pc, #124]	; (80043ac <TIM_Base_SetConfig+0xf4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <TIM_Base_SetConfig+0xf8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a1d      	ldr	r2, [pc, #116]	; (80043b4 <TIM_Base_SetConfig+0xfc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d108      	bne.n	8004354 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <TIM_Base_SetConfig+0xe4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d103      	bne.n	8004388 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	615a      	str	r2, [r3, #20]
}
 800438e:	bf00      	nop
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40014000 	.word	0x40014000
 80043b0:	40014400 	.word	0x40014400
 80043b4:	40014800 	.word	0x40014800

080043b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0201 	bic.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0303 	bic.w	r3, r3, #3
 80043ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f023 0302 	bic.w	r3, r3, #2
 8004400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a1c      	ldr	r2, [pc, #112]	; (8004480 <TIM_OC1_SetConfig+0xc8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10c      	bne.n	800442e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0308 	bic.w	r3, r3, #8
 800441a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a13      	ldr	r2, [pc, #76]	; (8004480 <TIM_OC1_SetConfig+0xc8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d111      	bne.n	800445a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	621a      	str	r2, [r3, #32]
}
 8004474:	bf00      	nop
 8004476:	371c      	adds	r7, #28
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40010000 	.word	0x40010000

08004484 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	021b      	lsls	r3, r3, #8
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 0320 	bic.w	r3, r3, #32
 80044ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <TIM_OC2_SetConfig+0xd4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10d      	bne.n	8004500 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <TIM_OC2_SetConfig+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d113      	bne.n	8004530 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800450e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40010000 	.word	0x40010000

0800455c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <TIM_OC3_SetConfig+0xd0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10d      	bne.n	80045d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a14      	ldr	r2, [pc, #80]	; (800462c <TIM_OC3_SetConfig+0xd0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d113      	bne.n	8004606 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	40010000 	.word	0x40010000

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a10      	ldr	r2, [pc, #64]	; (80046cc <TIM_OC4_SetConfig+0x9c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004696:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000

080046d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 030a 	bic.w	r3, r3, #10
 800470c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472e:	b480      	push	{r7}
 8004730:	b087      	sub	sp, #28
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0210 	bic.w	r2, r3, #16
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	031b      	lsls	r3, r3, #12
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f043 0307 	orr.w	r3, r3, #7
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	021a      	lsls	r2, r3, #8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	43db      	mvns	r3, r3
 8004826:	401a      	ands	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1a      	ldr	r2, [r3, #32]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	fa01 f303 	lsl.w	r3, r1, r3
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004864:	2302      	movs	r3, #2
 8004866:	e050      	b.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4313      	orrs	r3, r2
 8004898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d018      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d013      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	; (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d10c      	bne.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40010000 	.word	0x40010000
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800
 8004924:	40000c00 	.word	0x40000c00
 8004928:	40014000 	.word	0x40014000

0800492c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <__errno>:
 8004954:	4b01      	ldr	r3, [pc, #4]	; (800495c <__errno+0x8>)
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000010 	.word	0x20000010

08004960 <__libc_init_array>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	4d0d      	ldr	r5, [pc, #52]	; (8004998 <__libc_init_array+0x38>)
 8004964:	4c0d      	ldr	r4, [pc, #52]	; (800499c <__libc_init_array+0x3c>)
 8004966:	1b64      	subs	r4, r4, r5
 8004968:	10a4      	asrs	r4, r4, #2
 800496a:	2600      	movs	r6, #0
 800496c:	42a6      	cmp	r6, r4
 800496e:	d109      	bne.n	8004984 <__libc_init_array+0x24>
 8004970:	4d0b      	ldr	r5, [pc, #44]	; (80049a0 <__libc_init_array+0x40>)
 8004972:	4c0c      	ldr	r4, [pc, #48]	; (80049a4 <__libc_init_array+0x44>)
 8004974:	f004 fc64 	bl	8009240 <_init>
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	2600      	movs	r6, #0
 800497e:	42a6      	cmp	r6, r4
 8004980:	d105      	bne.n	800498e <__libc_init_array+0x2e>
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	f855 3b04 	ldr.w	r3, [r5], #4
 8004988:	4798      	blx	r3
 800498a:	3601      	adds	r6, #1
 800498c:	e7ee      	b.n	800496c <__libc_init_array+0xc>
 800498e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004992:	4798      	blx	r3
 8004994:	3601      	adds	r6, #1
 8004996:	e7f2      	b.n	800497e <__libc_init_array+0x1e>
 8004998:	08009734 	.word	0x08009734
 800499c:	08009734 	.word	0x08009734
 80049a0:	08009734 	.word	0x08009734
 80049a4:	08009738 	.word	0x08009738

080049a8 <memset>:
 80049a8:	4402      	add	r2, r0
 80049aa:	4603      	mov	r3, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	f803 1b01 	strb.w	r1, [r3], #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <__cvt>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	ec55 4b10 	vmov	r4, r5, d0
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	460e      	mov	r6, r1
 80049c4:	4619      	mov	r1, r3
 80049c6:	462b      	mov	r3, r5
 80049c8:	bfbb      	ittet	lt
 80049ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80049ce:	461d      	movlt	r5, r3
 80049d0:	2300      	movge	r3, #0
 80049d2:	232d      	movlt	r3, #45	; 0x2d
 80049d4:	700b      	strb	r3, [r1, #0]
 80049d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80049dc:	4691      	mov	r9, r2
 80049de:	f023 0820 	bic.w	r8, r3, #32
 80049e2:	bfbc      	itt	lt
 80049e4:	4622      	movlt	r2, r4
 80049e6:	4614      	movlt	r4, r2
 80049e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ec:	d005      	beq.n	80049fa <__cvt+0x42>
 80049ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049f2:	d100      	bne.n	80049f6 <__cvt+0x3e>
 80049f4:	3601      	adds	r6, #1
 80049f6:	2102      	movs	r1, #2
 80049f8:	e000      	b.n	80049fc <__cvt+0x44>
 80049fa:	2103      	movs	r1, #3
 80049fc:	ab03      	add	r3, sp, #12
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	ab02      	add	r3, sp, #8
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	ec45 4b10 	vmov	d0, r4, r5
 8004a08:	4653      	mov	r3, sl
 8004a0a:	4632      	mov	r2, r6
 8004a0c:	f001 fdd4 	bl	80065b8 <_dtoa_r>
 8004a10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a14:	4607      	mov	r7, r0
 8004a16:	d102      	bne.n	8004a1e <__cvt+0x66>
 8004a18:	f019 0f01 	tst.w	r9, #1
 8004a1c:	d022      	beq.n	8004a64 <__cvt+0xac>
 8004a1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a22:	eb07 0906 	add.w	r9, r7, r6
 8004a26:	d110      	bne.n	8004a4a <__cvt+0x92>
 8004a28:	783b      	ldrb	r3, [r7, #0]
 8004a2a:	2b30      	cmp	r3, #48	; 0x30
 8004a2c:	d10a      	bne.n	8004a44 <__cvt+0x8c>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2300      	movs	r3, #0
 8004a32:	4620      	mov	r0, r4
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7fc f84f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a3a:	b918      	cbnz	r0, 8004a44 <__cvt+0x8c>
 8004a3c:	f1c6 0601 	rsb	r6, r6, #1
 8004a40:	f8ca 6000 	str.w	r6, [sl]
 8004a44:	f8da 3000 	ldr.w	r3, [sl]
 8004a48:	4499      	add	r9, r3
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fc f841 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a56:	b108      	cbz	r0, 8004a5c <__cvt+0xa4>
 8004a58:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a5c:	2230      	movs	r2, #48	; 0x30
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	454b      	cmp	r3, r9
 8004a62:	d307      	bcc.n	8004a74 <__cvt+0xbc>
 8004a64:	9b03      	ldr	r3, [sp, #12]
 8004a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a68:	1bdb      	subs	r3, r3, r7
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	b004      	add	sp, #16
 8004a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a74:	1c59      	adds	r1, r3, #1
 8004a76:	9103      	str	r1, [sp, #12]
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e7f0      	b.n	8004a5e <__cvt+0xa6>

08004a7c <__exponent>:
 8004a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2900      	cmp	r1, #0
 8004a82:	bfb8      	it	lt
 8004a84:	4249      	neglt	r1, r1
 8004a86:	f803 2b02 	strb.w	r2, [r3], #2
 8004a8a:	bfb4      	ite	lt
 8004a8c:	222d      	movlt	r2, #45	; 0x2d
 8004a8e:	222b      	movge	r2, #43	; 0x2b
 8004a90:	2909      	cmp	r1, #9
 8004a92:	7042      	strb	r2, [r0, #1]
 8004a94:	dd2a      	ble.n	8004aec <__exponent+0x70>
 8004a96:	f10d 0407 	add.w	r4, sp, #7
 8004a9a:	46a4      	mov	ip, r4
 8004a9c:	270a      	movs	r7, #10
 8004a9e:	46a6      	mov	lr, r4
 8004aa0:	460a      	mov	r2, r1
 8004aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8004aaa:	3530      	adds	r5, #48	; 0x30
 8004aac:	2a63      	cmp	r2, #99	; 0x63
 8004aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	dcf1      	bgt.n	8004a9e <__exponent+0x22>
 8004aba:	3130      	adds	r1, #48	; 0x30
 8004abc:	f1ae 0502 	sub.w	r5, lr, #2
 8004ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ac4:	1c44      	adds	r4, r0, #1
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4561      	cmp	r1, ip
 8004aca:	d30a      	bcc.n	8004ae2 <__exponent+0x66>
 8004acc:	f10d 0209 	add.w	r2, sp, #9
 8004ad0:	eba2 020e 	sub.w	r2, r2, lr
 8004ad4:	4565      	cmp	r5, ip
 8004ad6:	bf88      	it	hi
 8004ad8:	2200      	movhi	r2, #0
 8004ada:	4413      	add	r3, r2
 8004adc:	1a18      	subs	r0, r3, r0
 8004ade:	b003      	add	sp, #12
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004aea:	e7ed      	b.n	8004ac8 <__exponent+0x4c>
 8004aec:	2330      	movs	r3, #48	; 0x30
 8004aee:	3130      	adds	r1, #48	; 0x30
 8004af0:	7083      	strb	r3, [r0, #2]
 8004af2:	70c1      	strb	r1, [r0, #3]
 8004af4:	1d03      	adds	r3, r0, #4
 8004af6:	e7f1      	b.n	8004adc <__exponent+0x60>

08004af8 <_printf_float>:
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	ed2d 8b02 	vpush	{d8}
 8004b00:	b08d      	sub	sp, #52	; 0x34
 8004b02:	460c      	mov	r4, r1
 8004b04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b08:	4616      	mov	r6, r2
 8004b0a:	461f      	mov	r7, r3
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	f002 feaf 	bl	8007870 <_localeconv_r>
 8004b12:	f8d0 a000 	ldr.w	sl, [r0]
 8004b16:	4650      	mov	r0, sl
 8004b18:	f7fb fb62 	bl	80001e0 <strlen>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	f8d8 3000 	ldr.w	r3, [r8]
 8004b28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b2c:	3307      	adds	r3, #7
 8004b2e:	f023 0307 	bic.w	r3, r3, #7
 8004b32:	f103 0208 	add.w	r2, r3, #8
 8004b36:	f8c8 2000 	str.w	r2, [r8]
 8004b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004b4a:	9307      	str	r3, [sp, #28]
 8004b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b50:	ee08 0a10 	vmov	s16, r0
 8004b54:	4b9f      	ldr	r3, [pc, #636]	; (8004dd4 <_printf_float+0x2dc>)
 8004b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b5e:	f7fb ffed 	bl	8000b3c <__aeabi_dcmpun>
 8004b62:	bb88      	cbnz	r0, 8004bc8 <_printf_float+0xd0>
 8004b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b68:	4b9a      	ldr	r3, [pc, #616]	; (8004dd4 <_printf_float+0x2dc>)
 8004b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6e:	f7fb ffc7 	bl	8000b00 <__aeabi_dcmple>
 8004b72:	bb48      	cbnz	r0, 8004bc8 <_printf_float+0xd0>
 8004b74:	2200      	movs	r2, #0
 8004b76:	2300      	movs	r3, #0
 8004b78:	4640      	mov	r0, r8
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	f7fb ffb6 	bl	8000aec <__aeabi_dcmplt>
 8004b80:	b110      	cbz	r0, 8004b88 <_printf_float+0x90>
 8004b82:	232d      	movs	r3, #45	; 0x2d
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	4b93      	ldr	r3, [pc, #588]	; (8004dd8 <_printf_float+0x2e0>)
 8004b8a:	4894      	ldr	r0, [pc, #592]	; (8004ddc <_printf_float+0x2e4>)
 8004b8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b90:	bf94      	ite	ls
 8004b92:	4698      	movls	r8, r3
 8004b94:	4680      	movhi	r8, r0
 8004b96:	2303      	movs	r3, #3
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	9b05      	ldr	r3, [sp, #20]
 8004b9c:	f023 0204 	bic.w	r2, r3, #4
 8004ba0:	6022      	str	r2, [r4, #0]
 8004ba2:	f04f 0900 	mov.w	r9, #0
 8004ba6:	9700      	str	r7, [sp, #0]
 8004ba8:	4633      	mov	r3, r6
 8004baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 f9d8 	bl	8004f64 <_printf_common>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f040 8090 	bne.w	8004cda <_printf_float+0x1e2>
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	b00d      	add	sp, #52	; 0x34
 8004bc0:	ecbd 8b02 	vpop	{d8}
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb ffb4 	bl	8000b3c <__aeabi_dcmpun>
 8004bd4:	b140      	cbz	r0, 8004be8 <_printf_float+0xf0>
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfbc      	itt	lt
 8004bdc:	232d      	movlt	r3, #45	; 0x2d
 8004bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004be2:	487f      	ldr	r0, [pc, #508]	; (8004de0 <_printf_float+0x2e8>)
 8004be4:	4b7f      	ldr	r3, [pc, #508]	; (8004de4 <_printf_float+0x2ec>)
 8004be6:	e7d1      	b.n	8004b8c <_printf_float+0x94>
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004bee:	9206      	str	r2, [sp, #24]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	d13f      	bne.n	8004c74 <_printf_float+0x17c>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	9b05      	ldr	r3, [sp, #20]
 8004bfa:	6861      	ldr	r1, [r4, #4]
 8004bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c00:	2300      	movs	r3, #0
 8004c02:	9303      	str	r3, [sp, #12]
 8004c04:	ab0a      	add	r3, sp, #40	; 0x28
 8004c06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c0a:	ab09      	add	r3, sp, #36	; 0x24
 8004c0c:	ec49 8b10 	vmov	d0, r8, r9
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	6022      	str	r2, [r4, #0]
 8004c14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7ff fecd 	bl	80049b8 <__cvt>
 8004c1e:	9b06      	ldr	r3, [sp, #24]
 8004c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c22:	2b47      	cmp	r3, #71	; 0x47
 8004c24:	4680      	mov	r8, r0
 8004c26:	d108      	bne.n	8004c3a <_printf_float+0x142>
 8004c28:	1cc8      	adds	r0, r1, #3
 8004c2a:	db02      	blt.n	8004c32 <_printf_float+0x13a>
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	4299      	cmp	r1, r3
 8004c30:	dd41      	ble.n	8004cb6 <_printf_float+0x1be>
 8004c32:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c36:	fa5f fb8b 	uxtb.w	fp, fp
 8004c3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c3e:	d820      	bhi.n	8004c82 <_printf_float+0x18a>
 8004c40:	3901      	subs	r1, #1
 8004c42:	465a      	mov	r2, fp
 8004c44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004c48:	9109      	str	r1, [sp, #36]	; 0x24
 8004c4a:	f7ff ff17 	bl	8004a7c <__exponent>
 8004c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c50:	1813      	adds	r3, r2, r0
 8004c52:	2a01      	cmp	r2, #1
 8004c54:	4681      	mov	r9, r0
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	dc02      	bgt.n	8004c60 <_printf_float+0x168>
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	07d2      	lsls	r2, r2, #31
 8004c5e:	d501      	bpl.n	8004c64 <_printf_float+0x16c>
 8004c60:	3301      	adds	r3, #1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d09c      	beq.n	8004ba6 <_printf_float+0xae>
 8004c6c:	232d      	movs	r3, #45	; 0x2d
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	e798      	b.n	8004ba6 <_printf_float+0xae>
 8004c74:	9a06      	ldr	r2, [sp, #24]
 8004c76:	2a47      	cmp	r2, #71	; 0x47
 8004c78:	d1be      	bne.n	8004bf8 <_printf_float+0x100>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1bc      	bne.n	8004bf8 <_printf_float+0x100>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e7b9      	b.n	8004bf6 <_printf_float+0xfe>
 8004c82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c86:	d118      	bne.n	8004cba <_printf_float+0x1c2>
 8004c88:	2900      	cmp	r1, #0
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	dd0b      	ble.n	8004ca6 <_printf_float+0x1ae>
 8004c8e:	6121      	str	r1, [r4, #16]
 8004c90:	b913      	cbnz	r3, 8004c98 <_printf_float+0x1a0>
 8004c92:	6822      	ldr	r2, [r4, #0]
 8004c94:	07d0      	lsls	r0, r2, #31
 8004c96:	d502      	bpl.n	8004c9e <_printf_float+0x1a6>
 8004c98:	3301      	adds	r3, #1
 8004c9a:	440b      	add	r3, r1
 8004c9c:	6123      	str	r3, [r4, #16]
 8004c9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ca0:	f04f 0900 	mov.w	r9, #0
 8004ca4:	e7de      	b.n	8004c64 <_printf_float+0x16c>
 8004ca6:	b913      	cbnz	r3, 8004cae <_printf_float+0x1b6>
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	07d2      	lsls	r2, r2, #31
 8004cac:	d501      	bpl.n	8004cb2 <_printf_float+0x1ba>
 8004cae:	3302      	adds	r3, #2
 8004cb0:	e7f4      	b.n	8004c9c <_printf_float+0x1a4>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7f2      	b.n	8004c9c <_printf_float+0x1a4>
 8004cb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cbc:	4299      	cmp	r1, r3
 8004cbe:	db05      	blt.n	8004ccc <_printf_float+0x1d4>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	6121      	str	r1, [r4, #16]
 8004cc4:	07d8      	lsls	r0, r3, #31
 8004cc6:	d5ea      	bpl.n	8004c9e <_printf_float+0x1a6>
 8004cc8:	1c4b      	adds	r3, r1, #1
 8004cca:	e7e7      	b.n	8004c9c <_printf_float+0x1a4>
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	bfd4      	ite	le
 8004cd0:	f1c1 0202 	rsble	r2, r1, #2
 8004cd4:	2201      	movgt	r2, #1
 8004cd6:	4413      	add	r3, r2
 8004cd8:	e7e0      	b.n	8004c9c <_printf_float+0x1a4>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	055a      	lsls	r2, r3, #21
 8004cde:	d407      	bmi.n	8004cf0 <_printf_float+0x1f8>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	4631      	mov	r1, r6
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	d12c      	bne.n	8004d48 <_printf_float+0x250>
 8004cee:	e764      	b.n	8004bba <_printf_float+0xc2>
 8004cf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004cf4:	f240 80e0 	bls.w	8004eb8 <_printf_float+0x3c0>
 8004cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f7fb feea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d034      	beq.n	8004d72 <_printf_float+0x27a>
 8004d08:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <_printf_float+0x2f0>)
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f af51 	beq.w	8004bba <_printf_float+0xc2>
 8004d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	db02      	blt.n	8004d26 <_printf_float+0x22e>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	07d8      	lsls	r0, r3, #31
 8004d24:	d510      	bpl.n	8004d48 <_printf_float+0x250>
 8004d26:	ee18 3a10 	vmov	r3, s16
 8004d2a:	4652      	mov	r2, sl
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f af41 	beq.w	8004bba <_printf_float+0xc2>
 8004d38:	f04f 0800 	mov.w	r8, #0
 8004d3c:	f104 091a 	add.w	r9, r4, #26
 8004d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	4543      	cmp	r3, r8
 8004d46:	dc09      	bgt.n	8004d5c <_printf_float+0x264>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	079b      	lsls	r3, r3, #30
 8004d4c:	f100 8105 	bmi.w	8004f5a <_printf_float+0x462>
 8004d50:	68e0      	ldr	r0, [r4, #12]
 8004d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d54:	4298      	cmp	r0, r3
 8004d56:	bfb8      	it	lt
 8004d58:	4618      	movlt	r0, r3
 8004d5a:	e730      	b.n	8004bbe <_printf_float+0xc6>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	464a      	mov	r2, r9
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	f43f af27 	beq.w	8004bba <_printf_float+0xc2>
 8004d6c:	f108 0801 	add.w	r8, r8, #1
 8004d70:	e7e6      	b.n	8004d40 <_printf_float+0x248>
 8004d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dc39      	bgt.n	8004dec <_printf_float+0x2f4>
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <_printf_float+0x2f0>)
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	4628      	mov	r0, r5
 8004d80:	47b8      	blx	r7
 8004d82:	3001      	adds	r0, #1
 8004d84:	f43f af19 	beq.w	8004bba <_printf_float+0xc2>
 8004d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d102      	bne.n	8004d96 <_printf_float+0x29e>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	07d9      	lsls	r1, r3, #31
 8004d94:	d5d8      	bpl.n	8004d48 <_printf_float+0x250>
 8004d96:	ee18 3a10 	vmov	r3, s16
 8004d9a:	4652      	mov	r2, sl
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4628      	mov	r0, r5
 8004da0:	47b8      	blx	r7
 8004da2:	3001      	adds	r0, #1
 8004da4:	f43f af09 	beq.w	8004bba <_printf_float+0xc2>
 8004da8:	f04f 0900 	mov.w	r9, #0
 8004dac:	f104 0a1a 	add.w	sl, r4, #26
 8004db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db2:	425b      	negs	r3, r3
 8004db4:	454b      	cmp	r3, r9
 8004db6:	dc01      	bgt.n	8004dbc <_printf_float+0x2c4>
 8004db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dba:	e792      	b.n	8004ce2 <_printf_float+0x1ea>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	4652      	mov	r2, sl
 8004dc0:	4631      	mov	r1, r6
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	47b8      	blx	r7
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	f43f aef7 	beq.w	8004bba <_printf_float+0xc2>
 8004dcc:	f109 0901 	add.w	r9, r9, #1
 8004dd0:	e7ee      	b.n	8004db0 <_printf_float+0x2b8>
 8004dd2:	bf00      	nop
 8004dd4:	7fefffff 	.word	0x7fefffff
 8004dd8:	0800927c 	.word	0x0800927c
 8004ddc:	08009280 	.word	0x08009280
 8004de0:	08009288 	.word	0x08009288
 8004de4:	08009284 	.word	0x08009284
 8004de8:	0800928c 	.word	0x0800928c
 8004dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004df0:	429a      	cmp	r2, r3
 8004df2:	bfa8      	it	ge
 8004df4:	461a      	movge	r2, r3
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	4691      	mov	r9, r2
 8004dfa:	dc37      	bgt.n	8004e6c <_printf_float+0x374>
 8004dfc:	f04f 0b00 	mov.w	fp, #0
 8004e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e04:	f104 021a 	add.w	r2, r4, #26
 8004e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	eba3 0309 	sub.w	r3, r3, r9
 8004e10:	455b      	cmp	r3, fp
 8004e12:	dc33      	bgt.n	8004e7c <_printf_float+0x384>
 8004e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	db3b      	blt.n	8004e94 <_printf_float+0x39c>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	07da      	lsls	r2, r3, #31
 8004e20:	d438      	bmi.n	8004e94 <_printf_float+0x39c>
 8004e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e24:	9b05      	ldr	r3, [sp, #20]
 8004e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	eba2 0901 	sub.w	r9, r2, r1
 8004e2e:	4599      	cmp	r9, r3
 8004e30:	bfa8      	it	ge
 8004e32:	4699      	movge	r9, r3
 8004e34:	f1b9 0f00 	cmp.w	r9, #0
 8004e38:	dc35      	bgt.n	8004ea6 <_printf_float+0x3ae>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e42:	f104 0a1a 	add.w	sl, r4, #26
 8004e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	eba3 0309 	sub.w	r3, r3, r9
 8004e50:	4543      	cmp	r3, r8
 8004e52:	f77f af79 	ble.w	8004d48 <_printf_float+0x250>
 8004e56:	2301      	movs	r3, #1
 8004e58:	4652      	mov	r2, sl
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	47b8      	blx	r7
 8004e60:	3001      	adds	r0, #1
 8004e62:	f43f aeaa 	beq.w	8004bba <_printf_float+0xc2>
 8004e66:	f108 0801 	add.w	r8, r8, #1
 8004e6a:	e7ec      	b.n	8004e46 <_printf_float+0x34e>
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	4631      	mov	r1, r6
 8004e70:	4642      	mov	r2, r8
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1c0      	bne.n	8004dfc <_printf_float+0x304>
 8004e7a:	e69e      	b.n	8004bba <_printf_float+0xc2>
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	4631      	mov	r1, r6
 8004e80:	4628      	mov	r0, r5
 8004e82:	9205      	str	r2, [sp, #20]
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f ae97 	beq.w	8004bba <_printf_float+0xc2>
 8004e8c:	9a05      	ldr	r2, [sp, #20]
 8004e8e:	f10b 0b01 	add.w	fp, fp, #1
 8004e92:	e7b9      	b.n	8004e08 <_printf_float+0x310>
 8004e94:	ee18 3a10 	vmov	r3, s16
 8004e98:	4652      	mov	r2, sl
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1be      	bne.n	8004e22 <_printf_float+0x32a>
 8004ea4:	e689      	b.n	8004bba <_printf_float+0xc2>
 8004ea6:	9a05      	ldr	r2, [sp, #20]
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	4442      	add	r2, r8
 8004eac:	4631      	mov	r1, r6
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b8      	blx	r7
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d1c1      	bne.n	8004e3a <_printf_float+0x342>
 8004eb6:	e680      	b.n	8004bba <_printf_float+0xc2>
 8004eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	dc01      	bgt.n	8004ec2 <_printf_float+0x3ca>
 8004ebe:	07db      	lsls	r3, r3, #31
 8004ec0:	d538      	bpl.n	8004f34 <_printf_float+0x43c>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f ae74 	beq.w	8004bba <_printf_float+0xc2>
 8004ed2:	ee18 3a10 	vmov	r3, s16
 8004ed6:	4652      	mov	r2, sl
 8004ed8:	4631      	mov	r1, r6
 8004eda:	4628      	mov	r0, r5
 8004edc:	47b8      	blx	r7
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f43f ae6b 	beq.w	8004bba <_printf_float+0xc2>
 8004ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2300      	movs	r3, #0
 8004eec:	f7fb fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ef0:	b9d8      	cbnz	r0, 8004f2a <_printf_float+0x432>
 8004ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ef4:	f108 0201 	add.w	r2, r8, #1
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	d10e      	bne.n	8004f22 <_printf_float+0x42a>
 8004f04:	e659      	b.n	8004bba <_printf_float+0xc2>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	f43f ae52 	beq.w	8004bba <_printf_float+0xc2>
 8004f16:	f108 0801 	add.w	r8, r8, #1
 8004f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	4543      	cmp	r3, r8
 8004f20:	dcf1      	bgt.n	8004f06 <_printf_float+0x40e>
 8004f22:	464b      	mov	r3, r9
 8004f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f28:	e6dc      	b.n	8004ce4 <_printf_float+0x1ec>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	f104 0a1a 	add.w	sl, r4, #26
 8004f32:	e7f2      	b.n	8004f1a <_printf_float+0x422>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4642      	mov	r2, r8
 8004f38:	e7df      	b.n	8004efa <_printf_float+0x402>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	464a      	mov	r2, r9
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f ae38 	beq.w	8004bba <_printf_float+0xc2>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f52:	1a5b      	subs	r3, r3, r1
 8004f54:	4543      	cmp	r3, r8
 8004f56:	dcf0      	bgt.n	8004f3a <_printf_float+0x442>
 8004f58:	e6fa      	b.n	8004d50 <_printf_float+0x258>
 8004f5a:	f04f 0800 	mov.w	r8, #0
 8004f5e:	f104 0919 	add.w	r9, r4, #25
 8004f62:	e7f4      	b.n	8004f4e <_printf_float+0x456>

08004f64 <_printf_common>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	4616      	mov	r6, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	688a      	ldr	r2, [r1, #8]
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bfb8      	it	lt
 8004f78:	4613      	movlt	r3, r2
 8004f7a:	6033      	str	r3, [r6, #0]
 8004f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f80:	4607      	mov	r7, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b10a      	cbz	r2, 8004f8a <_printf_common+0x26>
 8004f86:	3301      	adds	r3, #1
 8004f88:	6033      	str	r3, [r6, #0]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	0699      	lsls	r1, r3, #26
 8004f8e:	bf42      	ittt	mi
 8004f90:	6833      	ldrmi	r3, [r6, #0]
 8004f92:	3302      	addmi	r3, #2
 8004f94:	6033      	strmi	r3, [r6, #0]
 8004f96:	6825      	ldr	r5, [r4, #0]
 8004f98:	f015 0506 	ands.w	r5, r5, #6
 8004f9c:	d106      	bne.n	8004fac <_printf_common+0x48>
 8004f9e:	f104 0a19 	add.w	sl, r4, #25
 8004fa2:	68e3      	ldr	r3, [r4, #12]
 8004fa4:	6832      	ldr	r2, [r6, #0]
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	42ab      	cmp	r3, r5
 8004faa:	dc26      	bgt.n	8004ffa <_printf_common+0x96>
 8004fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fb0:	1e13      	subs	r3, r2, #0
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	bf18      	it	ne
 8004fb6:	2301      	movne	r3, #1
 8004fb8:	0692      	lsls	r2, r2, #26
 8004fba:	d42b      	bmi.n	8005014 <_printf_common+0xb0>
 8004fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	47c0      	blx	r8
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d01e      	beq.n	8005008 <_printf_common+0xa4>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	68e5      	ldr	r5, [r4, #12]
 8004fce:	6832      	ldr	r2, [r6, #0]
 8004fd0:	f003 0306 	and.w	r3, r3, #6
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	bf08      	it	eq
 8004fd8:	1aad      	subeq	r5, r5, r2
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	6922      	ldr	r2, [r4, #16]
 8004fde:	bf0c      	ite	eq
 8004fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe4:	2500      	movne	r5, #0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfc4      	itt	gt
 8004fea:	1a9b      	subgt	r3, r3, r2
 8004fec:	18ed      	addgt	r5, r5, r3
 8004fee:	2600      	movs	r6, #0
 8004ff0:	341a      	adds	r4, #26
 8004ff2:	42b5      	cmp	r5, r6
 8004ff4:	d11a      	bne.n	800502c <_printf_common+0xc8>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e008      	b.n	800500c <_printf_common+0xa8>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	4649      	mov	r1, r9
 8005000:	4638      	mov	r0, r7
 8005002:	47c0      	blx	r8
 8005004:	3001      	adds	r0, #1
 8005006:	d103      	bne.n	8005010 <_printf_common+0xac>
 8005008:	f04f 30ff 	mov.w	r0, #4294967295
 800500c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005010:	3501      	adds	r5, #1
 8005012:	e7c6      	b.n	8004fa2 <_printf_common+0x3e>
 8005014:	18e1      	adds	r1, r4, r3
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	2030      	movs	r0, #48	; 0x30
 800501a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800501e:	4422      	add	r2, r4
 8005020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005028:	3302      	adds	r3, #2
 800502a:	e7c7      	b.n	8004fbc <_printf_common+0x58>
 800502c:	2301      	movs	r3, #1
 800502e:	4622      	mov	r2, r4
 8005030:	4649      	mov	r1, r9
 8005032:	4638      	mov	r0, r7
 8005034:	47c0      	blx	r8
 8005036:	3001      	adds	r0, #1
 8005038:	d0e6      	beq.n	8005008 <_printf_common+0xa4>
 800503a:	3601      	adds	r6, #1
 800503c:	e7d9      	b.n	8004ff2 <_printf_common+0x8e>
	...

08005040 <_printf_i>:
 8005040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	460c      	mov	r4, r1
 8005046:	4691      	mov	r9, r2
 8005048:	7e27      	ldrb	r7, [r4, #24]
 800504a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800504c:	2f78      	cmp	r7, #120	; 0x78
 800504e:	4680      	mov	r8, r0
 8005050:	469a      	mov	sl, r3
 8005052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005056:	d807      	bhi.n	8005068 <_printf_i+0x28>
 8005058:	2f62      	cmp	r7, #98	; 0x62
 800505a:	d80a      	bhi.n	8005072 <_printf_i+0x32>
 800505c:	2f00      	cmp	r7, #0
 800505e:	f000 80d8 	beq.w	8005212 <_printf_i+0x1d2>
 8005062:	2f58      	cmp	r7, #88	; 0x58
 8005064:	f000 80a3 	beq.w	80051ae <_printf_i+0x16e>
 8005068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800506c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005070:	e03a      	b.n	80050e8 <_printf_i+0xa8>
 8005072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005076:	2b15      	cmp	r3, #21
 8005078:	d8f6      	bhi.n	8005068 <_printf_i+0x28>
 800507a:	a001      	add	r0, pc, #4	; (adr r0, 8005080 <_printf_i+0x40>)
 800507c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005080:	080050d9 	.word	0x080050d9
 8005084:	080050ed 	.word	0x080050ed
 8005088:	08005069 	.word	0x08005069
 800508c:	08005069 	.word	0x08005069
 8005090:	08005069 	.word	0x08005069
 8005094:	08005069 	.word	0x08005069
 8005098:	080050ed 	.word	0x080050ed
 800509c:	08005069 	.word	0x08005069
 80050a0:	08005069 	.word	0x08005069
 80050a4:	08005069 	.word	0x08005069
 80050a8:	08005069 	.word	0x08005069
 80050ac:	080051f9 	.word	0x080051f9
 80050b0:	0800511d 	.word	0x0800511d
 80050b4:	080051db 	.word	0x080051db
 80050b8:	08005069 	.word	0x08005069
 80050bc:	08005069 	.word	0x08005069
 80050c0:	0800521b 	.word	0x0800521b
 80050c4:	08005069 	.word	0x08005069
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005069 	.word	0x08005069
 80050d0:	08005069 	.word	0x08005069
 80050d4:	080051e3 	.word	0x080051e3
 80050d8:	680b      	ldr	r3, [r1, #0]
 80050da:	1d1a      	adds	r2, r3, #4
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	600a      	str	r2, [r1, #0]
 80050e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0a3      	b.n	8005234 <_printf_i+0x1f4>
 80050ec:	6825      	ldr	r5, [r4, #0]
 80050ee:	6808      	ldr	r0, [r1, #0]
 80050f0:	062e      	lsls	r6, r5, #24
 80050f2:	f100 0304 	add.w	r3, r0, #4
 80050f6:	d50a      	bpl.n	800510e <_printf_i+0xce>
 80050f8:	6805      	ldr	r5, [r0, #0]
 80050fa:	600b      	str	r3, [r1, #0]
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	da03      	bge.n	8005108 <_printf_i+0xc8>
 8005100:	232d      	movs	r3, #45	; 0x2d
 8005102:	426d      	negs	r5, r5
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005108:	485e      	ldr	r0, [pc, #376]	; (8005284 <_printf_i+0x244>)
 800510a:	230a      	movs	r3, #10
 800510c:	e019      	b.n	8005142 <_printf_i+0x102>
 800510e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005112:	6805      	ldr	r5, [r0, #0]
 8005114:	600b      	str	r3, [r1, #0]
 8005116:	bf18      	it	ne
 8005118:	b22d      	sxthne	r5, r5
 800511a:	e7ef      	b.n	80050fc <_printf_i+0xbc>
 800511c:	680b      	ldr	r3, [r1, #0]
 800511e:	6825      	ldr	r5, [r4, #0]
 8005120:	1d18      	adds	r0, r3, #4
 8005122:	6008      	str	r0, [r1, #0]
 8005124:	0628      	lsls	r0, r5, #24
 8005126:	d501      	bpl.n	800512c <_printf_i+0xec>
 8005128:	681d      	ldr	r5, [r3, #0]
 800512a:	e002      	b.n	8005132 <_printf_i+0xf2>
 800512c:	0669      	lsls	r1, r5, #25
 800512e:	d5fb      	bpl.n	8005128 <_printf_i+0xe8>
 8005130:	881d      	ldrh	r5, [r3, #0]
 8005132:	4854      	ldr	r0, [pc, #336]	; (8005284 <_printf_i+0x244>)
 8005134:	2f6f      	cmp	r7, #111	; 0x6f
 8005136:	bf0c      	ite	eq
 8005138:	2308      	moveq	r3, #8
 800513a:	230a      	movne	r3, #10
 800513c:	2100      	movs	r1, #0
 800513e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005142:	6866      	ldr	r6, [r4, #4]
 8005144:	60a6      	str	r6, [r4, #8]
 8005146:	2e00      	cmp	r6, #0
 8005148:	bfa2      	ittt	ge
 800514a:	6821      	ldrge	r1, [r4, #0]
 800514c:	f021 0104 	bicge.w	r1, r1, #4
 8005150:	6021      	strge	r1, [r4, #0]
 8005152:	b90d      	cbnz	r5, 8005158 <_printf_i+0x118>
 8005154:	2e00      	cmp	r6, #0
 8005156:	d04d      	beq.n	80051f4 <_printf_i+0x1b4>
 8005158:	4616      	mov	r6, r2
 800515a:	fbb5 f1f3 	udiv	r1, r5, r3
 800515e:	fb03 5711 	mls	r7, r3, r1, r5
 8005162:	5dc7      	ldrb	r7, [r0, r7]
 8005164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005168:	462f      	mov	r7, r5
 800516a:	42bb      	cmp	r3, r7
 800516c:	460d      	mov	r5, r1
 800516e:	d9f4      	bls.n	800515a <_printf_i+0x11a>
 8005170:	2b08      	cmp	r3, #8
 8005172:	d10b      	bne.n	800518c <_printf_i+0x14c>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	07df      	lsls	r7, r3, #31
 8005178:	d508      	bpl.n	800518c <_printf_i+0x14c>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6861      	ldr	r1, [r4, #4]
 800517e:	4299      	cmp	r1, r3
 8005180:	bfde      	ittt	le
 8005182:	2330      	movle	r3, #48	; 0x30
 8005184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800518c:	1b92      	subs	r2, r2, r6
 800518e:	6122      	str	r2, [r4, #16]
 8005190:	f8cd a000 	str.w	sl, [sp]
 8005194:	464b      	mov	r3, r9
 8005196:	aa03      	add	r2, sp, #12
 8005198:	4621      	mov	r1, r4
 800519a:	4640      	mov	r0, r8
 800519c:	f7ff fee2 	bl	8004f64 <_printf_common>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d14c      	bne.n	800523e <_printf_i+0x1fe>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	b004      	add	sp, #16
 80051aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ae:	4835      	ldr	r0, [pc, #212]	; (8005284 <_printf_i+0x244>)
 80051b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	680e      	ldr	r6, [r1, #0]
 80051b8:	061f      	lsls	r7, r3, #24
 80051ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80051be:	600e      	str	r6, [r1, #0]
 80051c0:	d514      	bpl.n	80051ec <_printf_i+0x1ac>
 80051c2:	07d9      	lsls	r1, r3, #31
 80051c4:	bf44      	itt	mi
 80051c6:	f043 0320 	orrmi.w	r3, r3, #32
 80051ca:	6023      	strmi	r3, [r4, #0]
 80051cc:	b91d      	cbnz	r5, 80051d6 <_printf_i+0x196>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	f023 0320 	bic.w	r3, r3, #32
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	2310      	movs	r3, #16
 80051d8:	e7b0      	b.n	800513c <_printf_i+0xfc>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f043 0320 	orr.w	r3, r3, #32
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	2378      	movs	r3, #120	; 0x78
 80051e4:	4828      	ldr	r0, [pc, #160]	; (8005288 <_printf_i+0x248>)
 80051e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051ea:	e7e3      	b.n	80051b4 <_printf_i+0x174>
 80051ec:	065e      	lsls	r6, r3, #25
 80051ee:	bf48      	it	mi
 80051f0:	b2ad      	uxthmi	r5, r5
 80051f2:	e7e6      	b.n	80051c2 <_printf_i+0x182>
 80051f4:	4616      	mov	r6, r2
 80051f6:	e7bb      	b.n	8005170 <_printf_i+0x130>
 80051f8:	680b      	ldr	r3, [r1, #0]
 80051fa:	6826      	ldr	r6, [r4, #0]
 80051fc:	6960      	ldr	r0, [r4, #20]
 80051fe:	1d1d      	adds	r5, r3, #4
 8005200:	600d      	str	r5, [r1, #0]
 8005202:	0635      	lsls	r5, r6, #24
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	d501      	bpl.n	800520c <_printf_i+0x1cc>
 8005208:	6018      	str	r0, [r3, #0]
 800520a:	e002      	b.n	8005212 <_printf_i+0x1d2>
 800520c:	0671      	lsls	r1, r6, #25
 800520e:	d5fb      	bpl.n	8005208 <_printf_i+0x1c8>
 8005210:	8018      	strh	r0, [r3, #0]
 8005212:	2300      	movs	r3, #0
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	4616      	mov	r6, r2
 8005218:	e7ba      	b.n	8005190 <_printf_i+0x150>
 800521a:	680b      	ldr	r3, [r1, #0]
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	600a      	str	r2, [r1, #0]
 8005220:	681e      	ldr	r6, [r3, #0]
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	2100      	movs	r1, #0
 8005226:	4630      	mov	r0, r6
 8005228:	f7fa ffe2 	bl	80001f0 <memchr>
 800522c:	b108      	cbz	r0, 8005232 <_printf_i+0x1f2>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	6060      	str	r0, [r4, #4]
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	6123      	str	r3, [r4, #16]
 8005236:	2300      	movs	r3, #0
 8005238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800523c:	e7a8      	b.n	8005190 <_printf_i+0x150>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d0ab      	beq.n	80051a4 <_printf_i+0x164>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	d413      	bmi.n	800527a <_printf_i+0x23a>
 8005252:	68e0      	ldr	r0, [r4, #12]
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	4298      	cmp	r0, r3
 8005258:	bfb8      	it	lt
 800525a:	4618      	movlt	r0, r3
 800525c:	e7a4      	b.n	80051a8 <_printf_i+0x168>
 800525e:	2301      	movs	r3, #1
 8005260:	4632      	mov	r2, r6
 8005262:	4649      	mov	r1, r9
 8005264:	4640      	mov	r0, r8
 8005266:	47d0      	blx	sl
 8005268:	3001      	adds	r0, #1
 800526a:	d09b      	beq.n	80051a4 <_printf_i+0x164>
 800526c:	3501      	adds	r5, #1
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	9903      	ldr	r1, [sp, #12]
 8005272:	1a5b      	subs	r3, r3, r1
 8005274:	42ab      	cmp	r3, r5
 8005276:	dcf2      	bgt.n	800525e <_printf_i+0x21e>
 8005278:	e7eb      	b.n	8005252 <_printf_i+0x212>
 800527a:	2500      	movs	r5, #0
 800527c:	f104 0619 	add.w	r6, r4, #25
 8005280:	e7f5      	b.n	800526e <_printf_i+0x22e>
 8005282:	bf00      	nop
 8005284:	0800928e 	.word	0x0800928e
 8005288:	0800929f 	.word	0x0800929f

0800528c <_scanf_float>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	b087      	sub	sp, #28
 8005292:	4617      	mov	r7, r2
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	688b      	ldr	r3, [r1, #8]
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800529e:	bf83      	ittte	hi
 80052a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80052a4:	195b      	addhi	r3, r3, r5
 80052a6:	9302      	strhi	r3, [sp, #8]
 80052a8:	2300      	movls	r3, #0
 80052aa:	bf86      	itte	hi
 80052ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80052b0:	608b      	strhi	r3, [r1, #8]
 80052b2:	9302      	strls	r3, [sp, #8]
 80052b4:	680b      	ldr	r3, [r1, #0]
 80052b6:	468b      	mov	fp, r1
 80052b8:	2500      	movs	r5, #0
 80052ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80052be:	f84b 3b1c 	str.w	r3, [fp], #28
 80052c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80052c6:	4680      	mov	r8, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	465e      	mov	r6, fp
 80052cc:	46aa      	mov	sl, r5
 80052ce:	46a9      	mov	r9, r5
 80052d0:	9501      	str	r5, [sp, #4]
 80052d2:	68a2      	ldr	r2, [r4, #8]
 80052d4:	b152      	cbz	r2, 80052ec <_scanf_float+0x60>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b4e      	cmp	r3, #78	; 0x4e
 80052dc:	d864      	bhi.n	80053a8 <_scanf_float+0x11c>
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d83c      	bhi.n	800535c <_scanf_float+0xd0>
 80052e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80052e6:	b2c8      	uxtb	r0, r1
 80052e8:	280e      	cmp	r0, #14
 80052ea:	d93a      	bls.n	8005362 <_scanf_float+0xd6>
 80052ec:	f1b9 0f00 	cmp.w	r9, #0
 80052f0:	d003      	beq.n	80052fa <_scanf_float+0x6e>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052fe:	f1ba 0f01 	cmp.w	sl, #1
 8005302:	f200 8113 	bhi.w	800552c <_scanf_float+0x2a0>
 8005306:	455e      	cmp	r6, fp
 8005308:	f200 8105 	bhi.w	8005516 <_scanf_float+0x28a>
 800530c:	2501      	movs	r5, #1
 800530e:	4628      	mov	r0, r5
 8005310:	b007      	add	sp, #28
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800531a:	2a0d      	cmp	r2, #13
 800531c:	d8e6      	bhi.n	80052ec <_scanf_float+0x60>
 800531e:	a101      	add	r1, pc, #4	; (adr r1, 8005324 <_scanf_float+0x98>)
 8005320:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005324:	08005463 	.word	0x08005463
 8005328:	080052ed 	.word	0x080052ed
 800532c:	080052ed 	.word	0x080052ed
 8005330:	080052ed 	.word	0x080052ed
 8005334:	080054c3 	.word	0x080054c3
 8005338:	0800549b 	.word	0x0800549b
 800533c:	080052ed 	.word	0x080052ed
 8005340:	080052ed 	.word	0x080052ed
 8005344:	08005471 	.word	0x08005471
 8005348:	080052ed 	.word	0x080052ed
 800534c:	080052ed 	.word	0x080052ed
 8005350:	080052ed 	.word	0x080052ed
 8005354:	080052ed 	.word	0x080052ed
 8005358:	08005429 	.word	0x08005429
 800535c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005360:	e7db      	b.n	800531a <_scanf_float+0x8e>
 8005362:	290e      	cmp	r1, #14
 8005364:	d8c2      	bhi.n	80052ec <_scanf_float+0x60>
 8005366:	a001      	add	r0, pc, #4	; (adr r0, 800536c <_scanf_float+0xe0>)
 8005368:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800536c:	0800541b 	.word	0x0800541b
 8005370:	080052ed 	.word	0x080052ed
 8005374:	0800541b 	.word	0x0800541b
 8005378:	080054af 	.word	0x080054af
 800537c:	080052ed 	.word	0x080052ed
 8005380:	080053c9 	.word	0x080053c9
 8005384:	08005405 	.word	0x08005405
 8005388:	08005405 	.word	0x08005405
 800538c:	08005405 	.word	0x08005405
 8005390:	08005405 	.word	0x08005405
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	2b6e      	cmp	r3, #110	; 0x6e
 80053aa:	d809      	bhi.n	80053c0 <_scanf_float+0x134>
 80053ac:	2b60      	cmp	r3, #96	; 0x60
 80053ae:	d8b2      	bhi.n	8005316 <_scanf_float+0x8a>
 80053b0:	2b54      	cmp	r3, #84	; 0x54
 80053b2:	d077      	beq.n	80054a4 <_scanf_float+0x218>
 80053b4:	2b59      	cmp	r3, #89	; 0x59
 80053b6:	d199      	bne.n	80052ec <_scanf_float+0x60>
 80053b8:	2d07      	cmp	r5, #7
 80053ba:	d197      	bne.n	80052ec <_scanf_float+0x60>
 80053bc:	2508      	movs	r5, #8
 80053be:	e029      	b.n	8005414 <_scanf_float+0x188>
 80053c0:	2b74      	cmp	r3, #116	; 0x74
 80053c2:	d06f      	beq.n	80054a4 <_scanf_float+0x218>
 80053c4:	2b79      	cmp	r3, #121	; 0x79
 80053c6:	e7f6      	b.n	80053b6 <_scanf_float+0x12a>
 80053c8:	6821      	ldr	r1, [r4, #0]
 80053ca:	05c8      	lsls	r0, r1, #23
 80053cc:	d51a      	bpl.n	8005404 <_scanf_float+0x178>
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80053d4:	6021      	str	r1, [r4, #0]
 80053d6:	f109 0901 	add.w	r9, r9, #1
 80053da:	b11b      	cbz	r3, 80053e4 <_scanf_float+0x158>
 80053dc:	3b01      	subs	r3, #1
 80053de:	3201      	adds	r2, #1
 80053e0:	9302      	str	r3, [sp, #8]
 80053e2:	60a2      	str	r2, [r4, #8]
 80053e4:	68a3      	ldr	r3, [r4, #8]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	60a3      	str	r3, [r4, #8]
 80053ea:	6923      	ldr	r3, [r4, #16]
 80053ec:	3301      	adds	r3, #1
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	607b      	str	r3, [r7, #4]
 80053f8:	f340 8084 	ble.w	8005504 <_scanf_float+0x278>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	3301      	adds	r3, #1
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	e766      	b.n	80052d2 <_scanf_float+0x46>
 8005404:	eb1a 0f05 	cmn.w	sl, r5
 8005408:	f47f af70 	bne.w	80052ec <_scanf_float+0x60>
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005412:	6022      	str	r2, [r4, #0]
 8005414:	f806 3b01 	strb.w	r3, [r6], #1
 8005418:	e7e4      	b.n	80053e4 <_scanf_float+0x158>
 800541a:	6822      	ldr	r2, [r4, #0]
 800541c:	0610      	lsls	r0, r2, #24
 800541e:	f57f af65 	bpl.w	80052ec <_scanf_float+0x60>
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	e7f4      	b.n	8005412 <_scanf_float+0x186>
 8005428:	f1ba 0f00 	cmp.w	sl, #0
 800542c:	d10e      	bne.n	800544c <_scanf_float+0x1c0>
 800542e:	f1b9 0f00 	cmp.w	r9, #0
 8005432:	d10e      	bne.n	8005452 <_scanf_float+0x1c6>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800543a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800543e:	d108      	bne.n	8005452 <_scanf_float+0x1c6>
 8005440:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005444:	6022      	str	r2, [r4, #0]
 8005446:	f04f 0a01 	mov.w	sl, #1
 800544a:	e7e3      	b.n	8005414 <_scanf_float+0x188>
 800544c:	f1ba 0f02 	cmp.w	sl, #2
 8005450:	d055      	beq.n	80054fe <_scanf_float+0x272>
 8005452:	2d01      	cmp	r5, #1
 8005454:	d002      	beq.n	800545c <_scanf_float+0x1d0>
 8005456:	2d04      	cmp	r5, #4
 8005458:	f47f af48 	bne.w	80052ec <_scanf_float+0x60>
 800545c:	3501      	adds	r5, #1
 800545e:	b2ed      	uxtb	r5, r5
 8005460:	e7d8      	b.n	8005414 <_scanf_float+0x188>
 8005462:	f1ba 0f01 	cmp.w	sl, #1
 8005466:	f47f af41 	bne.w	80052ec <_scanf_float+0x60>
 800546a:	f04f 0a02 	mov.w	sl, #2
 800546e:	e7d1      	b.n	8005414 <_scanf_float+0x188>
 8005470:	b97d      	cbnz	r5, 8005492 <_scanf_float+0x206>
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	f47f af3c 	bne.w	80052f2 <_scanf_float+0x66>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005480:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005484:	f47f af39 	bne.w	80052fa <_scanf_float+0x6e>
 8005488:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800548c:	6022      	str	r2, [r4, #0]
 800548e:	2501      	movs	r5, #1
 8005490:	e7c0      	b.n	8005414 <_scanf_float+0x188>
 8005492:	2d03      	cmp	r5, #3
 8005494:	d0e2      	beq.n	800545c <_scanf_float+0x1d0>
 8005496:	2d05      	cmp	r5, #5
 8005498:	e7de      	b.n	8005458 <_scanf_float+0x1cc>
 800549a:	2d02      	cmp	r5, #2
 800549c:	f47f af26 	bne.w	80052ec <_scanf_float+0x60>
 80054a0:	2503      	movs	r5, #3
 80054a2:	e7b7      	b.n	8005414 <_scanf_float+0x188>
 80054a4:	2d06      	cmp	r5, #6
 80054a6:	f47f af21 	bne.w	80052ec <_scanf_float+0x60>
 80054aa:	2507      	movs	r5, #7
 80054ac:	e7b2      	b.n	8005414 <_scanf_float+0x188>
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	0591      	lsls	r1, r2, #22
 80054b2:	f57f af1b 	bpl.w	80052ec <_scanf_float+0x60>
 80054b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80054c0:	e7a8      	b.n	8005414 <_scanf_float+0x188>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80054c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80054cc:	d006      	beq.n	80054dc <_scanf_float+0x250>
 80054ce:	0550      	lsls	r0, r2, #21
 80054d0:	f57f af0c 	bpl.w	80052ec <_scanf_float+0x60>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	f43f af0f 	beq.w	80052fa <_scanf_float+0x6e>
 80054dc:	0591      	lsls	r1, r2, #22
 80054de:	bf58      	it	pl
 80054e0:	9901      	ldrpl	r1, [sp, #4]
 80054e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80054e6:	bf58      	it	pl
 80054e8:	eba9 0101 	subpl.w	r1, r9, r1
 80054ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80054f0:	bf58      	it	pl
 80054f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	f04f 0900 	mov.w	r9, #0
 80054fc:	e78a      	b.n	8005414 <_scanf_float+0x188>
 80054fe:	f04f 0a03 	mov.w	sl, #3
 8005502:	e787      	b.n	8005414 <_scanf_float+0x188>
 8005504:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005508:	4639      	mov	r1, r7
 800550a:	4640      	mov	r0, r8
 800550c:	4798      	blx	r3
 800550e:	2800      	cmp	r0, #0
 8005510:	f43f aedf 	beq.w	80052d2 <_scanf_float+0x46>
 8005514:	e6ea      	b.n	80052ec <_scanf_float+0x60>
 8005516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800551a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800551e:	463a      	mov	r2, r7
 8005520:	4640      	mov	r0, r8
 8005522:	4798      	blx	r3
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	3b01      	subs	r3, #1
 8005528:	6123      	str	r3, [r4, #16]
 800552a:	e6ec      	b.n	8005306 <_scanf_float+0x7a>
 800552c:	1e6b      	subs	r3, r5, #1
 800552e:	2b06      	cmp	r3, #6
 8005530:	d825      	bhi.n	800557e <_scanf_float+0x2f2>
 8005532:	2d02      	cmp	r5, #2
 8005534:	d836      	bhi.n	80055a4 <_scanf_float+0x318>
 8005536:	455e      	cmp	r6, fp
 8005538:	f67f aee8 	bls.w	800530c <_scanf_float+0x80>
 800553c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005540:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005544:	463a      	mov	r2, r7
 8005546:	4640      	mov	r0, r8
 8005548:	4798      	blx	r3
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	3b01      	subs	r3, #1
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	e7f1      	b.n	8005536 <_scanf_float+0x2aa>
 8005552:	9802      	ldr	r0, [sp, #8]
 8005554:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005558:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800555c:	9002      	str	r0, [sp, #8]
 800555e:	463a      	mov	r2, r7
 8005560:	4640      	mov	r0, r8
 8005562:	4798      	blx	r3
 8005564:	6923      	ldr	r3, [r4, #16]
 8005566:	3b01      	subs	r3, #1
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800556e:	fa5f fa8a 	uxtb.w	sl, sl
 8005572:	f1ba 0f02 	cmp.w	sl, #2
 8005576:	d1ec      	bne.n	8005552 <_scanf_float+0x2c6>
 8005578:	3d03      	subs	r5, #3
 800557a:	b2ed      	uxtb	r5, r5
 800557c:	1b76      	subs	r6, r6, r5
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	05da      	lsls	r2, r3, #23
 8005582:	d52f      	bpl.n	80055e4 <_scanf_float+0x358>
 8005584:	055b      	lsls	r3, r3, #21
 8005586:	d510      	bpl.n	80055aa <_scanf_float+0x31e>
 8005588:	455e      	cmp	r6, fp
 800558a:	f67f aebf 	bls.w	800530c <_scanf_float+0x80>
 800558e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005592:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005596:	463a      	mov	r2, r7
 8005598:	4640      	mov	r0, r8
 800559a:	4798      	blx	r3
 800559c:	6923      	ldr	r3, [r4, #16]
 800559e:	3b01      	subs	r3, #1
 80055a0:	6123      	str	r3, [r4, #16]
 80055a2:	e7f1      	b.n	8005588 <_scanf_float+0x2fc>
 80055a4:	46aa      	mov	sl, r5
 80055a6:	9602      	str	r6, [sp, #8]
 80055a8:	e7df      	b.n	800556a <_scanf_float+0x2de>
 80055aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	2965      	cmp	r1, #101	; 0x65
 80055b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80055b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	d00c      	beq.n	80055d8 <_scanf_float+0x34c>
 80055be:	2945      	cmp	r1, #69	; 0x45
 80055c0:	d00a      	beq.n	80055d8 <_scanf_float+0x34c>
 80055c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055c6:	463a      	mov	r2, r7
 80055c8:	4640      	mov	r0, r8
 80055ca:	4798      	blx	r3
 80055cc:	6923      	ldr	r3, [r4, #16]
 80055ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	1eb5      	subs	r5, r6, #2
 80055d6:	6123      	str	r3, [r4, #16]
 80055d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055dc:	463a      	mov	r2, r7
 80055de:	4640      	mov	r0, r8
 80055e0:	4798      	blx	r3
 80055e2:	462e      	mov	r6, r5
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	f015 0510 	ands.w	r5, r5, #16
 80055ea:	d158      	bne.n	800569e <_scanf_float+0x412>
 80055ec:	7035      	strb	r5, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d11c      	bne.n	8005634 <_scanf_float+0x3a8>
 80055fa:	9b01      	ldr	r3, [sp, #4]
 80055fc:	454b      	cmp	r3, r9
 80055fe:	eba3 0209 	sub.w	r2, r3, r9
 8005602:	d124      	bne.n	800564e <_scanf_float+0x3c2>
 8005604:	2200      	movs	r2, #0
 8005606:	4659      	mov	r1, fp
 8005608:	4640      	mov	r0, r8
 800560a:	f000 fe9b 	bl	8006344 <_strtod_r>
 800560e:	9b03      	ldr	r3, [sp, #12]
 8005610:	6821      	ldr	r1, [r4, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f011 0f02 	tst.w	r1, #2
 8005618:	ec57 6b10 	vmov	r6, r7, d0
 800561c:	f103 0204 	add.w	r2, r3, #4
 8005620:	d020      	beq.n	8005664 <_scanf_float+0x3d8>
 8005622:	9903      	ldr	r1, [sp, #12]
 8005624:	600a      	str	r2, [r1, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	e9c3 6700 	strd	r6, r7, [r3]
 800562c:	68e3      	ldr	r3, [r4, #12]
 800562e:	3301      	adds	r3, #1
 8005630:	60e3      	str	r3, [r4, #12]
 8005632:	e66c      	b.n	800530e <_scanf_float+0x82>
 8005634:	9b04      	ldr	r3, [sp, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0e4      	beq.n	8005604 <_scanf_float+0x378>
 800563a:	9905      	ldr	r1, [sp, #20]
 800563c:	230a      	movs	r3, #10
 800563e:	462a      	mov	r2, r5
 8005640:	3101      	adds	r1, #1
 8005642:	4640      	mov	r0, r8
 8005644:	f000 ff08 	bl	8006458 <_strtol_r>
 8005648:	9b04      	ldr	r3, [sp, #16]
 800564a:	9e05      	ldr	r6, [sp, #20]
 800564c:	1ac2      	subs	r2, r0, r3
 800564e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005652:	429e      	cmp	r6, r3
 8005654:	bf28      	it	cs
 8005656:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800565a:	4912      	ldr	r1, [pc, #72]	; (80056a4 <_scanf_float+0x418>)
 800565c:	4630      	mov	r0, r6
 800565e:	f000 f82b 	bl	80056b8 <siprintf>
 8005662:	e7cf      	b.n	8005604 <_scanf_float+0x378>
 8005664:	f011 0f04 	tst.w	r1, #4
 8005668:	9903      	ldr	r1, [sp, #12]
 800566a:	600a      	str	r2, [r1, #0]
 800566c:	d1db      	bne.n	8005626 <_scanf_float+0x39a>
 800566e:	f8d3 8000 	ldr.w	r8, [r3]
 8005672:	ee10 2a10 	vmov	r2, s0
 8005676:	ee10 0a10 	vmov	r0, s0
 800567a:	463b      	mov	r3, r7
 800567c:	4639      	mov	r1, r7
 800567e:	f7fb fa5d 	bl	8000b3c <__aeabi_dcmpun>
 8005682:	b128      	cbz	r0, 8005690 <_scanf_float+0x404>
 8005684:	4808      	ldr	r0, [pc, #32]	; (80056a8 <_scanf_float+0x41c>)
 8005686:	f000 f811 	bl	80056ac <nanf>
 800568a:	ed88 0a00 	vstr	s0, [r8]
 800568e:	e7cd      	b.n	800562c <_scanf_float+0x3a0>
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fb fab0 	bl	8000bf8 <__aeabi_d2f>
 8005698:	f8c8 0000 	str.w	r0, [r8]
 800569c:	e7c6      	b.n	800562c <_scanf_float+0x3a0>
 800569e:	2500      	movs	r5, #0
 80056a0:	e635      	b.n	800530e <_scanf_float+0x82>
 80056a2:	bf00      	nop
 80056a4:	080092b0 	.word	0x080092b0
 80056a8:	080096c8 	.word	0x080096c8

080056ac <nanf>:
 80056ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80056b4 <nanf+0x8>
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	7fc00000 	.word	0x7fc00000

080056b8 <siprintf>:
 80056b8:	b40e      	push	{r1, r2, r3}
 80056ba:	b500      	push	{lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	ab1d      	add	r3, sp, #116	; 0x74
 80056c0:	9002      	str	r0, [sp, #8]
 80056c2:	9006      	str	r0, [sp, #24]
 80056c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c8:	4809      	ldr	r0, [pc, #36]	; (80056f0 <siprintf+0x38>)
 80056ca:	9107      	str	r1, [sp, #28]
 80056cc:	9104      	str	r1, [sp, #16]
 80056ce:	4909      	ldr	r1, [pc, #36]	; (80056f4 <siprintf+0x3c>)
 80056d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d4:	9105      	str	r1, [sp, #20]
 80056d6:	6800      	ldr	r0, [r0, #0]
 80056d8:	9301      	str	r3, [sp, #4]
 80056da:	a902      	add	r1, sp, #8
 80056dc:	f002 fec4 	bl	8008468 <_svfiprintf_r>
 80056e0:	9b02      	ldr	r3, [sp, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	b01c      	add	sp, #112	; 0x70
 80056e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056ec:	b003      	add	sp, #12
 80056ee:	4770      	bx	lr
 80056f0:	20000010 	.word	0x20000010
 80056f4:	ffff0208 	.word	0xffff0208

080056f8 <sulp>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4604      	mov	r4, r0
 80056fc:	460d      	mov	r5, r1
 80056fe:	ec45 4b10 	vmov	d0, r4, r5
 8005702:	4616      	mov	r6, r2
 8005704:	f002 fc4c 	bl	8007fa0 <__ulp>
 8005708:	ec51 0b10 	vmov	r0, r1, d0
 800570c:	b17e      	cbz	r6, 800572e <sulp+0x36>
 800570e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005716:	2b00      	cmp	r3, #0
 8005718:	dd09      	ble.n	800572e <sulp+0x36>
 800571a:	051b      	lsls	r3, r3, #20
 800571c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005720:	2400      	movs	r4, #0
 8005722:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005726:	4622      	mov	r2, r4
 8005728:	462b      	mov	r3, r5
 800572a:	f7fa ff6d 	bl	8000608 <__aeabi_dmul>
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <_strtod_l>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	b0a3      	sub	sp, #140	; 0x8c
 8005736:	461f      	mov	r7, r3
 8005738:	2300      	movs	r3, #0
 800573a:	931e      	str	r3, [sp, #120]	; 0x78
 800573c:	4ba4      	ldr	r3, [pc, #656]	; (80059d0 <_strtod_l+0x2a0>)
 800573e:	9219      	str	r2, [sp, #100]	; 0x64
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	9307      	str	r3, [sp, #28]
 8005744:	4604      	mov	r4, r0
 8005746:	4618      	mov	r0, r3
 8005748:	4688      	mov	r8, r1
 800574a:	f7fa fd49 	bl	80001e0 <strlen>
 800574e:	f04f 0a00 	mov.w	sl, #0
 8005752:	4605      	mov	r5, r0
 8005754:	f04f 0b00 	mov.w	fp, #0
 8005758:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800575c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	2a2b      	cmp	r2, #43	; 0x2b
 8005762:	d04c      	beq.n	80057fe <_strtod_l+0xce>
 8005764:	d839      	bhi.n	80057da <_strtod_l+0xaa>
 8005766:	2a0d      	cmp	r2, #13
 8005768:	d832      	bhi.n	80057d0 <_strtod_l+0xa0>
 800576a:	2a08      	cmp	r2, #8
 800576c:	d832      	bhi.n	80057d4 <_strtod_l+0xa4>
 800576e:	2a00      	cmp	r2, #0
 8005770:	d03c      	beq.n	80057ec <_strtod_l+0xbc>
 8005772:	2300      	movs	r3, #0
 8005774:	930e      	str	r3, [sp, #56]	; 0x38
 8005776:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005778:	7833      	ldrb	r3, [r6, #0]
 800577a:	2b30      	cmp	r3, #48	; 0x30
 800577c:	f040 80b4 	bne.w	80058e8 <_strtod_l+0x1b8>
 8005780:	7873      	ldrb	r3, [r6, #1]
 8005782:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005786:	2b58      	cmp	r3, #88	; 0x58
 8005788:	d16c      	bne.n	8005864 <_strtod_l+0x134>
 800578a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	ab1e      	add	r3, sp, #120	; 0x78
 8005790:	9702      	str	r7, [sp, #8]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	4a8f      	ldr	r2, [pc, #572]	; (80059d4 <_strtod_l+0x2a4>)
 8005796:	ab1f      	add	r3, sp, #124	; 0x7c
 8005798:	a91d      	add	r1, sp, #116	; 0x74
 800579a:	4620      	mov	r0, r4
 800579c:	f001 fd60 	bl	8007260 <__gethex>
 80057a0:	f010 0707 	ands.w	r7, r0, #7
 80057a4:	4605      	mov	r5, r0
 80057a6:	d005      	beq.n	80057b4 <_strtod_l+0x84>
 80057a8:	2f06      	cmp	r7, #6
 80057aa:	d12a      	bne.n	8005802 <_strtod_l+0xd2>
 80057ac:	3601      	adds	r6, #1
 80057ae:	2300      	movs	r3, #0
 80057b0:	961d      	str	r6, [sp, #116]	; 0x74
 80057b2:	930e      	str	r3, [sp, #56]	; 0x38
 80057b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 8596 	bne.w	80062e8 <_strtod_l+0xbb8>
 80057bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057be:	b1db      	cbz	r3, 80057f8 <_strtod_l+0xc8>
 80057c0:	4652      	mov	r2, sl
 80057c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057c6:	ec43 2b10 	vmov	d0, r2, r3
 80057ca:	b023      	add	sp, #140	; 0x8c
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	2a20      	cmp	r2, #32
 80057d2:	d1ce      	bne.n	8005772 <_strtod_l+0x42>
 80057d4:	3301      	adds	r3, #1
 80057d6:	931d      	str	r3, [sp, #116]	; 0x74
 80057d8:	e7c0      	b.n	800575c <_strtod_l+0x2c>
 80057da:	2a2d      	cmp	r2, #45	; 0x2d
 80057dc:	d1c9      	bne.n	8005772 <_strtod_l+0x42>
 80057de:	2201      	movs	r2, #1
 80057e0:	920e      	str	r2, [sp, #56]	; 0x38
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	921d      	str	r2, [sp, #116]	; 0x74
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1c4      	bne.n	8005776 <_strtod_l+0x46>
 80057ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f040 8576 	bne.w	80062e4 <_strtod_l+0xbb4>
 80057f8:	4652      	mov	r2, sl
 80057fa:	465b      	mov	r3, fp
 80057fc:	e7e3      	b.n	80057c6 <_strtod_l+0x96>
 80057fe:	2200      	movs	r2, #0
 8005800:	e7ee      	b.n	80057e0 <_strtod_l+0xb0>
 8005802:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005804:	b13a      	cbz	r2, 8005816 <_strtod_l+0xe6>
 8005806:	2135      	movs	r1, #53	; 0x35
 8005808:	a820      	add	r0, sp, #128	; 0x80
 800580a:	f002 fcd4 	bl	80081b6 <__copybits>
 800580e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005810:	4620      	mov	r0, r4
 8005812:	f002 f899 	bl	8007948 <_Bfree>
 8005816:	3f01      	subs	r7, #1
 8005818:	2f05      	cmp	r7, #5
 800581a:	d807      	bhi.n	800582c <_strtod_l+0xfc>
 800581c:	e8df f007 	tbb	[pc, r7]
 8005820:	1d180b0e 	.word	0x1d180b0e
 8005824:	030e      	.short	0x030e
 8005826:	f04f 0b00 	mov.w	fp, #0
 800582a:	46da      	mov	sl, fp
 800582c:	0728      	lsls	r0, r5, #28
 800582e:	d5c1      	bpl.n	80057b4 <_strtod_l+0x84>
 8005830:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005834:	e7be      	b.n	80057b4 <_strtod_l+0x84>
 8005836:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800583a:	e7f7      	b.n	800582c <_strtod_l+0xfc>
 800583c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005840:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005842:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800584a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800584e:	e7ed      	b.n	800582c <_strtod_l+0xfc>
 8005850:	f8df b184 	ldr.w	fp, [pc, #388]	; 80059d8 <_strtod_l+0x2a8>
 8005854:	f04f 0a00 	mov.w	sl, #0
 8005858:	e7e8      	b.n	800582c <_strtod_l+0xfc>
 800585a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800585e:	f04f 3aff 	mov.w	sl, #4294967295
 8005862:	e7e3      	b.n	800582c <_strtod_l+0xfc>
 8005864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	921d      	str	r2, [sp, #116]	; 0x74
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b30      	cmp	r3, #48	; 0x30
 800586e:	d0f9      	beq.n	8005864 <_strtod_l+0x134>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d09f      	beq.n	80057b4 <_strtod_l+0x84>
 8005874:	2301      	movs	r3, #1
 8005876:	f04f 0900 	mov.w	r9, #0
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800587e:	930a      	str	r3, [sp, #40]	; 0x28
 8005880:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005884:	464f      	mov	r7, r9
 8005886:	220a      	movs	r2, #10
 8005888:	981d      	ldr	r0, [sp, #116]	; 0x74
 800588a:	7806      	ldrb	r6, [r0, #0]
 800588c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005890:	b2d9      	uxtb	r1, r3
 8005892:	2909      	cmp	r1, #9
 8005894:	d92a      	bls.n	80058ec <_strtod_l+0x1bc>
 8005896:	9907      	ldr	r1, [sp, #28]
 8005898:	462a      	mov	r2, r5
 800589a:	f002 fefd 	bl	8008698 <strncmp>
 800589e:	b398      	cbz	r0, 8005908 <_strtod_l+0x1d8>
 80058a0:	2000      	movs	r0, #0
 80058a2:	4633      	mov	r3, r6
 80058a4:	463d      	mov	r5, r7
 80058a6:	9007      	str	r0, [sp, #28]
 80058a8:	4602      	mov	r2, r0
 80058aa:	2b65      	cmp	r3, #101	; 0x65
 80058ac:	d001      	beq.n	80058b2 <_strtod_l+0x182>
 80058ae:	2b45      	cmp	r3, #69	; 0x45
 80058b0:	d118      	bne.n	80058e4 <_strtod_l+0x1b4>
 80058b2:	b91d      	cbnz	r5, 80058bc <_strtod_l+0x18c>
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	4303      	orrs	r3, r0
 80058b8:	d098      	beq.n	80057ec <_strtod_l+0xbc>
 80058ba:	2500      	movs	r5, #0
 80058bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80058c0:	f108 0301 	add.w	r3, r8, #1
 80058c4:	931d      	str	r3, [sp, #116]	; 0x74
 80058c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80058ca:	2b2b      	cmp	r3, #43	; 0x2b
 80058cc:	d075      	beq.n	80059ba <_strtod_l+0x28a>
 80058ce:	2b2d      	cmp	r3, #45	; 0x2d
 80058d0:	d07b      	beq.n	80059ca <_strtod_l+0x29a>
 80058d2:	f04f 0c00 	mov.w	ip, #0
 80058d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80058da:	2909      	cmp	r1, #9
 80058dc:	f240 8082 	bls.w	80059e4 <_strtod_l+0x2b4>
 80058e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80058e4:	2600      	movs	r6, #0
 80058e6:	e09d      	b.n	8005a24 <_strtod_l+0x2f4>
 80058e8:	2300      	movs	r3, #0
 80058ea:	e7c4      	b.n	8005876 <_strtod_l+0x146>
 80058ec:	2f08      	cmp	r7, #8
 80058ee:	bfd8      	it	le
 80058f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80058f2:	f100 0001 	add.w	r0, r0, #1
 80058f6:	bfda      	itte	le
 80058f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80058fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80058fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005902:	3701      	adds	r7, #1
 8005904:	901d      	str	r0, [sp, #116]	; 0x74
 8005906:	e7bf      	b.n	8005888 <_strtod_l+0x158>
 8005908:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800590a:	195a      	adds	r2, r3, r5
 800590c:	921d      	str	r2, [sp, #116]	; 0x74
 800590e:	5d5b      	ldrb	r3, [r3, r5]
 8005910:	2f00      	cmp	r7, #0
 8005912:	d037      	beq.n	8005984 <_strtod_l+0x254>
 8005914:	9007      	str	r0, [sp, #28]
 8005916:	463d      	mov	r5, r7
 8005918:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800591c:	2a09      	cmp	r2, #9
 800591e:	d912      	bls.n	8005946 <_strtod_l+0x216>
 8005920:	2201      	movs	r2, #1
 8005922:	e7c2      	b.n	80058aa <_strtod_l+0x17a>
 8005924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	921d      	str	r2, [sp, #116]	; 0x74
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	3001      	adds	r0, #1
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d0f8      	beq.n	8005924 <_strtod_l+0x1f4>
 8005932:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005936:	2a08      	cmp	r2, #8
 8005938:	f200 84db 	bhi.w	80062f2 <_strtod_l+0xbc2>
 800593c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800593e:	9007      	str	r0, [sp, #28]
 8005940:	2000      	movs	r0, #0
 8005942:	920a      	str	r2, [sp, #40]	; 0x28
 8005944:	4605      	mov	r5, r0
 8005946:	3b30      	subs	r3, #48	; 0x30
 8005948:	f100 0201 	add.w	r2, r0, #1
 800594c:	d014      	beq.n	8005978 <_strtod_l+0x248>
 800594e:	9907      	ldr	r1, [sp, #28]
 8005950:	4411      	add	r1, r2
 8005952:	9107      	str	r1, [sp, #28]
 8005954:	462a      	mov	r2, r5
 8005956:	eb00 0e05 	add.w	lr, r0, r5
 800595a:	210a      	movs	r1, #10
 800595c:	4572      	cmp	r2, lr
 800595e:	d113      	bne.n	8005988 <_strtod_l+0x258>
 8005960:	182a      	adds	r2, r5, r0
 8005962:	2a08      	cmp	r2, #8
 8005964:	f105 0501 	add.w	r5, r5, #1
 8005968:	4405      	add	r5, r0
 800596a:	dc1c      	bgt.n	80059a6 <_strtod_l+0x276>
 800596c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800596e:	220a      	movs	r2, #10
 8005970:	fb02 3301 	mla	r3, r2, r1, r3
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	2200      	movs	r2, #0
 8005978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800597a:	1c59      	adds	r1, r3, #1
 800597c:	911d      	str	r1, [sp, #116]	; 0x74
 800597e:	785b      	ldrb	r3, [r3, #1]
 8005980:	4610      	mov	r0, r2
 8005982:	e7c9      	b.n	8005918 <_strtod_l+0x1e8>
 8005984:	4638      	mov	r0, r7
 8005986:	e7d2      	b.n	800592e <_strtod_l+0x1fe>
 8005988:	2a08      	cmp	r2, #8
 800598a:	dc04      	bgt.n	8005996 <_strtod_l+0x266>
 800598c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800598e:	434e      	muls	r6, r1
 8005990:	9609      	str	r6, [sp, #36]	; 0x24
 8005992:	3201      	adds	r2, #1
 8005994:	e7e2      	b.n	800595c <_strtod_l+0x22c>
 8005996:	f102 0c01 	add.w	ip, r2, #1
 800599a:	f1bc 0f10 	cmp.w	ip, #16
 800599e:	bfd8      	it	le
 80059a0:	fb01 f909 	mulle.w	r9, r1, r9
 80059a4:	e7f5      	b.n	8005992 <_strtod_l+0x262>
 80059a6:	2d10      	cmp	r5, #16
 80059a8:	bfdc      	itt	le
 80059aa:	220a      	movle	r2, #10
 80059ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80059b0:	e7e1      	b.n	8005976 <_strtod_l+0x246>
 80059b2:	2300      	movs	r3, #0
 80059b4:	9307      	str	r3, [sp, #28]
 80059b6:	2201      	movs	r2, #1
 80059b8:	e77c      	b.n	80058b4 <_strtod_l+0x184>
 80059ba:	f04f 0c00 	mov.w	ip, #0
 80059be:	f108 0302 	add.w	r3, r8, #2
 80059c2:	931d      	str	r3, [sp, #116]	; 0x74
 80059c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80059c8:	e785      	b.n	80058d6 <_strtod_l+0x1a6>
 80059ca:	f04f 0c01 	mov.w	ip, #1
 80059ce:	e7f6      	b.n	80059be <_strtod_l+0x28e>
 80059d0:	08009508 	.word	0x08009508
 80059d4:	080092b8 	.word	0x080092b8
 80059d8:	7ff00000 	.word	0x7ff00000
 80059dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	911d      	str	r1, [sp, #116]	; 0x74
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b30      	cmp	r3, #48	; 0x30
 80059e6:	d0f9      	beq.n	80059dc <_strtod_l+0x2ac>
 80059e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80059ec:	2908      	cmp	r1, #8
 80059ee:	f63f af79 	bhi.w	80058e4 <_strtod_l+0x1b4>
 80059f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80059f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059fc:	1c59      	adds	r1, r3, #1
 80059fe:	911d      	str	r1, [sp, #116]	; 0x74
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005a06:	2e09      	cmp	r6, #9
 8005a08:	d937      	bls.n	8005a7a <_strtod_l+0x34a>
 8005a0a:	9e08      	ldr	r6, [sp, #32]
 8005a0c:	1b89      	subs	r1, r1, r6
 8005a0e:	2908      	cmp	r1, #8
 8005a10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005a14:	dc02      	bgt.n	8005a1c <_strtod_l+0x2ec>
 8005a16:	4576      	cmp	r6, lr
 8005a18:	bfa8      	it	ge
 8005a1a:	4676      	movge	r6, lr
 8005a1c:	f1bc 0f00 	cmp.w	ip, #0
 8005a20:	d000      	beq.n	8005a24 <_strtod_l+0x2f4>
 8005a22:	4276      	negs	r6, r6
 8005a24:	2d00      	cmp	r5, #0
 8005a26:	d14f      	bne.n	8005ac8 <_strtod_l+0x398>
 8005a28:	9904      	ldr	r1, [sp, #16]
 8005a2a:	4301      	orrs	r1, r0
 8005a2c:	f47f aec2 	bne.w	80057b4 <_strtod_l+0x84>
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	f47f aedb 	bne.w	80057ec <_strtod_l+0xbc>
 8005a36:	2b69      	cmp	r3, #105	; 0x69
 8005a38:	d027      	beq.n	8005a8a <_strtod_l+0x35a>
 8005a3a:	dc24      	bgt.n	8005a86 <_strtod_l+0x356>
 8005a3c:	2b49      	cmp	r3, #73	; 0x49
 8005a3e:	d024      	beq.n	8005a8a <_strtod_l+0x35a>
 8005a40:	2b4e      	cmp	r3, #78	; 0x4e
 8005a42:	f47f aed3 	bne.w	80057ec <_strtod_l+0xbc>
 8005a46:	499e      	ldr	r1, [pc, #632]	; (8005cc0 <_strtod_l+0x590>)
 8005a48:	a81d      	add	r0, sp, #116	; 0x74
 8005a4a:	f001 fe61 	bl	8007710 <__match>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f43f aecc 	beq.w	80057ec <_strtod_l+0xbc>
 8005a54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b28      	cmp	r3, #40	; 0x28
 8005a5a:	d12d      	bne.n	8005ab8 <_strtod_l+0x388>
 8005a5c:	4999      	ldr	r1, [pc, #612]	; (8005cc4 <_strtod_l+0x594>)
 8005a5e:	aa20      	add	r2, sp, #128	; 0x80
 8005a60:	a81d      	add	r0, sp, #116	; 0x74
 8005a62:	f001 fe69 	bl	8007738 <__hexnan>
 8005a66:	2805      	cmp	r0, #5
 8005a68:	d126      	bne.n	8005ab8 <_strtod_l+0x388>
 8005a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a78:	e69c      	b.n	80057b4 <_strtod_l+0x84>
 8005a7a:	210a      	movs	r1, #10
 8005a7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005a80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a84:	e7b9      	b.n	80059fa <_strtod_l+0x2ca>
 8005a86:	2b6e      	cmp	r3, #110	; 0x6e
 8005a88:	e7db      	b.n	8005a42 <_strtod_l+0x312>
 8005a8a:	498f      	ldr	r1, [pc, #572]	; (8005cc8 <_strtod_l+0x598>)
 8005a8c:	a81d      	add	r0, sp, #116	; 0x74
 8005a8e:	f001 fe3f 	bl	8007710 <__match>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	f43f aeaa 	beq.w	80057ec <_strtod_l+0xbc>
 8005a98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a9a:	498c      	ldr	r1, [pc, #560]	; (8005ccc <_strtod_l+0x59c>)
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	a81d      	add	r0, sp, #116	; 0x74
 8005aa0:	931d      	str	r3, [sp, #116]	; 0x74
 8005aa2:	f001 fe35 	bl	8007710 <__match>
 8005aa6:	b910      	cbnz	r0, 8005aae <_strtod_l+0x37e>
 8005aa8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aaa:	3301      	adds	r3, #1
 8005aac:	931d      	str	r3, [sp, #116]	; 0x74
 8005aae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8005cdc <_strtod_l+0x5ac>
 8005ab2:	f04f 0a00 	mov.w	sl, #0
 8005ab6:	e67d      	b.n	80057b4 <_strtod_l+0x84>
 8005ab8:	4885      	ldr	r0, [pc, #532]	; (8005cd0 <_strtod_l+0x5a0>)
 8005aba:	f002 fdd5 	bl	8008668 <nan>
 8005abe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005ac2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ac6:	e675      	b.n	80057b4 <_strtod_l+0x84>
 8005ac8:	9b07      	ldr	r3, [sp, #28]
 8005aca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005acc:	1af3      	subs	r3, r6, r3
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	bf08      	it	eq
 8005ad2:	462f      	moveq	r7, r5
 8005ad4:	2d10      	cmp	r5, #16
 8005ad6:	9308      	str	r3, [sp, #32]
 8005ad8:	46a8      	mov	r8, r5
 8005ada:	bfa8      	it	ge
 8005adc:	f04f 0810 	movge.w	r8, #16
 8005ae0:	f7fa fd18 	bl	8000514 <__aeabi_ui2d>
 8005ae4:	2d09      	cmp	r5, #9
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	468b      	mov	fp, r1
 8005aea:	dd13      	ble.n	8005b14 <_strtod_l+0x3e4>
 8005aec:	4b79      	ldr	r3, [pc, #484]	; (8005cd4 <_strtod_l+0x5a4>)
 8005aee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005af2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005af6:	f7fa fd87 	bl	8000608 <__aeabi_dmul>
 8005afa:	4682      	mov	sl, r0
 8005afc:	4648      	mov	r0, r9
 8005afe:	468b      	mov	fp, r1
 8005b00:	f7fa fd08 	bl	8000514 <__aeabi_ui2d>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4650      	mov	r0, sl
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	f7fa fbc6 	bl	800029c <__adddf3>
 8005b10:	4682      	mov	sl, r0
 8005b12:	468b      	mov	fp, r1
 8005b14:	2d0f      	cmp	r5, #15
 8005b16:	dc38      	bgt.n	8005b8a <_strtod_l+0x45a>
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f43f ae4a 	beq.w	80057b4 <_strtod_l+0x84>
 8005b20:	dd24      	ble.n	8005b6c <_strtod_l+0x43c>
 8005b22:	2b16      	cmp	r3, #22
 8005b24:	dc0b      	bgt.n	8005b3e <_strtod_l+0x40e>
 8005b26:	4d6b      	ldr	r5, [pc, #428]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005b2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005b30:	4652      	mov	r2, sl
 8005b32:	465b      	mov	r3, fp
 8005b34:	f7fa fd68 	bl	8000608 <__aeabi_dmul>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	468b      	mov	fp, r1
 8005b3c:	e63a      	b.n	80057b4 <_strtod_l+0x84>
 8005b3e:	9a08      	ldr	r2, [sp, #32]
 8005b40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005b44:	4293      	cmp	r3, r2
 8005b46:	db20      	blt.n	8005b8a <_strtod_l+0x45a>
 8005b48:	4c62      	ldr	r4, [pc, #392]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b4a:	f1c5 050f 	rsb	r5, r5, #15
 8005b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5a:	f7fa fd55 	bl	8000608 <__aeabi_dmul>
 8005b5e:	9b08      	ldr	r3, [sp, #32]
 8005b60:	1b5d      	subs	r5, r3, r5
 8005b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b6a:	e7e3      	b.n	8005b34 <_strtod_l+0x404>
 8005b6c:	9b08      	ldr	r3, [sp, #32]
 8005b6e:	3316      	adds	r3, #22
 8005b70:	db0b      	blt.n	8005b8a <_strtod_l+0x45a>
 8005b72:	9b07      	ldr	r3, [sp, #28]
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <_strtod_l+0x5a4>)
 8005b76:	1b9e      	subs	r6, r3, r6
 8005b78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005b7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b80:	4650      	mov	r0, sl
 8005b82:	4659      	mov	r1, fp
 8005b84:	f7fa fe6a 	bl	800085c <__aeabi_ddiv>
 8005b88:	e7d6      	b.n	8005b38 <_strtod_l+0x408>
 8005b8a:	9b08      	ldr	r3, [sp, #32]
 8005b8c:	eba5 0808 	sub.w	r8, r5, r8
 8005b90:	4498      	add	r8, r3
 8005b92:	f1b8 0f00 	cmp.w	r8, #0
 8005b96:	dd71      	ble.n	8005c7c <_strtod_l+0x54c>
 8005b98:	f018 030f 	ands.w	r3, r8, #15
 8005b9c:	d00a      	beq.n	8005bb4 <_strtod_l+0x484>
 8005b9e:	494d      	ldr	r1, [pc, #308]	; (8005cd4 <_strtod_l+0x5a4>)
 8005ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bac:	f7fa fd2c 	bl	8000608 <__aeabi_dmul>
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	468b      	mov	fp, r1
 8005bb4:	f038 080f 	bics.w	r8, r8, #15
 8005bb8:	d04d      	beq.n	8005c56 <_strtod_l+0x526>
 8005bba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005bbe:	dd22      	ble.n	8005c06 <_strtod_l+0x4d6>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	462e      	mov	r6, r5
 8005bc4:	9509      	str	r5, [sp, #36]	; 0x24
 8005bc6:	9507      	str	r5, [sp, #28]
 8005bc8:	2322      	movs	r3, #34	; 0x22
 8005bca:	f8df b110 	ldr.w	fp, [pc, #272]	; 8005cdc <_strtod_l+0x5ac>
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	f04f 0a00 	mov.w	sl, #0
 8005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f43f adec 	beq.w	80057b4 <_strtod_l+0x84>
 8005bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005bde:	4620      	mov	r0, r4
 8005be0:	f001 feb2 	bl	8007948 <_Bfree>
 8005be4:	9907      	ldr	r1, [sp, #28]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f001 feae 	bl	8007948 <_Bfree>
 8005bec:	4631      	mov	r1, r6
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f001 feaa 	bl	8007948 <_Bfree>
 8005bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f001 fea6 	bl	8007948 <_Bfree>
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f001 fea2 	bl	8007948 <_Bfree>
 8005c04:	e5d6      	b.n	80057b4 <_strtod_l+0x84>
 8005c06:	2300      	movs	r3, #0
 8005c08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005c0c:	4650      	mov	r0, sl
 8005c0e:	4659      	mov	r1, fp
 8005c10:	4699      	mov	r9, r3
 8005c12:	f1b8 0f01 	cmp.w	r8, #1
 8005c16:	dc21      	bgt.n	8005c5c <_strtod_l+0x52c>
 8005c18:	b10b      	cbz	r3, 8005c1e <_strtod_l+0x4ee>
 8005c1a:	4682      	mov	sl, r0
 8005c1c:	468b      	mov	fp, r1
 8005c1e:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <_strtod_l+0x5a8>)
 8005c20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005c24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005c28:	4652      	mov	r2, sl
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005c30:	f7fa fcea 	bl	8000608 <__aeabi_dmul>
 8005c34:	4b29      	ldr	r3, [pc, #164]	; (8005cdc <_strtod_l+0x5ac>)
 8005c36:	460a      	mov	r2, r1
 8005c38:	400b      	ands	r3, r1
 8005c3a:	4929      	ldr	r1, [pc, #164]	; (8005ce0 <_strtod_l+0x5b0>)
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	4682      	mov	sl, r0
 8005c40:	d8be      	bhi.n	8005bc0 <_strtod_l+0x490>
 8005c42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005c46:	428b      	cmp	r3, r1
 8005c48:	bf86      	itte	hi
 8005c4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005ce4 <_strtod_l+0x5b4>
 8005c4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c56:	2300      	movs	r3, #0
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	e081      	b.n	8005d60 <_strtod_l+0x630>
 8005c5c:	f018 0f01 	tst.w	r8, #1
 8005c60:	d007      	beq.n	8005c72 <_strtod_l+0x542>
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <_strtod_l+0x5a8>)
 8005c64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fccc 	bl	8000608 <__aeabi_dmul>
 8005c70:	2301      	movs	r3, #1
 8005c72:	f109 0901 	add.w	r9, r9, #1
 8005c76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c7a:	e7ca      	b.n	8005c12 <_strtod_l+0x4e2>
 8005c7c:	d0eb      	beq.n	8005c56 <_strtod_l+0x526>
 8005c7e:	f1c8 0800 	rsb	r8, r8, #0
 8005c82:	f018 020f 	ands.w	r2, r8, #15
 8005c86:	d00a      	beq.n	8005c9e <_strtod_l+0x56e>
 8005c88:	4b12      	ldr	r3, [pc, #72]	; (8005cd4 <_strtod_l+0x5a4>)
 8005c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8e:	4650      	mov	r0, sl
 8005c90:	4659      	mov	r1, fp
 8005c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c96:	f7fa fde1 	bl	800085c <__aeabi_ddiv>
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	468b      	mov	fp, r1
 8005c9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ca2:	d0d8      	beq.n	8005c56 <_strtod_l+0x526>
 8005ca4:	f1b8 0f1f 	cmp.w	r8, #31
 8005ca8:	dd1e      	ble.n	8005ce8 <_strtod_l+0x5b8>
 8005caa:	2500      	movs	r5, #0
 8005cac:	462e      	mov	r6, r5
 8005cae:	9509      	str	r5, [sp, #36]	; 0x24
 8005cb0:	9507      	str	r5, [sp, #28]
 8005cb2:	2322      	movs	r3, #34	; 0x22
 8005cb4:	f04f 0a00 	mov.w	sl, #0
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	e789      	b.n	8005bd4 <_strtod_l+0x4a4>
 8005cc0:	08009289 	.word	0x08009289
 8005cc4:	080092cc 	.word	0x080092cc
 8005cc8:	08009281 	.word	0x08009281
 8005ccc:	0800940c 	.word	0x0800940c
 8005cd0:	080096c8 	.word	0x080096c8
 8005cd4:	080095a8 	.word	0x080095a8
 8005cd8:	08009580 	.word	0x08009580
 8005cdc:	7ff00000 	.word	0x7ff00000
 8005ce0:	7ca00000 	.word	0x7ca00000
 8005ce4:	7fefffff 	.word	0x7fefffff
 8005ce8:	f018 0310 	ands.w	r3, r8, #16
 8005cec:	bf18      	it	ne
 8005cee:	236a      	movne	r3, #106	; 0x6a
 8005cf0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80060a8 <_strtod_l+0x978>
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f018 0f01 	tst.w	r8, #1
 8005d00:	d004      	beq.n	8005d0c <_strtod_l+0x5dc>
 8005d02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d06:	f7fa fc7f 	bl	8000608 <__aeabi_dmul>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005d10:	f109 0908 	add.w	r9, r9, #8
 8005d14:	d1f2      	bne.n	8005cfc <_strtod_l+0x5cc>
 8005d16:	b10b      	cbz	r3, 8005d1c <_strtod_l+0x5ec>
 8005d18:	4682      	mov	sl, r0
 8005d1a:	468b      	mov	fp, r1
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	b1bb      	cbz	r3, 8005d50 <_strtod_l+0x620>
 8005d20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8005d24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	dd10      	ble.n	8005d50 <_strtod_l+0x620>
 8005d2e:	2b1f      	cmp	r3, #31
 8005d30:	f340 8128 	ble.w	8005f84 <_strtod_l+0x854>
 8005d34:	2b34      	cmp	r3, #52	; 0x34
 8005d36:	bfde      	ittt	le
 8005d38:	3b20      	suble	r3, #32
 8005d3a:	f04f 32ff 	movle.w	r2, #4294967295
 8005d3e:	fa02 f303 	lslle.w	r3, r2, r3
 8005d42:	f04f 0a00 	mov.w	sl, #0
 8005d46:	bfcc      	ite	gt
 8005d48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d4c:	ea03 0b01 	andle.w	fp, r3, r1
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4650      	mov	r0, sl
 8005d56:	4659      	mov	r1, fp
 8005d58:	f7fa febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d1a4      	bne.n	8005caa <_strtod_l+0x57a>
 8005d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d66:	462b      	mov	r3, r5
 8005d68:	463a      	mov	r2, r7
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f001 fe58 	bl	8007a20 <__s2b>
 8005d70:	9009      	str	r0, [sp, #36]	; 0x24
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f43f af24 	beq.w	8005bc0 <_strtod_l+0x490>
 8005d78:	9b07      	ldr	r3, [sp, #28]
 8005d7a:	1b9e      	subs	r6, r3, r6
 8005d7c:	9b08      	ldr	r3, [sp, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bfb4      	ite	lt
 8005d82:	4633      	movlt	r3, r6
 8005d84:	2300      	movge	r3, #0
 8005d86:	9310      	str	r3, [sp, #64]	; 0x40
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	2500      	movs	r5, #0
 8005d8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d90:	9318      	str	r3, [sp, #96]	; 0x60
 8005d92:	462e      	mov	r6, r5
 8005d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d96:	4620      	mov	r0, r4
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	f001 fd95 	bl	80078c8 <_Balloc>
 8005d9e:	9007      	str	r0, [sp, #28]
 8005da0:	2800      	cmp	r0, #0
 8005da2:	f43f af11 	beq.w	8005bc8 <_strtod_l+0x498>
 8005da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	3202      	adds	r2, #2
 8005dac:	f103 010c 	add.w	r1, r3, #12
 8005db0:	0092      	lsls	r2, r2, #2
 8005db2:	300c      	adds	r0, #12
 8005db4:	f001 fd7a 	bl	80078ac <memcpy>
 8005db8:	ec4b ab10 	vmov	d0, sl, fp
 8005dbc:	aa20      	add	r2, sp, #128	; 0x80
 8005dbe:	a91f      	add	r1, sp, #124	; 0x7c
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005dc6:	f002 f967 	bl	8008098 <__d2b>
 8005dca:	901e      	str	r0, [sp, #120]	; 0x78
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	f43f aefb 	beq.w	8005bc8 <_strtod_l+0x498>
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f001 febd 	bl	8007b54 <__i2b>
 8005dda:	4606      	mov	r6, r0
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	f43f aef3 	beq.w	8005bc8 <_strtod_l+0x498>
 8005de2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005de4:	9904      	ldr	r1, [sp, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfab      	itete	ge
 8005dea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8005dec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8005dee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8005df0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8005df4:	bfac      	ite	ge
 8005df6:	eb03 0902 	addge.w	r9, r3, r2
 8005dfa:	1ad7      	sublt	r7, r2, r3
 8005dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dfe:	eba3 0801 	sub.w	r8, r3, r1
 8005e02:	4490      	add	r8, r2
 8005e04:	4ba3      	ldr	r3, [pc, #652]	; (8006094 <_strtod_l+0x964>)
 8005e06:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e0a:	4598      	cmp	r8, r3
 8005e0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005e10:	f280 80cc 	bge.w	8005fac <_strtod_l+0x87c>
 8005e14:	eba3 0308 	sub.w	r3, r3, r8
 8005e18:	2b1f      	cmp	r3, #31
 8005e1a:	eba2 0203 	sub.w	r2, r2, r3
 8005e1e:	f04f 0101 	mov.w	r1, #1
 8005e22:	f300 80b6 	bgt.w	8005f92 <_strtod_l+0x862>
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	9311      	str	r3, [sp, #68]	; 0x44
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8005e30:	eb09 0802 	add.w	r8, r9, r2
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	45c1      	cmp	r9, r8
 8005e38:	4417      	add	r7, r2
 8005e3a:	441f      	add	r7, r3
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	bfa8      	it	ge
 8005e40:	4643      	movge	r3, r8
 8005e42:	42bb      	cmp	r3, r7
 8005e44:	bfa8      	it	ge
 8005e46:	463b      	movge	r3, r7
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bfc2      	ittt	gt
 8005e4c:	eba8 0803 	subgt.w	r8, r8, r3
 8005e50:	1aff      	subgt	r7, r7, r3
 8005e52:	eba9 0903 	subgt.w	r9, r9, r3
 8005e56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd17      	ble.n	8005e8c <_strtod_l+0x75c>
 8005e5c:	4631      	mov	r1, r6
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4620      	mov	r0, r4
 8005e62:	f001 ff33 	bl	8007ccc <__pow5mult>
 8005e66:	4606      	mov	r6, r0
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	f43f aead 	beq.w	8005bc8 <_strtod_l+0x498>
 8005e6e:	4601      	mov	r1, r0
 8005e70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e72:	4620      	mov	r0, r4
 8005e74:	f001 fe84 	bl	8007b80 <__multiply>
 8005e78:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	f43f aea4 	beq.w	8005bc8 <_strtod_l+0x498>
 8005e80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e82:	4620      	mov	r0, r4
 8005e84:	f001 fd60 	bl	8007948 <_Bfree>
 8005e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8a:	931e      	str	r3, [sp, #120]	; 0x78
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	f300 8091 	bgt.w	8005fb6 <_strtod_l+0x886>
 8005e94:	9b08      	ldr	r3, [sp, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dd08      	ble.n	8005eac <_strtod_l+0x77c>
 8005e9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e9c:	9907      	ldr	r1, [sp, #28]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f001 ff14 	bl	8007ccc <__pow5mult>
 8005ea4:	9007      	str	r0, [sp, #28]
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	f43f ae8e 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eac:	2f00      	cmp	r7, #0
 8005eae:	dd08      	ble.n	8005ec2 <_strtod_l+0x792>
 8005eb0:	9907      	ldr	r1, [sp, #28]
 8005eb2:	463a      	mov	r2, r7
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f001 ff63 	bl	8007d80 <__lshift>
 8005eba:	9007      	str	r0, [sp, #28]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f43f ae83 	beq.w	8005bc8 <_strtod_l+0x498>
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	dd08      	ble.n	8005eda <_strtod_l+0x7aa>
 8005ec8:	4631      	mov	r1, r6
 8005eca:	464a      	mov	r2, r9
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f001 ff57 	bl	8007d80 <__lshift>
 8005ed2:	4606      	mov	r6, r0
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	f43f ae77 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eda:	9a07      	ldr	r2, [sp, #28]
 8005edc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f001 ffd6 	bl	8007e90 <__mdiff>
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f ae6e 	beq.w	8005bc8 <_strtod_l+0x498>
 8005eec:	68c3      	ldr	r3, [r0, #12]
 8005eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60c3      	str	r3, [r0, #12]
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	f001 ffaf 	bl	8007e58 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	da65      	bge.n	8005fca <_strtod_l+0x89a>
 8005efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f00:	ea53 030a 	orrs.w	r3, r3, sl
 8005f04:	f040 8087 	bne.w	8006016 <_strtod_l+0x8e6>
 8005f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8082 	bne.w	8006016 <_strtod_l+0x8e6>
 8005f12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f16:	0d1b      	lsrs	r3, r3, #20
 8005f18:	051b      	lsls	r3, r3, #20
 8005f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005f1e:	d97a      	bls.n	8006016 <_strtod_l+0x8e6>
 8005f20:	696b      	ldr	r3, [r5, #20]
 8005f22:	b913      	cbnz	r3, 8005f2a <_strtod_l+0x7fa>
 8005f24:	692b      	ldr	r3, [r5, #16]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	dd75      	ble.n	8006016 <_strtod_l+0x8e6>
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 ff26 	bl	8007d80 <__lshift>
 8005f34:	4631      	mov	r1, r6
 8005f36:	4605      	mov	r5, r0
 8005f38:	f001 ff8e 	bl	8007e58 <__mcmp>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	dd6a      	ble.n	8006016 <_strtod_l+0x8e6>
 8005f40:	9904      	ldr	r1, [sp, #16]
 8005f42:	4a55      	ldr	r2, [pc, #340]	; (8006098 <_strtod_l+0x968>)
 8005f44:	465b      	mov	r3, fp
 8005f46:	2900      	cmp	r1, #0
 8005f48:	f000 8085 	beq.w	8006056 <_strtod_l+0x926>
 8005f4c:	ea02 010b 	and.w	r1, r2, fp
 8005f50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005f54:	dc7f      	bgt.n	8006056 <_strtod_l+0x926>
 8005f56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005f5a:	f77f aeaa 	ble.w	8005cb2 <_strtod_l+0x582>
 8005f5e:	4a4f      	ldr	r2, [pc, #316]	; (800609c <_strtod_l+0x96c>)
 8005f60:	2300      	movs	r3, #0
 8005f62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8005f66:	4650      	mov	r0, sl
 8005f68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	f7fa fb4b 	bl	8000608 <__aeabi_dmul>
 8005f72:	460b      	mov	r3, r1
 8005f74:	4303      	orrs	r3, r0
 8005f76:	bf08      	it	eq
 8005f78:	2322      	moveq	r3, #34	; 0x22
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	468b      	mov	fp, r1
 8005f7e:	bf08      	it	eq
 8005f80:	6023      	streq	r3, [r4, #0]
 8005f82:	e62b      	b.n	8005bdc <_strtod_l+0x4ac>
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	ea03 0a0a 	and.w	sl, r3, sl
 8005f90:	e6de      	b.n	8005d50 <_strtod_l+0x620>
 8005f92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005fa2:	fa01 f308 	lsl.w	r3, r1, r8
 8005fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fa8:	9111      	str	r1, [sp, #68]	; 0x44
 8005faa:	e741      	b.n	8005e30 <_strtod_l+0x700>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8005fb4:	e73c      	b.n	8005e30 <_strtod_l+0x700>
 8005fb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005fb8:	4642      	mov	r2, r8
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f001 fee0 	bl	8007d80 <__lshift>
 8005fc0:	901e      	str	r0, [sp, #120]	; 0x78
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	f47f af66 	bne.w	8005e94 <_strtod_l+0x764>
 8005fc8:	e5fe      	b.n	8005bc8 <_strtod_l+0x498>
 8005fca:	465f      	mov	r7, fp
 8005fcc:	d16e      	bne.n	80060ac <_strtod_l+0x97c>
 8005fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fd4:	b342      	cbz	r2, 8006028 <_strtod_l+0x8f8>
 8005fd6:	4a32      	ldr	r2, [pc, #200]	; (80060a0 <_strtod_l+0x970>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d128      	bne.n	800602e <_strtod_l+0x8fe>
 8005fdc:	9b04      	ldr	r3, [sp, #16]
 8005fde:	4650      	mov	r0, sl
 8005fe0:	b1eb      	cbz	r3, 800601e <_strtod_l+0x8ee>
 8005fe2:	4a2d      	ldr	r2, [pc, #180]	; (8006098 <_strtod_l+0x968>)
 8005fe4:	403a      	ands	r2, r7
 8005fe6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005fea:	f04f 31ff 	mov.w	r1, #4294967295
 8005fee:	d819      	bhi.n	8006024 <_strtod_l+0x8f4>
 8005ff0:	0d12      	lsrs	r2, r2, #20
 8005ff2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	4298      	cmp	r0, r3
 8005ffc:	d117      	bne.n	800602e <_strtod_l+0x8fe>
 8005ffe:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <_strtod_l+0x974>)
 8006000:	429f      	cmp	r7, r3
 8006002:	d102      	bne.n	800600a <_strtod_l+0x8da>
 8006004:	3001      	adds	r0, #1
 8006006:	f43f addf 	beq.w	8005bc8 <_strtod_l+0x498>
 800600a:	4b23      	ldr	r3, [pc, #140]	; (8006098 <_strtod_l+0x968>)
 800600c:	403b      	ands	r3, r7
 800600e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006012:	f04f 0a00 	mov.w	sl, #0
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1a0      	bne.n	8005f5e <_strtod_l+0x82e>
 800601c:	e5de      	b.n	8005bdc <_strtod_l+0x4ac>
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	e7ea      	b.n	8005ffa <_strtod_l+0x8ca>
 8006024:	460b      	mov	r3, r1
 8006026:	e7e8      	b.n	8005ffa <_strtod_l+0x8ca>
 8006028:	ea53 030a 	orrs.w	r3, r3, sl
 800602c:	d088      	beq.n	8005f40 <_strtod_l+0x810>
 800602e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006030:	b1db      	cbz	r3, 800606a <_strtod_l+0x93a>
 8006032:	423b      	tst	r3, r7
 8006034:	d0ef      	beq.n	8006016 <_strtod_l+0x8e6>
 8006036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006038:	9a04      	ldr	r2, [sp, #16]
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	b1c3      	cbz	r3, 8006072 <_strtod_l+0x942>
 8006040:	f7ff fb5a 	bl	80056f8 <sulp>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800604c:	f7fa f926 	bl	800029c <__adddf3>
 8006050:	4682      	mov	sl, r0
 8006052:	468b      	mov	fp, r1
 8006054:	e7df      	b.n	8006016 <_strtod_l+0x8e6>
 8006056:	4013      	ands	r3, r2
 8006058:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800605c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006060:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006064:	f04f 3aff 	mov.w	sl, #4294967295
 8006068:	e7d5      	b.n	8006016 <_strtod_l+0x8e6>
 800606a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800606c:	ea13 0f0a 	tst.w	r3, sl
 8006070:	e7e0      	b.n	8006034 <_strtod_l+0x904>
 8006072:	f7ff fb41 	bl	80056f8 <sulp>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800607e:	f7fa f90b 	bl	8000298 <__aeabi_dsub>
 8006082:	2200      	movs	r2, #0
 8006084:	2300      	movs	r3, #0
 8006086:	4682      	mov	sl, r0
 8006088:	468b      	mov	fp, r1
 800608a:	f7fa fd25 	bl	8000ad8 <__aeabi_dcmpeq>
 800608e:	2800      	cmp	r0, #0
 8006090:	d0c1      	beq.n	8006016 <_strtod_l+0x8e6>
 8006092:	e60e      	b.n	8005cb2 <_strtod_l+0x582>
 8006094:	fffffc02 	.word	0xfffffc02
 8006098:	7ff00000 	.word	0x7ff00000
 800609c:	39500000 	.word	0x39500000
 80060a0:	000fffff 	.word	0x000fffff
 80060a4:	7fefffff 	.word	0x7fefffff
 80060a8:	080092e0 	.word	0x080092e0
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	f002 f84e 	bl	8008150 <__ratio>
 80060b4:	ec59 8b10 	vmov	r8, r9, d0
 80060b8:	ee10 0a10 	vmov	r0, s0
 80060bc:	2200      	movs	r2, #0
 80060be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa fd1c 	bl	8000b00 <__aeabi_dcmple>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d07c      	beq.n	80061c6 <_strtod_l+0xa96>
 80060cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d04c      	beq.n	800616c <_strtod_l+0xa3c>
 80060d2:	4b95      	ldr	r3, [pc, #596]	; (8006328 <_strtod_l+0xbf8>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80060da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006328 <_strtod_l+0xbf8>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	4b92      	ldr	r3, [pc, #584]	; (800632c <_strtod_l+0xbfc>)
 80060e4:	403b      	ands	r3, r7
 80060e6:	9311      	str	r3, [sp, #68]	; 0x44
 80060e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80060ea:	4b91      	ldr	r3, [pc, #580]	; (8006330 <_strtod_l+0xc00>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	f040 80b2 	bne.w	8006256 <_strtod_l+0xb26>
 80060f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80060f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80060fe:	ec4b ab10 	vmov	d0, sl, fp
 8006102:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006106:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800610a:	f001 ff49 	bl	8007fa0 <__ulp>
 800610e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006112:	ec53 2b10 	vmov	r2, r3, d0
 8006116:	f7fa fa77 	bl	8000608 <__aeabi_dmul>
 800611a:	4652      	mov	r2, sl
 800611c:	465b      	mov	r3, fp
 800611e:	f7fa f8bd 	bl	800029c <__adddf3>
 8006122:	460b      	mov	r3, r1
 8006124:	4981      	ldr	r1, [pc, #516]	; (800632c <_strtod_l+0xbfc>)
 8006126:	4a83      	ldr	r2, [pc, #524]	; (8006334 <_strtod_l+0xc04>)
 8006128:	4019      	ands	r1, r3
 800612a:	4291      	cmp	r1, r2
 800612c:	4682      	mov	sl, r0
 800612e:	d95e      	bls.n	80061ee <_strtod_l+0xabe>
 8006130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006132:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006136:	4293      	cmp	r3, r2
 8006138:	d103      	bne.n	8006142 <_strtod_l+0xa12>
 800613a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800613c:	3301      	adds	r3, #1
 800613e:	f43f ad43 	beq.w	8005bc8 <_strtod_l+0x498>
 8006142:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006340 <_strtod_l+0xc10>
 8006146:	f04f 3aff 	mov.w	sl, #4294967295
 800614a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800614c:	4620      	mov	r0, r4
 800614e:	f001 fbfb 	bl	8007948 <_Bfree>
 8006152:	9907      	ldr	r1, [sp, #28]
 8006154:	4620      	mov	r0, r4
 8006156:	f001 fbf7 	bl	8007948 <_Bfree>
 800615a:	4631      	mov	r1, r6
 800615c:	4620      	mov	r0, r4
 800615e:	f001 fbf3 	bl	8007948 <_Bfree>
 8006162:	4629      	mov	r1, r5
 8006164:	4620      	mov	r0, r4
 8006166:	f001 fbef 	bl	8007948 <_Bfree>
 800616a:	e613      	b.n	8005d94 <_strtod_l+0x664>
 800616c:	f1ba 0f00 	cmp.w	sl, #0
 8006170:	d11b      	bne.n	80061aa <_strtod_l+0xa7a>
 8006172:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006176:	b9f3      	cbnz	r3, 80061b6 <_strtod_l+0xa86>
 8006178:	4b6b      	ldr	r3, [pc, #428]	; (8006328 <_strtod_l+0xbf8>)
 800617a:	2200      	movs	r2, #0
 800617c:	4640      	mov	r0, r8
 800617e:	4649      	mov	r1, r9
 8006180:	f7fa fcb4 	bl	8000aec <__aeabi_dcmplt>
 8006184:	b9d0      	cbnz	r0, 80061bc <_strtod_l+0xa8c>
 8006186:	4640      	mov	r0, r8
 8006188:	4649      	mov	r1, r9
 800618a:	4b6b      	ldr	r3, [pc, #428]	; (8006338 <_strtod_l+0xc08>)
 800618c:	2200      	movs	r2, #0
 800618e:	f7fa fa3b 	bl	8000608 <__aeabi_dmul>
 8006192:	4680      	mov	r8, r0
 8006194:	4689      	mov	r9, r1
 8006196:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800619a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800619e:	931b      	str	r3, [sp, #108]	; 0x6c
 80061a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80061a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80061a8:	e79b      	b.n	80060e2 <_strtod_l+0x9b2>
 80061aa:	f1ba 0f01 	cmp.w	sl, #1
 80061ae:	d102      	bne.n	80061b6 <_strtod_l+0xa86>
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	f43f ad7e 	beq.w	8005cb2 <_strtod_l+0x582>
 80061b6:	4b61      	ldr	r3, [pc, #388]	; (800633c <_strtod_l+0xc0c>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	e78c      	b.n	80060d6 <_strtod_l+0x9a6>
 80061bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006338 <_strtod_l+0xc08>
 80061c0:	f04f 0800 	mov.w	r8, #0
 80061c4:	e7e7      	b.n	8006196 <_strtod_l+0xa66>
 80061c6:	4b5c      	ldr	r3, [pc, #368]	; (8006338 <_strtod_l+0xc08>)
 80061c8:	4640      	mov	r0, r8
 80061ca:	4649      	mov	r1, r9
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa fa1b 	bl	8000608 <__aeabi_dmul>
 80061d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d4:	4680      	mov	r8, r0
 80061d6:	4689      	mov	r9, r1
 80061d8:	b933      	cbnz	r3, 80061e8 <_strtod_l+0xab8>
 80061da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061de:	9012      	str	r0, [sp, #72]	; 0x48
 80061e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80061e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80061e6:	e7dd      	b.n	80061a4 <_strtod_l+0xa74>
 80061e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80061ec:	e7f9      	b.n	80061e2 <_strtod_l+0xab2>
 80061ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1a8      	bne.n	800614a <_strtod_l+0xa1a>
 80061f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	051b      	lsls	r3, r3, #20
 8006202:	429a      	cmp	r2, r3
 8006204:	d1a1      	bne.n	800614a <_strtod_l+0xa1a>
 8006206:	4640      	mov	r0, r8
 8006208:	4649      	mov	r1, r9
 800620a:	f7fa fd5d 	bl	8000cc8 <__aeabi_d2lz>
 800620e:	f7fa f9cd 	bl	80005ac <__aeabi_l2d>
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	4640      	mov	r0, r8
 8006218:	4649      	mov	r1, r9
 800621a:	f7fa f83d 	bl	8000298 <__aeabi_dsub>
 800621e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006224:	ea43 030a 	orr.w	r3, r3, sl
 8006228:	4313      	orrs	r3, r2
 800622a:	4680      	mov	r8, r0
 800622c:	4689      	mov	r9, r1
 800622e:	d053      	beq.n	80062d8 <_strtod_l+0xba8>
 8006230:	a335      	add	r3, pc, #212	; (adr r3, 8006308 <_strtod_l+0xbd8>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	f7fa fc59 	bl	8000aec <__aeabi_dcmplt>
 800623a:	2800      	cmp	r0, #0
 800623c:	f47f acce 	bne.w	8005bdc <_strtod_l+0x4ac>
 8006240:	a333      	add	r3, pc, #204	; (adr r3, 8006310 <_strtod_l+0xbe0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	4640      	mov	r0, r8
 8006248:	4649      	mov	r1, r9
 800624a:	f7fa fc6d 	bl	8000b28 <__aeabi_dcmpgt>
 800624e:	2800      	cmp	r0, #0
 8006250:	f43f af7b 	beq.w	800614a <_strtod_l+0xa1a>
 8006254:	e4c2      	b.n	8005bdc <_strtod_l+0x4ac>
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	b333      	cbz	r3, 80062a8 <_strtod_l+0xb78>
 800625a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800625c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006260:	d822      	bhi.n	80062a8 <_strtod_l+0xb78>
 8006262:	a32d      	add	r3, pc, #180	; (adr r3, 8006318 <_strtod_l+0xbe8>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	4640      	mov	r0, r8
 800626a:	4649      	mov	r1, r9
 800626c:	f7fa fc48 	bl	8000b00 <__aeabi_dcmple>
 8006270:	b1a0      	cbz	r0, 800629c <_strtod_l+0xb6c>
 8006272:	4649      	mov	r1, r9
 8006274:	4640      	mov	r0, r8
 8006276:	f7fa fc9f 	bl	8000bb8 <__aeabi_d2uiz>
 800627a:	2801      	cmp	r0, #1
 800627c:	bf38      	it	cc
 800627e:	2001      	movcc	r0, #1
 8006280:	f7fa f948 	bl	8000514 <__aeabi_ui2d>
 8006284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006286:	4680      	mov	r8, r0
 8006288:	4689      	mov	r9, r1
 800628a:	bb13      	cbnz	r3, 80062d2 <_strtod_l+0xba2>
 800628c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006290:	9014      	str	r0, [sp, #80]	; 0x50
 8006292:	9315      	str	r3, [sp, #84]	; 0x54
 8006294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006298:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800629c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800629e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80062a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80062a4:	1a9b      	subs	r3, r3, r2
 80062a6:	930d      	str	r3, [sp, #52]	; 0x34
 80062a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80062b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062b4:	f001 fe74 	bl	8007fa0 <__ulp>
 80062b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062bc:	ec53 2b10 	vmov	r2, r3, d0
 80062c0:	f7fa f9a2 	bl	8000608 <__aeabi_dmul>
 80062c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062c8:	f7f9 ffe8 	bl	800029c <__adddf3>
 80062cc:	4682      	mov	sl, r0
 80062ce:	468b      	mov	fp, r1
 80062d0:	e78f      	b.n	80061f2 <_strtod_l+0xac2>
 80062d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80062d6:	e7dd      	b.n	8006294 <_strtod_l+0xb64>
 80062d8:	a311      	add	r3, pc, #68	; (adr r3, 8006320 <_strtod_l+0xbf0>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa fc05 	bl	8000aec <__aeabi_dcmplt>
 80062e2:	e7b4      	b.n	800624e <_strtod_l+0xb1e>
 80062e4:	2300      	movs	r3, #0
 80062e6:	930e      	str	r3, [sp, #56]	; 0x38
 80062e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80062ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	f7ff ba65 	b.w	80057bc <_strtod_l+0x8c>
 80062f2:	2b65      	cmp	r3, #101	; 0x65
 80062f4:	f43f ab5d 	beq.w	80059b2 <_strtod_l+0x282>
 80062f8:	2b45      	cmp	r3, #69	; 0x45
 80062fa:	f43f ab5a 	beq.w	80059b2 <_strtod_l+0x282>
 80062fe:	2201      	movs	r2, #1
 8006300:	f7ff bb92 	b.w	8005a28 <_strtod_l+0x2f8>
 8006304:	f3af 8000 	nop.w
 8006308:	94a03595 	.word	0x94a03595
 800630c:	3fdfffff 	.word	0x3fdfffff
 8006310:	35afe535 	.word	0x35afe535
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	ffc00000 	.word	0xffc00000
 800631c:	41dfffff 	.word	0x41dfffff
 8006320:	94a03595 	.word	0x94a03595
 8006324:	3fcfffff 	.word	0x3fcfffff
 8006328:	3ff00000 	.word	0x3ff00000
 800632c:	7ff00000 	.word	0x7ff00000
 8006330:	7fe00000 	.word	0x7fe00000
 8006334:	7c9fffff 	.word	0x7c9fffff
 8006338:	3fe00000 	.word	0x3fe00000
 800633c:	bff00000 	.word	0xbff00000
 8006340:	7fefffff 	.word	0x7fefffff

08006344 <_strtod_r>:
 8006344:	4b01      	ldr	r3, [pc, #4]	; (800634c <_strtod_r+0x8>)
 8006346:	f7ff b9f3 	b.w	8005730 <_strtod_l>
 800634a:	bf00      	nop
 800634c:	20000078 	.word	0x20000078

08006350 <_strtol_l.isra.0>:
 8006350:	2b01      	cmp	r3, #1
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	d001      	beq.n	800635c <_strtol_l.isra.0+0xc>
 8006358:	2b24      	cmp	r3, #36	; 0x24
 800635a:	d906      	bls.n	800636a <_strtol_l.isra.0+0x1a>
 800635c:	f7fe fafa 	bl	8004954 <__errno>
 8006360:	2316      	movs	r3, #22
 8006362:	6003      	str	r3, [r0, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	4f3a      	ldr	r7, [pc, #232]	; (8006454 <_strtol_l.isra.0+0x104>)
 800636c:	468e      	mov	lr, r1
 800636e:	4676      	mov	r6, lr
 8006370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006374:	5de5      	ldrb	r5, [r4, r7]
 8006376:	f015 0508 	ands.w	r5, r5, #8
 800637a:	d1f8      	bne.n	800636e <_strtol_l.isra.0+0x1e>
 800637c:	2c2d      	cmp	r4, #45	; 0x2d
 800637e:	d134      	bne.n	80063ea <_strtol_l.isra.0+0x9a>
 8006380:	f89e 4000 	ldrb.w	r4, [lr]
 8006384:	f04f 0801 	mov.w	r8, #1
 8006388:	f106 0e02 	add.w	lr, r6, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <_strtol_l.isra.0+0xfa>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d10c      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006394:	2c30      	cmp	r4, #48	; 0x30
 8006396:	d10a      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006398:	f89e 4000 	ldrb.w	r4, [lr]
 800639c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80063a0:	2c58      	cmp	r4, #88	; 0x58
 80063a2:	d14d      	bne.n	8006440 <_strtol_l.isra.0+0xf0>
 80063a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80063a8:	2310      	movs	r3, #16
 80063aa:	f10e 0e02 	add.w	lr, lr, #2
 80063ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80063b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80063b6:	2600      	movs	r6, #0
 80063b8:	fbbc f9f3 	udiv	r9, ip, r3
 80063bc:	4635      	mov	r5, r6
 80063be:	fb03 ca19 	mls	sl, r3, r9, ip
 80063c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80063c6:	2f09      	cmp	r7, #9
 80063c8:	d818      	bhi.n	80063fc <_strtol_l.isra.0+0xac>
 80063ca:	463c      	mov	r4, r7
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	dd24      	ble.n	800641a <_strtol_l.isra.0+0xca>
 80063d0:	2e00      	cmp	r6, #0
 80063d2:	db1f      	blt.n	8006414 <_strtol_l.isra.0+0xc4>
 80063d4:	45a9      	cmp	r9, r5
 80063d6:	d31d      	bcc.n	8006414 <_strtol_l.isra.0+0xc4>
 80063d8:	d101      	bne.n	80063de <_strtol_l.isra.0+0x8e>
 80063da:	45a2      	cmp	sl, r4
 80063dc:	db1a      	blt.n	8006414 <_strtol_l.isra.0+0xc4>
 80063de:	fb05 4503 	mla	r5, r5, r3, r4
 80063e2:	2601      	movs	r6, #1
 80063e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80063e8:	e7eb      	b.n	80063c2 <_strtol_l.isra.0+0x72>
 80063ea:	2c2b      	cmp	r4, #43	; 0x2b
 80063ec:	bf08      	it	eq
 80063ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80063f2:	46a8      	mov	r8, r5
 80063f4:	bf08      	it	eq
 80063f6:	f106 0e02 	addeq.w	lr, r6, #2
 80063fa:	e7c7      	b.n	800638c <_strtol_l.isra.0+0x3c>
 80063fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006400:	2f19      	cmp	r7, #25
 8006402:	d801      	bhi.n	8006408 <_strtol_l.isra.0+0xb8>
 8006404:	3c37      	subs	r4, #55	; 0x37
 8006406:	e7e1      	b.n	80063cc <_strtol_l.isra.0+0x7c>
 8006408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800640c:	2f19      	cmp	r7, #25
 800640e:	d804      	bhi.n	800641a <_strtol_l.isra.0+0xca>
 8006410:	3c57      	subs	r4, #87	; 0x57
 8006412:	e7db      	b.n	80063cc <_strtol_l.isra.0+0x7c>
 8006414:	f04f 36ff 	mov.w	r6, #4294967295
 8006418:	e7e4      	b.n	80063e4 <_strtol_l.isra.0+0x94>
 800641a:	2e00      	cmp	r6, #0
 800641c:	da05      	bge.n	800642a <_strtol_l.isra.0+0xda>
 800641e:	2322      	movs	r3, #34	; 0x22
 8006420:	6003      	str	r3, [r0, #0]
 8006422:	4665      	mov	r5, ip
 8006424:	b942      	cbnz	r2, 8006438 <_strtol_l.isra.0+0xe8>
 8006426:	4628      	mov	r0, r5
 8006428:	e79d      	b.n	8006366 <_strtol_l.isra.0+0x16>
 800642a:	f1b8 0f00 	cmp.w	r8, #0
 800642e:	d000      	beq.n	8006432 <_strtol_l.isra.0+0xe2>
 8006430:	426d      	negs	r5, r5
 8006432:	2a00      	cmp	r2, #0
 8006434:	d0f7      	beq.n	8006426 <_strtol_l.isra.0+0xd6>
 8006436:	b10e      	cbz	r6, 800643c <_strtol_l.isra.0+0xec>
 8006438:	f10e 31ff 	add.w	r1, lr, #4294967295
 800643c:	6011      	str	r1, [r2, #0]
 800643e:	e7f2      	b.n	8006426 <_strtol_l.isra.0+0xd6>
 8006440:	2430      	movs	r4, #48	; 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1b3      	bne.n	80063ae <_strtol_l.isra.0+0x5e>
 8006446:	2308      	movs	r3, #8
 8006448:	e7b1      	b.n	80063ae <_strtol_l.isra.0+0x5e>
 800644a:	2c30      	cmp	r4, #48	; 0x30
 800644c:	d0a4      	beq.n	8006398 <_strtol_l.isra.0+0x48>
 800644e:	230a      	movs	r3, #10
 8006450:	e7ad      	b.n	80063ae <_strtol_l.isra.0+0x5e>
 8006452:	bf00      	nop
 8006454:	08009309 	.word	0x08009309

08006458 <_strtol_r>:
 8006458:	f7ff bf7a 	b.w	8006350 <_strtol_l.isra.0>

0800645c <_vsiprintf_r>:
 800645c:	b500      	push	{lr}
 800645e:	b09b      	sub	sp, #108	; 0x6c
 8006460:	9100      	str	r1, [sp, #0]
 8006462:	9104      	str	r1, [sp, #16]
 8006464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006468:	9105      	str	r1, [sp, #20]
 800646a:	9102      	str	r1, [sp, #8]
 800646c:	4905      	ldr	r1, [pc, #20]	; (8006484 <_vsiprintf_r+0x28>)
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	4669      	mov	r1, sp
 8006472:	f001 fff9 	bl	8008468 <_svfiprintf_r>
 8006476:	9b00      	ldr	r3, [sp, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	b01b      	add	sp, #108	; 0x6c
 800647e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006482:	bf00      	nop
 8006484:	ffff0208 	.word	0xffff0208

08006488 <vsiprintf>:
 8006488:	4613      	mov	r3, r2
 800648a:	460a      	mov	r2, r1
 800648c:	4601      	mov	r1, r0
 800648e:	4802      	ldr	r0, [pc, #8]	; (8006498 <vsiprintf+0x10>)
 8006490:	6800      	ldr	r0, [r0, #0]
 8006492:	f7ff bfe3 	b.w	800645c <_vsiprintf_r>
 8006496:	bf00      	nop
 8006498:	20000010 	.word	0x20000010

0800649c <quorem>:
 800649c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	6903      	ldr	r3, [r0, #16]
 80064a2:	690c      	ldr	r4, [r1, #16]
 80064a4:	42a3      	cmp	r3, r4
 80064a6:	4607      	mov	r7, r0
 80064a8:	f2c0 8081 	blt.w	80065ae <quorem+0x112>
 80064ac:	3c01      	subs	r4, #1
 80064ae:	f101 0814 	add.w	r8, r1, #20
 80064b2:	f100 0514 	add.w	r5, r0, #20
 80064b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064c4:	3301      	adds	r3, #1
 80064c6:	429a      	cmp	r2, r3
 80064c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80064d4:	d331      	bcc.n	800653a <quorem+0x9e>
 80064d6:	f04f 0e00 	mov.w	lr, #0
 80064da:	4640      	mov	r0, r8
 80064dc:	46ac      	mov	ip, r5
 80064de:	46f2      	mov	sl, lr
 80064e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80064e4:	b293      	uxth	r3, r2
 80064e6:	fb06 e303 	mla	r3, r6, r3, lr
 80064ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	ebaa 0303 	sub.w	r3, sl, r3
 80064f4:	0c12      	lsrs	r2, r2, #16
 80064f6:	f8dc a000 	ldr.w	sl, [ip]
 80064fa:	fb06 e202 	mla	r2, r6, r2, lr
 80064fe:	fa13 f38a 	uxtah	r3, r3, sl
 8006502:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006506:	fa1f fa82 	uxth.w	sl, r2
 800650a:	f8dc 2000 	ldr.w	r2, [ip]
 800650e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006512:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006516:	b29b      	uxth	r3, r3
 8006518:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800651c:	4581      	cmp	r9, r0
 800651e:	f84c 3b04 	str.w	r3, [ip], #4
 8006522:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006526:	d2db      	bcs.n	80064e0 <quorem+0x44>
 8006528:	f855 300b 	ldr.w	r3, [r5, fp]
 800652c:	b92b      	cbnz	r3, 800653a <quorem+0x9e>
 800652e:	9b01      	ldr	r3, [sp, #4]
 8006530:	3b04      	subs	r3, #4
 8006532:	429d      	cmp	r5, r3
 8006534:	461a      	mov	r2, r3
 8006536:	d32e      	bcc.n	8006596 <quorem+0xfa>
 8006538:	613c      	str	r4, [r7, #16]
 800653a:	4638      	mov	r0, r7
 800653c:	f001 fc8c 	bl	8007e58 <__mcmp>
 8006540:	2800      	cmp	r0, #0
 8006542:	db24      	blt.n	800658e <quorem+0xf2>
 8006544:	3601      	adds	r6, #1
 8006546:	4628      	mov	r0, r5
 8006548:	f04f 0c00 	mov.w	ip, #0
 800654c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006550:	f8d0 e000 	ldr.w	lr, [r0]
 8006554:	b293      	uxth	r3, r2
 8006556:	ebac 0303 	sub.w	r3, ip, r3
 800655a:	0c12      	lsrs	r2, r2, #16
 800655c:	fa13 f38e 	uxtah	r3, r3, lr
 8006560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006568:	b29b      	uxth	r3, r3
 800656a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800656e:	45c1      	cmp	r9, r8
 8006570:	f840 3b04 	str.w	r3, [r0], #4
 8006574:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006578:	d2e8      	bcs.n	800654c <quorem+0xb0>
 800657a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800657e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006582:	b922      	cbnz	r2, 800658e <quorem+0xf2>
 8006584:	3b04      	subs	r3, #4
 8006586:	429d      	cmp	r5, r3
 8006588:	461a      	mov	r2, r3
 800658a:	d30a      	bcc.n	80065a2 <quorem+0x106>
 800658c:	613c      	str	r4, [r7, #16]
 800658e:	4630      	mov	r0, r6
 8006590:	b003      	add	sp, #12
 8006592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	6812      	ldr	r2, [r2, #0]
 8006598:	3b04      	subs	r3, #4
 800659a:	2a00      	cmp	r2, #0
 800659c:	d1cc      	bne.n	8006538 <quorem+0x9c>
 800659e:	3c01      	subs	r4, #1
 80065a0:	e7c7      	b.n	8006532 <quorem+0x96>
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	3b04      	subs	r3, #4
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	d1f0      	bne.n	800658c <quorem+0xf0>
 80065aa:	3c01      	subs	r4, #1
 80065ac:	e7eb      	b.n	8006586 <quorem+0xea>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e7ee      	b.n	8006590 <quorem+0xf4>
 80065b2:	0000      	movs	r0, r0
 80065b4:	0000      	movs	r0, r0
	...

080065b8 <_dtoa_r>:
 80065b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	ed2d 8b02 	vpush	{d8}
 80065c0:	ec57 6b10 	vmov	r6, r7, d0
 80065c4:	b095      	sub	sp, #84	; 0x54
 80065c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065cc:	9105      	str	r1, [sp, #20]
 80065ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80065d2:	4604      	mov	r4, r0
 80065d4:	9209      	str	r2, [sp, #36]	; 0x24
 80065d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d8:	b975      	cbnz	r5, 80065f8 <_dtoa_r+0x40>
 80065da:	2010      	movs	r0, #16
 80065dc:	f001 f94c 	bl	8007878 <malloc>
 80065e0:	4602      	mov	r2, r0
 80065e2:	6260      	str	r0, [r4, #36]	; 0x24
 80065e4:	b920      	cbnz	r0, 80065f0 <_dtoa_r+0x38>
 80065e6:	4bb2      	ldr	r3, [pc, #712]	; (80068b0 <_dtoa_r+0x2f8>)
 80065e8:	21ea      	movs	r1, #234	; 0xea
 80065ea:	48b2      	ldr	r0, [pc, #712]	; (80068b4 <_dtoa_r+0x2fc>)
 80065ec:	f002 f874 	bl	80086d8 <__assert_func>
 80065f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065f4:	6005      	str	r5, [r0, #0]
 80065f6:	60c5      	str	r5, [r0, #12]
 80065f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	b151      	cbz	r1, 8006614 <_dtoa_r+0x5c>
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	604a      	str	r2, [r1, #4]
 8006602:	2301      	movs	r3, #1
 8006604:	4093      	lsls	r3, r2
 8006606:	608b      	str	r3, [r1, #8]
 8006608:	4620      	mov	r0, r4
 800660a:	f001 f99d 	bl	8007948 <_Bfree>
 800660e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	1e3b      	subs	r3, r7, #0
 8006616:	bfb9      	ittee	lt
 8006618:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800661c:	9303      	strlt	r3, [sp, #12]
 800661e:	2300      	movge	r3, #0
 8006620:	f8c8 3000 	strge.w	r3, [r8]
 8006624:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006628:	4ba3      	ldr	r3, [pc, #652]	; (80068b8 <_dtoa_r+0x300>)
 800662a:	bfbc      	itt	lt
 800662c:	2201      	movlt	r2, #1
 800662e:	f8c8 2000 	strlt.w	r2, [r8]
 8006632:	ea33 0309 	bics.w	r3, r3, r9
 8006636:	d11b      	bne.n	8006670 <_dtoa_r+0xb8>
 8006638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800663a:	f242 730f 	movw	r3, #9999	; 0x270f
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006644:	4333      	orrs	r3, r6
 8006646:	f000 857a 	beq.w	800713e <_dtoa_r+0xb86>
 800664a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800664c:	b963      	cbnz	r3, 8006668 <_dtoa_r+0xb0>
 800664e:	4b9b      	ldr	r3, [pc, #620]	; (80068bc <_dtoa_r+0x304>)
 8006650:	e024      	b.n	800669c <_dtoa_r+0xe4>
 8006652:	4b9b      	ldr	r3, [pc, #620]	; (80068c0 <_dtoa_r+0x308>)
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	9800      	ldr	r0, [sp, #0]
 800665e:	b015      	add	sp, #84	; 0x54
 8006660:	ecbd 8b02 	vpop	{d8}
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	4b94      	ldr	r3, [pc, #592]	; (80068bc <_dtoa_r+0x304>)
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	3303      	adds	r3, #3
 800666e:	e7f3      	b.n	8006658 <_dtoa_r+0xa0>
 8006670:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006674:	2200      	movs	r2, #0
 8006676:	ec51 0b17 	vmov	r0, r1, d7
 800667a:	2300      	movs	r3, #0
 800667c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006680:	f7fa fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006684:	4680      	mov	r8, r0
 8006686:	b158      	cbz	r0, 80066a0 <_dtoa_r+0xe8>
 8006688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800668a:	2301      	movs	r3, #1
 800668c:	6013      	str	r3, [r2, #0]
 800668e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 8551 	beq.w	8007138 <_dtoa_r+0xb80>
 8006696:	488b      	ldr	r0, [pc, #556]	; (80068c4 <_dtoa_r+0x30c>)
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	1e43      	subs	r3, r0, #1
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	e7dd      	b.n	800665c <_dtoa_r+0xa4>
 80066a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80066a4:	aa12      	add	r2, sp, #72	; 0x48
 80066a6:	a913      	add	r1, sp, #76	; 0x4c
 80066a8:	4620      	mov	r0, r4
 80066aa:	f001 fcf5 	bl	8008098 <__d2b>
 80066ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80066b2:	4683      	mov	fp, r0
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	d07c      	beq.n	80067b2 <_dtoa_r+0x1fa>
 80066b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80066be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80066c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80066ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80066ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066d2:	4b7d      	ldr	r3, [pc, #500]	; (80068c8 <_dtoa_r+0x310>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	4630      	mov	r0, r6
 80066d8:	4639      	mov	r1, r7
 80066da:	f7f9 fddd 	bl	8000298 <__aeabi_dsub>
 80066de:	a36e      	add	r3, pc, #440	; (adr r3, 8006898 <_dtoa_r+0x2e0>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f7f9 ff90 	bl	8000608 <__aeabi_dmul>
 80066e8:	a36d      	add	r3, pc, #436	; (adr r3, 80068a0 <_dtoa_r+0x2e8>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7f9 fdd5 	bl	800029c <__adddf3>
 80066f2:	4606      	mov	r6, r0
 80066f4:	4628      	mov	r0, r5
 80066f6:	460f      	mov	r7, r1
 80066f8:	f7f9 ff1c 	bl	8000534 <__aeabi_i2d>
 80066fc:	a36a      	add	r3, pc, #424	; (adr r3, 80068a8 <_dtoa_r+0x2f0>)
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	f7f9 ff81 	bl	8000608 <__aeabi_dmul>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4630      	mov	r0, r6
 800670c:	4639      	mov	r1, r7
 800670e:	f7f9 fdc5 	bl	800029c <__adddf3>
 8006712:	4606      	mov	r6, r0
 8006714:	460f      	mov	r7, r1
 8006716:	f7fa fa27 	bl	8000b68 <__aeabi_d2iz>
 800671a:	2200      	movs	r2, #0
 800671c:	4682      	mov	sl, r0
 800671e:	2300      	movs	r3, #0
 8006720:	4630      	mov	r0, r6
 8006722:	4639      	mov	r1, r7
 8006724:	f7fa f9e2 	bl	8000aec <__aeabi_dcmplt>
 8006728:	b148      	cbz	r0, 800673e <_dtoa_r+0x186>
 800672a:	4650      	mov	r0, sl
 800672c:	f7f9 ff02 	bl	8000534 <__aeabi_i2d>
 8006730:	4632      	mov	r2, r6
 8006732:	463b      	mov	r3, r7
 8006734:	f7fa f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006738:	b908      	cbnz	r0, 800673e <_dtoa_r+0x186>
 800673a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800673e:	f1ba 0f16 	cmp.w	sl, #22
 8006742:	d854      	bhi.n	80067ee <_dtoa_r+0x236>
 8006744:	4b61      	ldr	r3, [pc, #388]	; (80068cc <_dtoa_r+0x314>)
 8006746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006752:	f7fa f9cb 	bl	8000aec <__aeabi_dcmplt>
 8006756:	2800      	cmp	r0, #0
 8006758:	d04b      	beq.n	80067f2 <_dtoa_r+0x23a>
 800675a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800675e:	2300      	movs	r3, #0
 8006760:	930e      	str	r3, [sp, #56]	; 0x38
 8006762:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006764:	1b5d      	subs	r5, r3, r5
 8006766:	1e6b      	subs	r3, r5, #1
 8006768:	9304      	str	r3, [sp, #16]
 800676a:	bf43      	ittte	mi
 800676c:	2300      	movmi	r3, #0
 800676e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006772:	9304      	strmi	r3, [sp, #16]
 8006774:	f04f 0800 	movpl.w	r8, #0
 8006778:	f1ba 0f00 	cmp.w	sl, #0
 800677c:	db3b      	blt.n	80067f6 <_dtoa_r+0x23e>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006784:	4453      	add	r3, sl
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	2300      	movs	r3, #0
 800678a:	9306      	str	r3, [sp, #24]
 800678c:	9b05      	ldr	r3, [sp, #20]
 800678e:	2b09      	cmp	r3, #9
 8006790:	d869      	bhi.n	8006866 <_dtoa_r+0x2ae>
 8006792:	2b05      	cmp	r3, #5
 8006794:	bfc4      	itt	gt
 8006796:	3b04      	subgt	r3, #4
 8006798:	9305      	strgt	r3, [sp, #20]
 800679a:	9b05      	ldr	r3, [sp, #20]
 800679c:	f1a3 0302 	sub.w	r3, r3, #2
 80067a0:	bfcc      	ite	gt
 80067a2:	2500      	movgt	r5, #0
 80067a4:	2501      	movle	r5, #1
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d869      	bhi.n	800687e <_dtoa_r+0x2c6>
 80067aa:	e8df f003 	tbb	[pc, r3]
 80067ae:	4e2c      	.short	0x4e2c
 80067b0:	5a4c      	.short	0x5a4c
 80067b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067b6:	441d      	add	r5, r3
 80067b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80067bc:	2b20      	cmp	r3, #32
 80067be:	bfc1      	itttt	gt
 80067c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80067cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067d0:	bfda      	itte	le
 80067d2:	f1c3 0320 	rsble	r3, r3, #32
 80067d6:	fa06 f003 	lslle.w	r0, r6, r3
 80067da:	4318      	orrgt	r0, r3
 80067dc:	f7f9 fe9a 	bl	8000514 <__aeabi_ui2d>
 80067e0:	2301      	movs	r3, #1
 80067e2:	4606      	mov	r6, r0
 80067e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067e8:	3d01      	subs	r5, #1
 80067ea:	9310      	str	r3, [sp, #64]	; 0x40
 80067ec:	e771      	b.n	80066d2 <_dtoa_r+0x11a>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e7b6      	b.n	8006760 <_dtoa_r+0x1a8>
 80067f2:	900e      	str	r0, [sp, #56]	; 0x38
 80067f4:	e7b5      	b.n	8006762 <_dtoa_r+0x1aa>
 80067f6:	f1ca 0300 	rsb	r3, sl, #0
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	2300      	movs	r3, #0
 80067fe:	eba8 080a 	sub.w	r8, r8, sl
 8006802:	930d      	str	r3, [sp, #52]	; 0x34
 8006804:	e7c2      	b.n	800678c <_dtoa_r+0x1d4>
 8006806:	2300      	movs	r3, #0
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc39      	bgt.n	8006884 <_dtoa_r+0x2cc>
 8006810:	f04f 0901 	mov.w	r9, #1
 8006814:	f8cd 9004 	str.w	r9, [sp, #4]
 8006818:	464b      	mov	r3, r9
 800681a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800681e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006820:	2200      	movs	r2, #0
 8006822:	6042      	str	r2, [r0, #4]
 8006824:	2204      	movs	r2, #4
 8006826:	f102 0614 	add.w	r6, r2, #20
 800682a:	429e      	cmp	r6, r3
 800682c:	6841      	ldr	r1, [r0, #4]
 800682e:	d92f      	bls.n	8006890 <_dtoa_r+0x2d8>
 8006830:	4620      	mov	r0, r4
 8006832:	f001 f849 	bl	80078c8 <_Balloc>
 8006836:	9000      	str	r0, [sp, #0]
 8006838:	2800      	cmp	r0, #0
 800683a:	d14b      	bne.n	80068d4 <_dtoa_r+0x31c>
 800683c:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <_dtoa_r+0x318>)
 800683e:	4602      	mov	r2, r0
 8006840:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006844:	e6d1      	b.n	80065ea <_dtoa_r+0x32>
 8006846:	2301      	movs	r3, #1
 8006848:	e7de      	b.n	8006808 <_dtoa_r+0x250>
 800684a:	2300      	movs	r3, #0
 800684c:	9308      	str	r3, [sp, #32]
 800684e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006850:	eb0a 0903 	add.w	r9, sl, r3
 8006854:	f109 0301 	add.w	r3, r9, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	bfb8      	it	lt
 800685e:	2301      	movlt	r3, #1
 8006860:	e7dd      	b.n	800681e <_dtoa_r+0x266>
 8006862:	2301      	movs	r3, #1
 8006864:	e7f2      	b.n	800684c <_dtoa_r+0x294>
 8006866:	2501      	movs	r5, #1
 8006868:	2300      	movs	r3, #0
 800686a:	9305      	str	r3, [sp, #20]
 800686c:	9508      	str	r5, [sp, #32]
 800686e:	f04f 39ff 	mov.w	r9, #4294967295
 8006872:	2200      	movs	r2, #0
 8006874:	f8cd 9004 	str.w	r9, [sp, #4]
 8006878:	2312      	movs	r3, #18
 800687a:	9209      	str	r2, [sp, #36]	; 0x24
 800687c:	e7cf      	b.n	800681e <_dtoa_r+0x266>
 800687e:	2301      	movs	r3, #1
 8006880:	9308      	str	r3, [sp, #32]
 8006882:	e7f4      	b.n	800686e <_dtoa_r+0x2b6>
 8006884:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006888:	f8cd 9004 	str.w	r9, [sp, #4]
 800688c:	464b      	mov	r3, r9
 800688e:	e7c6      	b.n	800681e <_dtoa_r+0x266>
 8006890:	3101      	adds	r1, #1
 8006892:	6041      	str	r1, [r0, #4]
 8006894:	0052      	lsls	r2, r2, #1
 8006896:	e7c6      	b.n	8006826 <_dtoa_r+0x26e>
 8006898:	636f4361 	.word	0x636f4361
 800689c:	3fd287a7 	.word	0x3fd287a7
 80068a0:	8b60c8b3 	.word	0x8b60c8b3
 80068a4:	3fc68a28 	.word	0x3fc68a28
 80068a8:	509f79fb 	.word	0x509f79fb
 80068ac:	3fd34413 	.word	0x3fd34413
 80068b0:	08009416 	.word	0x08009416
 80068b4:	0800942d 	.word	0x0800942d
 80068b8:	7ff00000 	.word	0x7ff00000
 80068bc:	08009412 	.word	0x08009412
 80068c0:	08009409 	.word	0x08009409
 80068c4:	0800928d 	.word	0x0800928d
 80068c8:	3ff80000 	.word	0x3ff80000
 80068cc:	080095a8 	.word	0x080095a8
 80068d0:	0800948c 	.word	0x0800948c
 80068d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068d6:	9a00      	ldr	r2, [sp, #0]
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	2b0e      	cmp	r3, #14
 80068de:	f200 80ad 	bhi.w	8006a3c <_dtoa_r+0x484>
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	f000 80aa 	beq.w	8006a3c <_dtoa_r+0x484>
 80068e8:	f1ba 0f00 	cmp.w	sl, #0
 80068ec:	dd36      	ble.n	800695c <_dtoa_r+0x3a4>
 80068ee:	4ac3      	ldr	r2, [pc, #780]	; (8006bfc <_dtoa_r+0x644>)
 80068f0:	f00a 030f 	and.w	r3, sl, #15
 80068f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068f8:	ed93 7b00 	vldr	d7, [r3]
 80068fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006900:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006904:	eeb0 8a47 	vmov.f32	s16, s14
 8006908:	eef0 8a67 	vmov.f32	s17, s15
 800690c:	d016      	beq.n	800693c <_dtoa_r+0x384>
 800690e:	4bbc      	ldr	r3, [pc, #752]	; (8006c00 <_dtoa_r+0x648>)
 8006910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006918:	f7f9 ffa0 	bl	800085c <__aeabi_ddiv>
 800691c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006920:	f007 070f 	and.w	r7, r7, #15
 8006924:	2503      	movs	r5, #3
 8006926:	4eb6      	ldr	r6, [pc, #728]	; (8006c00 <_dtoa_r+0x648>)
 8006928:	b957      	cbnz	r7, 8006940 <_dtoa_r+0x388>
 800692a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692e:	ec53 2b18 	vmov	r2, r3, d8
 8006932:	f7f9 ff93 	bl	800085c <__aeabi_ddiv>
 8006936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693a:	e029      	b.n	8006990 <_dtoa_r+0x3d8>
 800693c:	2502      	movs	r5, #2
 800693e:	e7f2      	b.n	8006926 <_dtoa_r+0x36e>
 8006940:	07f9      	lsls	r1, r7, #31
 8006942:	d508      	bpl.n	8006956 <_dtoa_r+0x39e>
 8006944:	ec51 0b18 	vmov	r0, r1, d8
 8006948:	e9d6 2300 	ldrd	r2, r3, [r6]
 800694c:	f7f9 fe5c 	bl	8000608 <__aeabi_dmul>
 8006950:	ec41 0b18 	vmov	d8, r0, r1
 8006954:	3501      	adds	r5, #1
 8006956:	107f      	asrs	r7, r7, #1
 8006958:	3608      	adds	r6, #8
 800695a:	e7e5      	b.n	8006928 <_dtoa_r+0x370>
 800695c:	f000 80a6 	beq.w	8006aac <_dtoa_r+0x4f4>
 8006960:	f1ca 0600 	rsb	r6, sl, #0
 8006964:	4ba5      	ldr	r3, [pc, #660]	; (8006bfc <_dtoa_r+0x644>)
 8006966:	4fa6      	ldr	r7, [pc, #664]	; (8006c00 <_dtoa_r+0x648>)
 8006968:	f006 020f 	and.w	r2, r6, #15
 800696c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006978:	f7f9 fe46 	bl	8000608 <__aeabi_dmul>
 800697c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006980:	1136      	asrs	r6, r6, #4
 8006982:	2300      	movs	r3, #0
 8006984:	2502      	movs	r5, #2
 8006986:	2e00      	cmp	r6, #0
 8006988:	f040 8085 	bne.w	8006a96 <_dtoa_r+0x4de>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1d2      	bne.n	8006936 <_dtoa_r+0x37e>
 8006990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 808c 	beq.w	8006ab0 <_dtoa_r+0x4f8>
 8006998:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800699c:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <_dtoa_r+0x64c>)
 800699e:	2200      	movs	r2, #0
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7fa f8a2 	bl	8000aec <__aeabi_dcmplt>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f000 8081 	beq.w	8006ab0 <_dtoa_r+0x4f8>
 80069ae:	9b01      	ldr	r3, [sp, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d07d      	beq.n	8006ab0 <_dtoa_r+0x4f8>
 80069b4:	f1b9 0f00 	cmp.w	r9, #0
 80069b8:	dd3c      	ble.n	8006a34 <_dtoa_r+0x47c>
 80069ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	2200      	movs	r2, #0
 80069c2:	4b91      	ldr	r3, [pc, #580]	; (8006c08 <_dtoa_r+0x650>)
 80069c4:	4630      	mov	r0, r6
 80069c6:	4639      	mov	r1, r7
 80069c8:	f7f9 fe1e 	bl	8000608 <__aeabi_dmul>
 80069cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069d0:	3501      	adds	r5, #1
 80069d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80069d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069da:	4628      	mov	r0, r5
 80069dc:	f7f9 fdaa 	bl	8000534 <__aeabi_i2d>
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	f7f9 fe10 	bl	8000608 <__aeabi_dmul>
 80069e8:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <_dtoa_r+0x654>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	f7f9 fc56 	bl	800029c <__adddf3>
 80069f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80069f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f8:	9303      	str	r3, [sp, #12]
 80069fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d15c      	bne.n	8006aba <_dtoa_r+0x502>
 8006a00:	4b83      	ldr	r3, [pc, #524]	; (8006c10 <_dtoa_r+0x658>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	4630      	mov	r0, r6
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7f9 fc46 	bl	8000298 <__aeabi_dsub>
 8006a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a10:	4606      	mov	r6, r0
 8006a12:	460f      	mov	r7, r1
 8006a14:	f7fa f888 	bl	8000b28 <__aeabi_dcmpgt>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f040 8296 	bne.w	8006f4a <_dtoa_r+0x992>
 8006a1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a22:	4630      	mov	r0, r6
 8006a24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a28:	4639      	mov	r1, r7
 8006a2a:	f7fa f85f 	bl	8000aec <__aeabi_dcmplt>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	f040 8288 	bne.w	8006f44 <_dtoa_r+0x98c>
 8006a34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f2c0 8158 	blt.w	8006cf4 <_dtoa_r+0x73c>
 8006a44:	f1ba 0f0e 	cmp.w	sl, #14
 8006a48:	f300 8154 	bgt.w	8006cf4 <_dtoa_r+0x73c>
 8006a4c:	4b6b      	ldr	r3, [pc, #428]	; (8006bfc <_dtoa_r+0x644>)
 8006a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f280 80e3 	bge.w	8006c24 <_dtoa_r+0x66c>
 8006a5e:	9b01      	ldr	r3, [sp, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f300 80df 	bgt.w	8006c24 <_dtoa_r+0x66c>
 8006a66:	f040 826d 	bne.w	8006f44 <_dtoa_r+0x98c>
 8006a6a:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <_dtoa_r+0x658>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4640      	mov	r0, r8
 8006a70:	4649      	mov	r1, r9
 8006a72:	f7f9 fdc9 	bl	8000608 <__aeabi_dmul>
 8006a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a7a:	f7fa f84b 	bl	8000b14 <__aeabi_dcmpge>
 8006a7e:	9e01      	ldr	r6, [sp, #4]
 8006a80:	4637      	mov	r7, r6
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 8243 	bne.w	8006f0e <_dtoa_r+0x956>
 8006a88:	9d00      	ldr	r5, [sp, #0]
 8006a8a:	2331      	movs	r3, #49	; 0x31
 8006a8c:	f805 3b01 	strb.w	r3, [r5], #1
 8006a90:	f10a 0a01 	add.w	sl, sl, #1
 8006a94:	e23f      	b.n	8006f16 <_dtoa_r+0x95e>
 8006a96:	07f2      	lsls	r2, r6, #31
 8006a98:	d505      	bpl.n	8006aa6 <_dtoa_r+0x4ee>
 8006a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9e:	f7f9 fdb3 	bl	8000608 <__aeabi_dmul>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	1076      	asrs	r6, r6, #1
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	e76c      	b.n	8006986 <_dtoa_r+0x3ce>
 8006aac:	2502      	movs	r5, #2
 8006aae:	e76f      	b.n	8006990 <_dtoa_r+0x3d8>
 8006ab0:	9b01      	ldr	r3, [sp, #4]
 8006ab2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ab6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ab8:	e78d      	b.n	80069d6 <_dtoa_r+0x41e>
 8006aba:	9900      	ldr	r1, [sp, #0]
 8006abc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ac0:	4b4e      	ldr	r3, [pc, #312]	; (8006bfc <_dtoa_r+0x644>)
 8006ac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	9102      	str	r1, [sp, #8]
 8006aca:	9908      	ldr	r1, [sp, #32]
 8006acc:	eeb0 8a47 	vmov.f32	s16, s14
 8006ad0:	eef0 8a67 	vmov.f32	s17, s15
 8006ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ad8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d045      	beq.n	8006b6c <_dtoa_r+0x5b4>
 8006ae0:	494c      	ldr	r1, [pc, #304]	; (8006c14 <_dtoa_r+0x65c>)
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	f7f9 feba 	bl	800085c <__aeabi_ddiv>
 8006ae8:	ec53 2b18 	vmov	r2, r3, d8
 8006aec:	f7f9 fbd4 	bl	8000298 <__aeabi_dsub>
 8006af0:	9d00      	ldr	r5, [sp, #0]
 8006af2:	ec41 0b18 	vmov	d8, r0, r1
 8006af6:	4639      	mov	r1, r7
 8006af8:	4630      	mov	r0, r6
 8006afa:	f7fa f835 	bl	8000b68 <__aeabi_d2iz>
 8006afe:	900c      	str	r0, [sp, #48]	; 0x30
 8006b00:	f7f9 fd18 	bl	8000534 <__aeabi_i2d>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7f9 fbc4 	bl	8000298 <__aeabi_dsub>
 8006b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b12:	3330      	adds	r3, #48	; 0x30
 8006b14:	f805 3b01 	strb.w	r3, [r5], #1
 8006b18:	ec53 2b18 	vmov	r2, r3, d8
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	460f      	mov	r7, r1
 8006b20:	f7f9 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d165      	bne.n	8006bf4 <_dtoa_r+0x63c>
 8006b28:	4632      	mov	r2, r6
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	4935      	ldr	r1, [pc, #212]	; (8006c04 <_dtoa_r+0x64c>)
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f7f9 fbb2 	bl	8000298 <__aeabi_dsub>
 8006b34:	ec53 2b18 	vmov	r2, r3, d8
 8006b38:	f7f9 ffd8 	bl	8000aec <__aeabi_dcmplt>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	f040 80b9 	bne.w	8006cb4 <_dtoa_r+0x6fc>
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	429d      	cmp	r5, r3
 8006b46:	f43f af75 	beq.w	8006a34 <_dtoa_r+0x47c>
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <_dtoa_r+0x650>)
 8006b4c:	ec51 0b18 	vmov	r0, r1, d8
 8006b50:	2200      	movs	r2, #0
 8006b52:	f7f9 fd59 	bl	8000608 <__aeabi_dmul>
 8006b56:	4b2c      	ldr	r3, [pc, #176]	; (8006c08 <_dtoa_r+0x650>)
 8006b58:	ec41 0b18 	vmov	d8, r0, r1
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4630      	mov	r0, r6
 8006b60:	4639      	mov	r1, r7
 8006b62:	f7f9 fd51 	bl	8000608 <__aeabi_dmul>
 8006b66:	4606      	mov	r6, r0
 8006b68:	460f      	mov	r7, r1
 8006b6a:	e7c4      	b.n	8006af6 <_dtoa_r+0x53e>
 8006b6c:	ec51 0b17 	vmov	r0, r1, d7
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	9d00      	ldr	r5, [sp, #0]
 8006b78:	930c      	str	r3, [sp, #48]	; 0x30
 8006b7a:	ec41 0b18 	vmov	d8, r0, r1
 8006b7e:	4639      	mov	r1, r7
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7f9 fff1 	bl	8000b68 <__aeabi_d2iz>
 8006b86:	9011      	str	r0, [sp, #68]	; 0x44
 8006b88:	f7f9 fcd4 	bl	8000534 <__aeabi_i2d>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4630      	mov	r0, r6
 8006b92:	4639      	mov	r1, r7
 8006b94:	f7f9 fb80 	bl	8000298 <__aeabi_dsub>
 8006b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b9a:	3330      	adds	r3, #48	; 0x30
 8006b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8006ba0:	9b02      	ldr	r3, [sp, #8]
 8006ba2:	429d      	cmp	r5, r3
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	d134      	bne.n	8006c18 <_dtoa_r+0x660>
 8006bae:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <_dtoa_r+0x65c>)
 8006bb0:	ec51 0b18 	vmov	r0, r1, d8
 8006bb4:	f7f9 fb72 	bl	800029c <__adddf3>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	f7f9 ffb2 	bl	8000b28 <__aeabi_dcmpgt>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d175      	bne.n	8006cb4 <_dtoa_r+0x6fc>
 8006bc8:	ec53 2b18 	vmov	r2, r3, d8
 8006bcc:	4911      	ldr	r1, [pc, #68]	; (8006c14 <_dtoa_r+0x65c>)
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f7f9 fb62 	bl	8000298 <__aeabi_dsub>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f7f9 ff86 	bl	8000aec <__aeabi_dcmplt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f43f af27 	beq.w	8006a34 <_dtoa_r+0x47c>
 8006be6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006be8:	1e6b      	subs	r3, r5, #1
 8006bea:	930c      	str	r3, [sp, #48]	; 0x30
 8006bec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d0f8      	beq.n	8006be6 <_dtoa_r+0x62e>
 8006bf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006bf8:	e04a      	b.n	8006c90 <_dtoa_r+0x6d8>
 8006bfa:	bf00      	nop
 8006bfc:	080095a8 	.word	0x080095a8
 8006c00:	08009580 	.word	0x08009580
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	40240000 	.word	0x40240000
 8006c0c:	401c0000 	.word	0x401c0000
 8006c10:	40140000 	.word	0x40140000
 8006c14:	3fe00000 	.word	0x3fe00000
 8006c18:	4baf      	ldr	r3, [pc, #700]	; (8006ed8 <_dtoa_r+0x920>)
 8006c1a:	f7f9 fcf5 	bl	8000608 <__aeabi_dmul>
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	e7ac      	b.n	8006b7e <_dtoa_r+0x5c6>
 8006c24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c28:	9d00      	ldr	r5, [sp, #0]
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	4630      	mov	r0, r6
 8006c30:	4639      	mov	r1, r7
 8006c32:	f7f9 fe13 	bl	800085c <__aeabi_ddiv>
 8006c36:	f7f9 ff97 	bl	8000b68 <__aeabi_d2iz>
 8006c3a:	9002      	str	r0, [sp, #8]
 8006c3c:	f7f9 fc7a 	bl	8000534 <__aeabi_i2d>
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	f7f9 fce0 	bl	8000608 <__aeabi_dmul>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 fb22 	bl	8000298 <__aeabi_dsub>
 8006c54:	9e02      	ldr	r6, [sp, #8]
 8006c56:	9f01      	ldr	r7, [sp, #4]
 8006c58:	3630      	adds	r6, #48	; 0x30
 8006c5a:	f805 6b01 	strb.w	r6, [r5], #1
 8006c5e:	9e00      	ldr	r6, [sp, #0]
 8006c60:	1bae      	subs	r6, r5, r6
 8006c62:	42b7      	cmp	r7, r6
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	d137      	bne.n	8006cda <_dtoa_r+0x722>
 8006c6a:	f7f9 fb17 	bl	800029c <__adddf3>
 8006c6e:	4642      	mov	r2, r8
 8006c70:	464b      	mov	r3, r9
 8006c72:	4606      	mov	r6, r0
 8006c74:	460f      	mov	r7, r1
 8006c76:	f7f9 ff57 	bl	8000b28 <__aeabi_dcmpgt>
 8006c7a:	b9c8      	cbnz	r0, 8006cb0 <_dtoa_r+0x6f8>
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f7f9 ff28 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c88:	b110      	cbz	r0, 8006c90 <_dtoa_r+0x6d8>
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	07d9      	lsls	r1, r3, #31
 8006c8e:	d40f      	bmi.n	8006cb0 <_dtoa_r+0x6f8>
 8006c90:	4620      	mov	r0, r4
 8006c92:	4659      	mov	r1, fp
 8006c94:	f000 fe58 	bl	8007948 <_Bfree>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	702b      	strb	r3, [r5, #0]
 8006c9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c9e:	f10a 0001 	add.w	r0, sl, #1
 8006ca2:	6018      	str	r0, [r3, #0]
 8006ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f43f acd8 	beq.w	800665c <_dtoa_r+0xa4>
 8006cac:	601d      	str	r5, [r3, #0]
 8006cae:	e4d5      	b.n	800665c <_dtoa_r+0xa4>
 8006cb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cbc:	2a39      	cmp	r2, #57	; 0x39
 8006cbe:	d108      	bne.n	8006cd2 <_dtoa_r+0x71a>
 8006cc0:	9a00      	ldr	r2, [sp, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d1f7      	bne.n	8006cb6 <_dtoa_r+0x6fe>
 8006cc6:	9a07      	ldr	r2, [sp, #28]
 8006cc8:	9900      	ldr	r1, [sp, #0]
 8006cca:	3201      	adds	r2, #1
 8006ccc:	9207      	str	r2, [sp, #28]
 8006cce:	2230      	movs	r2, #48	; 0x30
 8006cd0:	700a      	strb	r2, [r1, #0]
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e78c      	b.n	8006bf4 <_dtoa_r+0x63c>
 8006cda:	4b7f      	ldr	r3, [pc, #508]	; (8006ed8 <_dtoa_r+0x920>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f7f9 fc93 	bl	8000608 <__aeabi_dmul>
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f7f9 fef5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d09b      	beq.n	8006c2a <_dtoa_r+0x672>
 8006cf2:	e7cd      	b.n	8006c90 <_dtoa_r+0x6d8>
 8006cf4:	9a08      	ldr	r2, [sp, #32]
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	f000 80c4 	beq.w	8006e84 <_dtoa_r+0x8cc>
 8006cfc:	9a05      	ldr	r2, [sp, #20]
 8006cfe:	2a01      	cmp	r2, #1
 8006d00:	f300 80a8 	bgt.w	8006e54 <_dtoa_r+0x89c>
 8006d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	f000 80a0 	beq.w	8006e4c <_dtoa_r+0x894>
 8006d0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d10:	9e06      	ldr	r6, [sp, #24]
 8006d12:	4645      	mov	r5, r8
 8006d14:	9a04      	ldr	r2, [sp, #16]
 8006d16:	2101      	movs	r1, #1
 8006d18:	441a      	add	r2, r3
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4498      	add	r8, r3
 8006d1e:	9204      	str	r2, [sp, #16]
 8006d20:	f000 ff18 	bl	8007b54 <__i2b>
 8006d24:	4607      	mov	r7, r0
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	dd0b      	ble.n	8006d42 <_dtoa_r+0x78a>
 8006d2a:	9b04      	ldr	r3, [sp, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dd08      	ble.n	8006d42 <_dtoa_r+0x78a>
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	9a04      	ldr	r2, [sp, #16]
 8006d34:	bfa8      	it	ge
 8006d36:	462b      	movge	r3, r5
 8006d38:	eba8 0803 	sub.w	r8, r8, r3
 8006d3c:	1aed      	subs	r5, r5, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	9b06      	ldr	r3, [sp, #24]
 8006d44:	b1fb      	cbz	r3, 8006d86 <_dtoa_r+0x7ce>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 809f 	beq.w	8006e8c <_dtoa_r+0x8d4>
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	dd11      	ble.n	8006d76 <_dtoa_r+0x7be>
 8006d52:	4639      	mov	r1, r7
 8006d54:	4632      	mov	r2, r6
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 ffb8 	bl	8007ccc <__pow5mult>
 8006d5c:	465a      	mov	r2, fp
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4607      	mov	r7, r0
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 ff0c 	bl	8007b80 <__multiply>
 8006d68:	4659      	mov	r1, fp
 8006d6a:	9007      	str	r0, [sp, #28]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fdeb 	bl	8007948 <_Bfree>
 8006d72:	9b07      	ldr	r3, [sp, #28]
 8006d74:	469b      	mov	fp, r3
 8006d76:	9b06      	ldr	r3, [sp, #24]
 8006d78:	1b9a      	subs	r2, r3, r6
 8006d7a:	d004      	beq.n	8006d86 <_dtoa_r+0x7ce>
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 ffa4 	bl	8007ccc <__pow5mult>
 8006d84:	4683      	mov	fp, r0
 8006d86:	2101      	movs	r1, #1
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fee3 	bl	8007b54 <__i2b>
 8006d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	4606      	mov	r6, r0
 8006d94:	dd7c      	ble.n	8006e90 <_dtoa_r+0x8d8>
 8006d96:	461a      	mov	r2, r3
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 ff96 	bl	8007ccc <__pow5mult>
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	4606      	mov	r6, r0
 8006da6:	dd76      	ble.n	8006e96 <_dtoa_r+0x8de>
 8006da8:	2300      	movs	r3, #0
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	6933      	ldr	r3, [r6, #16]
 8006dae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006db2:	6918      	ldr	r0, [r3, #16]
 8006db4:	f000 fe7e 	bl	8007ab4 <__hi0bits>
 8006db8:	f1c0 0020 	rsb	r0, r0, #32
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	4418      	add	r0, r3
 8006dc0:	f010 001f 	ands.w	r0, r0, #31
 8006dc4:	f000 8086 	beq.w	8006ed4 <_dtoa_r+0x91c>
 8006dc8:	f1c0 0320 	rsb	r3, r0, #32
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	dd7f      	ble.n	8006ed0 <_dtoa_r+0x918>
 8006dd0:	f1c0 001c 	rsb	r0, r0, #28
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	4403      	add	r3, r0
 8006dd8:	4480      	add	r8, r0
 8006dda:	4405      	add	r5, r0
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	f1b8 0f00 	cmp.w	r8, #0
 8006de2:	dd05      	ble.n	8006df0 <_dtoa_r+0x838>
 8006de4:	4659      	mov	r1, fp
 8006de6:	4642      	mov	r2, r8
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 ffc9 	bl	8007d80 <__lshift>
 8006dee:	4683      	mov	fp, r0
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dd05      	ble.n	8006e02 <_dtoa_r+0x84a>
 8006df6:	4631      	mov	r1, r6
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 ffc0 	bl	8007d80 <__lshift>
 8006e00:	4606      	mov	r6, r0
 8006e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d069      	beq.n	8006edc <_dtoa_r+0x924>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f001 f824 	bl	8007e58 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	da63      	bge.n	8006edc <_dtoa_r+0x924>
 8006e14:	2300      	movs	r3, #0
 8006e16:	4659      	mov	r1, fp
 8006e18:	220a      	movs	r2, #10
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fdb6 	bl	800798c <__multadd>
 8006e20:	9b08      	ldr	r3, [sp, #32]
 8006e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e26:	4683      	mov	fp, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 818f 	beq.w	800714c <_dtoa_r+0xb94>
 8006e2e:	4639      	mov	r1, r7
 8006e30:	2300      	movs	r3, #0
 8006e32:	220a      	movs	r2, #10
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 fda9 	bl	800798c <__multadd>
 8006e3a:	f1b9 0f00 	cmp.w	r9, #0
 8006e3e:	4607      	mov	r7, r0
 8006e40:	f300 808e 	bgt.w	8006f60 <_dtoa_r+0x9a8>
 8006e44:	9b05      	ldr	r3, [sp, #20]
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	dc50      	bgt.n	8006eec <_dtoa_r+0x934>
 8006e4a:	e089      	b.n	8006f60 <_dtoa_r+0x9a8>
 8006e4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e52:	e75d      	b.n	8006d10 <_dtoa_r+0x758>
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	1e5e      	subs	r6, r3, #1
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	42b3      	cmp	r3, r6
 8006e5c:	bfbf      	itttt	lt
 8006e5e:	9b06      	ldrlt	r3, [sp, #24]
 8006e60:	9606      	strlt	r6, [sp, #24]
 8006e62:	1af2      	sublt	r2, r6, r3
 8006e64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006e66:	bfb6      	itet	lt
 8006e68:	189b      	addlt	r3, r3, r2
 8006e6a:	1b9e      	subge	r6, r3, r6
 8006e6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006e6e:	9b01      	ldr	r3, [sp, #4]
 8006e70:	bfb8      	it	lt
 8006e72:	2600      	movlt	r6, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bfb5      	itete	lt
 8006e78:	eba8 0503 	sublt.w	r5, r8, r3
 8006e7c:	9b01      	ldrge	r3, [sp, #4]
 8006e7e:	2300      	movlt	r3, #0
 8006e80:	4645      	movge	r5, r8
 8006e82:	e747      	b.n	8006d14 <_dtoa_r+0x75c>
 8006e84:	9e06      	ldr	r6, [sp, #24]
 8006e86:	9f08      	ldr	r7, [sp, #32]
 8006e88:	4645      	mov	r5, r8
 8006e8a:	e74c      	b.n	8006d26 <_dtoa_r+0x76e>
 8006e8c:	9a06      	ldr	r2, [sp, #24]
 8006e8e:	e775      	b.n	8006d7c <_dtoa_r+0x7c4>
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	dc18      	bgt.n	8006ec8 <_dtoa_r+0x910>
 8006e96:	9b02      	ldr	r3, [sp, #8]
 8006e98:	b9b3      	cbnz	r3, 8006ec8 <_dtoa_r+0x910>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ea0:	b9a3      	cbnz	r3, 8006ecc <_dtoa_r+0x914>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea8:	0d1b      	lsrs	r3, r3, #20
 8006eaa:	051b      	lsls	r3, r3, #20
 8006eac:	b12b      	cbz	r3, 8006eba <_dtoa_r+0x902>
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	f108 0801 	add.w	r8, r8, #1
 8006eb8:	2301      	movs	r3, #1
 8006eba:	9306      	str	r3, [sp, #24]
 8006ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f af74 	bne.w	8006dac <_dtoa_r+0x7f4>
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	e779      	b.n	8006dbc <_dtoa_r+0x804>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e7f6      	b.n	8006eba <_dtoa_r+0x902>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	e7f4      	b.n	8006eba <_dtoa_r+0x902>
 8006ed0:	d085      	beq.n	8006dde <_dtoa_r+0x826>
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	301c      	adds	r0, #28
 8006ed6:	e77d      	b.n	8006dd4 <_dtoa_r+0x81c>
 8006ed8:	40240000 	.word	0x40240000
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dc38      	bgt.n	8006f54 <_dtoa_r+0x99c>
 8006ee2:	9b05      	ldr	r3, [sp, #20]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	dd35      	ble.n	8006f54 <_dtoa_r+0x99c>
 8006ee8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006eec:	f1b9 0f00 	cmp.w	r9, #0
 8006ef0:	d10d      	bne.n	8006f0e <_dtoa_r+0x956>
 8006ef2:	4631      	mov	r1, r6
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	2205      	movs	r2, #5
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 fd47 	bl	800798c <__multadd>
 8006efe:	4601      	mov	r1, r0
 8006f00:	4606      	mov	r6, r0
 8006f02:	4658      	mov	r0, fp
 8006f04:	f000 ffa8 	bl	8007e58 <__mcmp>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f73f adbd 	bgt.w	8006a88 <_dtoa_r+0x4d0>
 8006f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f10:	9d00      	ldr	r5, [sp, #0]
 8006f12:	ea6f 0a03 	mvn.w	sl, r3
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 fd13 	bl	8007948 <_Bfree>
 8006f22:	2f00      	cmp	r7, #0
 8006f24:	f43f aeb4 	beq.w	8006c90 <_dtoa_r+0x6d8>
 8006f28:	f1b8 0f00 	cmp.w	r8, #0
 8006f2c:	d005      	beq.n	8006f3a <_dtoa_r+0x982>
 8006f2e:	45b8      	cmp	r8, r7
 8006f30:	d003      	beq.n	8006f3a <_dtoa_r+0x982>
 8006f32:	4641      	mov	r1, r8
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fd07 	bl	8007948 <_Bfree>
 8006f3a:	4639      	mov	r1, r7
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fd03 	bl	8007948 <_Bfree>
 8006f42:	e6a5      	b.n	8006c90 <_dtoa_r+0x6d8>
 8006f44:	2600      	movs	r6, #0
 8006f46:	4637      	mov	r7, r6
 8006f48:	e7e1      	b.n	8006f0e <_dtoa_r+0x956>
 8006f4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006f4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f50:	4637      	mov	r7, r6
 8006f52:	e599      	b.n	8006a88 <_dtoa_r+0x4d0>
 8006f54:	9b08      	ldr	r3, [sp, #32]
 8006f56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80fd 	beq.w	800715a <_dtoa_r+0xba2>
 8006f60:	2d00      	cmp	r5, #0
 8006f62:	dd05      	ble.n	8006f70 <_dtoa_r+0x9b8>
 8006f64:	4639      	mov	r1, r7
 8006f66:	462a      	mov	r2, r5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 ff09 	bl	8007d80 <__lshift>
 8006f6e:	4607      	mov	r7, r0
 8006f70:	9b06      	ldr	r3, [sp, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d05c      	beq.n	8007030 <_dtoa_r+0xa78>
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fca5 	bl	80078c8 <_Balloc>
 8006f7e:	4605      	mov	r5, r0
 8006f80:	b928      	cbnz	r0, 8006f8e <_dtoa_r+0x9d6>
 8006f82:	4b80      	ldr	r3, [pc, #512]	; (8007184 <_dtoa_r+0xbcc>)
 8006f84:	4602      	mov	r2, r0
 8006f86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f8a:	f7ff bb2e 	b.w	80065ea <_dtoa_r+0x32>
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	3202      	adds	r2, #2
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	f107 010c 	add.w	r1, r7, #12
 8006f98:	300c      	adds	r0, #12
 8006f9a:	f000 fc87 	bl	80078ac <memcpy>
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 feec 	bl	8007d80 <__lshift>
 8006fa8:	9b00      	ldr	r3, [sp, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	444b      	add	r3, r9
 8006fb2:	9307      	str	r3, [sp, #28]
 8006fb4:	9b02      	ldr	r3, [sp, #8]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	46b8      	mov	r8, r7
 8006fbc:	9306      	str	r3, [sp, #24]
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	9b01      	ldr	r3, [sp, #4]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	4658      	mov	r0, fp
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	f7ff fa67 	bl	800649c <quorem>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	3330      	adds	r3, #48	; 0x30
 8006fd2:	9004      	str	r0, [sp, #16]
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	4658      	mov	r0, fp
 8006fd8:	9308      	str	r3, [sp, #32]
 8006fda:	f000 ff3d 	bl	8007e58 <__mcmp>
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4681      	mov	r9, r0
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 ff53 	bl	8007e90 <__mdiff>
 8006fea:	68c2      	ldr	r2, [r0, #12]
 8006fec:	9b08      	ldr	r3, [sp, #32]
 8006fee:	4605      	mov	r5, r0
 8006ff0:	bb02      	cbnz	r2, 8007034 <_dtoa_r+0xa7c>
 8006ff2:	4601      	mov	r1, r0
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	f000 ff2f 	bl	8007e58 <__mcmp>
 8006ffa:	9b08      	ldr	r3, [sp, #32]
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4629      	mov	r1, r5
 8007000:	4620      	mov	r0, r4
 8007002:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007006:	f000 fc9f 	bl	8007948 <_Bfree>
 800700a:	9b05      	ldr	r3, [sp, #20]
 800700c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800700e:	9d01      	ldr	r5, [sp, #4]
 8007010:	ea43 0102 	orr.w	r1, r3, r2
 8007014:	9b06      	ldr	r3, [sp, #24]
 8007016:	430b      	orrs	r3, r1
 8007018:	9b08      	ldr	r3, [sp, #32]
 800701a:	d10d      	bne.n	8007038 <_dtoa_r+0xa80>
 800701c:	2b39      	cmp	r3, #57	; 0x39
 800701e:	d029      	beq.n	8007074 <_dtoa_r+0xabc>
 8007020:	f1b9 0f00 	cmp.w	r9, #0
 8007024:	dd01      	ble.n	800702a <_dtoa_r+0xa72>
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	3331      	adds	r3, #49	; 0x31
 800702a:	9a02      	ldr	r2, [sp, #8]
 800702c:	7013      	strb	r3, [r2, #0]
 800702e:	e774      	b.n	8006f1a <_dtoa_r+0x962>
 8007030:	4638      	mov	r0, r7
 8007032:	e7b9      	b.n	8006fa8 <_dtoa_r+0x9f0>
 8007034:	2201      	movs	r2, #1
 8007036:	e7e2      	b.n	8006ffe <_dtoa_r+0xa46>
 8007038:	f1b9 0f00 	cmp.w	r9, #0
 800703c:	db06      	blt.n	800704c <_dtoa_r+0xa94>
 800703e:	9905      	ldr	r1, [sp, #20]
 8007040:	ea41 0909 	orr.w	r9, r1, r9
 8007044:	9906      	ldr	r1, [sp, #24]
 8007046:	ea59 0101 	orrs.w	r1, r9, r1
 800704a:	d120      	bne.n	800708e <_dtoa_r+0xad6>
 800704c:	2a00      	cmp	r2, #0
 800704e:	ddec      	ble.n	800702a <_dtoa_r+0xa72>
 8007050:	4659      	mov	r1, fp
 8007052:	2201      	movs	r2, #1
 8007054:	4620      	mov	r0, r4
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	f000 fe92 	bl	8007d80 <__lshift>
 800705c:	4631      	mov	r1, r6
 800705e:	4683      	mov	fp, r0
 8007060:	f000 fefa 	bl	8007e58 <__mcmp>
 8007064:	2800      	cmp	r0, #0
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	dc02      	bgt.n	8007070 <_dtoa_r+0xab8>
 800706a:	d1de      	bne.n	800702a <_dtoa_r+0xa72>
 800706c:	07da      	lsls	r2, r3, #31
 800706e:	d5dc      	bpl.n	800702a <_dtoa_r+0xa72>
 8007070:	2b39      	cmp	r3, #57	; 0x39
 8007072:	d1d8      	bne.n	8007026 <_dtoa_r+0xa6e>
 8007074:	9a02      	ldr	r2, [sp, #8]
 8007076:	2339      	movs	r3, #57	; 0x39
 8007078:	7013      	strb	r3, [r2, #0]
 800707a:	462b      	mov	r3, r5
 800707c:	461d      	mov	r5, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007084:	2a39      	cmp	r2, #57	; 0x39
 8007086:	d050      	beq.n	800712a <_dtoa_r+0xb72>
 8007088:	3201      	adds	r2, #1
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e745      	b.n	8006f1a <_dtoa_r+0x962>
 800708e:	2a00      	cmp	r2, #0
 8007090:	dd03      	ble.n	800709a <_dtoa_r+0xae2>
 8007092:	2b39      	cmp	r3, #57	; 0x39
 8007094:	d0ee      	beq.n	8007074 <_dtoa_r+0xabc>
 8007096:	3301      	adds	r3, #1
 8007098:	e7c7      	b.n	800702a <_dtoa_r+0xa72>
 800709a:	9a01      	ldr	r2, [sp, #4]
 800709c:	9907      	ldr	r1, [sp, #28]
 800709e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070a2:	428a      	cmp	r2, r1
 80070a4:	d02a      	beq.n	80070fc <_dtoa_r+0xb44>
 80070a6:	4659      	mov	r1, fp
 80070a8:	2300      	movs	r3, #0
 80070aa:	220a      	movs	r2, #10
 80070ac:	4620      	mov	r0, r4
 80070ae:	f000 fc6d 	bl	800798c <__multadd>
 80070b2:	45b8      	cmp	r8, r7
 80070b4:	4683      	mov	fp, r0
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f04f 020a 	mov.w	r2, #10
 80070be:	4641      	mov	r1, r8
 80070c0:	4620      	mov	r0, r4
 80070c2:	d107      	bne.n	80070d4 <_dtoa_r+0xb1c>
 80070c4:	f000 fc62 	bl	800798c <__multadd>
 80070c8:	4680      	mov	r8, r0
 80070ca:	4607      	mov	r7, r0
 80070cc:	9b01      	ldr	r3, [sp, #4]
 80070ce:	3301      	adds	r3, #1
 80070d0:	9301      	str	r3, [sp, #4]
 80070d2:	e775      	b.n	8006fc0 <_dtoa_r+0xa08>
 80070d4:	f000 fc5a 	bl	800798c <__multadd>
 80070d8:	4639      	mov	r1, r7
 80070da:	4680      	mov	r8, r0
 80070dc:	2300      	movs	r3, #0
 80070de:	220a      	movs	r2, #10
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fc53 	bl	800798c <__multadd>
 80070e6:	4607      	mov	r7, r0
 80070e8:	e7f0      	b.n	80070cc <_dtoa_r+0xb14>
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	9a00      	ldr	r2, [sp, #0]
 80070f0:	bfcc      	ite	gt
 80070f2:	464d      	movgt	r5, r9
 80070f4:	2501      	movle	r5, #1
 80070f6:	4415      	add	r5, r2
 80070f8:	f04f 0800 	mov.w	r8, #0
 80070fc:	4659      	mov	r1, fp
 80070fe:	2201      	movs	r2, #1
 8007100:	4620      	mov	r0, r4
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	f000 fe3c 	bl	8007d80 <__lshift>
 8007108:	4631      	mov	r1, r6
 800710a:	4683      	mov	fp, r0
 800710c:	f000 fea4 	bl	8007e58 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	dcb2      	bgt.n	800707a <_dtoa_r+0xac2>
 8007114:	d102      	bne.n	800711c <_dtoa_r+0xb64>
 8007116:	9b01      	ldr	r3, [sp, #4]
 8007118:	07db      	lsls	r3, r3, #31
 800711a:	d4ae      	bmi.n	800707a <_dtoa_r+0xac2>
 800711c:	462b      	mov	r3, r5
 800711e:	461d      	mov	r5, r3
 8007120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007124:	2a30      	cmp	r2, #48	; 0x30
 8007126:	d0fa      	beq.n	800711e <_dtoa_r+0xb66>
 8007128:	e6f7      	b.n	8006f1a <_dtoa_r+0x962>
 800712a:	9a00      	ldr	r2, [sp, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d1a5      	bne.n	800707c <_dtoa_r+0xac4>
 8007130:	f10a 0a01 	add.w	sl, sl, #1
 8007134:	2331      	movs	r3, #49	; 0x31
 8007136:	e779      	b.n	800702c <_dtoa_r+0xa74>
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <_dtoa_r+0xbd0>)
 800713a:	f7ff baaf 	b.w	800669c <_dtoa_r+0xe4>
 800713e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007140:	2b00      	cmp	r3, #0
 8007142:	f47f aa86 	bne.w	8006652 <_dtoa_r+0x9a>
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <_dtoa_r+0xbd4>)
 8007148:	f7ff baa8 	b.w	800669c <_dtoa_r+0xe4>
 800714c:	f1b9 0f00 	cmp.w	r9, #0
 8007150:	dc03      	bgt.n	800715a <_dtoa_r+0xba2>
 8007152:	9b05      	ldr	r3, [sp, #20]
 8007154:	2b02      	cmp	r3, #2
 8007156:	f73f aec9 	bgt.w	8006eec <_dtoa_r+0x934>
 800715a:	9d00      	ldr	r5, [sp, #0]
 800715c:	4631      	mov	r1, r6
 800715e:	4658      	mov	r0, fp
 8007160:	f7ff f99c 	bl	800649c <quorem>
 8007164:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007168:	f805 3b01 	strb.w	r3, [r5], #1
 800716c:	9a00      	ldr	r2, [sp, #0]
 800716e:	1aaa      	subs	r2, r5, r2
 8007170:	4591      	cmp	r9, r2
 8007172:	ddba      	ble.n	80070ea <_dtoa_r+0xb32>
 8007174:	4659      	mov	r1, fp
 8007176:	2300      	movs	r3, #0
 8007178:	220a      	movs	r2, #10
 800717a:	4620      	mov	r0, r4
 800717c:	f000 fc06 	bl	800798c <__multadd>
 8007180:	4683      	mov	fp, r0
 8007182:	e7eb      	b.n	800715c <_dtoa_r+0xba4>
 8007184:	0800948c 	.word	0x0800948c
 8007188:	0800928c 	.word	0x0800928c
 800718c:	08009409 	.word	0x08009409

08007190 <rshift>:
 8007190:	6903      	ldr	r3, [r0, #16]
 8007192:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800719a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800719e:	f100 0414 	add.w	r4, r0, #20
 80071a2:	dd45      	ble.n	8007230 <rshift+0xa0>
 80071a4:	f011 011f 	ands.w	r1, r1, #31
 80071a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80071ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80071b0:	d10c      	bne.n	80071cc <rshift+0x3c>
 80071b2:	f100 0710 	add.w	r7, r0, #16
 80071b6:	4629      	mov	r1, r5
 80071b8:	42b1      	cmp	r1, r6
 80071ba:	d334      	bcc.n	8007226 <rshift+0x96>
 80071bc:	1a9b      	subs	r3, r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	1eea      	subs	r2, r5, #3
 80071c2:	4296      	cmp	r6, r2
 80071c4:	bf38      	it	cc
 80071c6:	2300      	movcc	r3, #0
 80071c8:	4423      	add	r3, r4
 80071ca:	e015      	b.n	80071f8 <rshift+0x68>
 80071cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80071d0:	f1c1 0820 	rsb	r8, r1, #32
 80071d4:	40cf      	lsrs	r7, r1
 80071d6:	f105 0e04 	add.w	lr, r5, #4
 80071da:	46a1      	mov	r9, r4
 80071dc:	4576      	cmp	r6, lr
 80071de:	46f4      	mov	ip, lr
 80071e0:	d815      	bhi.n	800720e <rshift+0x7e>
 80071e2:	1a9b      	subs	r3, r3, r2
 80071e4:	009a      	lsls	r2, r3, #2
 80071e6:	3a04      	subs	r2, #4
 80071e8:	3501      	adds	r5, #1
 80071ea:	42ae      	cmp	r6, r5
 80071ec:	bf38      	it	cc
 80071ee:	2200      	movcc	r2, #0
 80071f0:	18a3      	adds	r3, r4, r2
 80071f2:	50a7      	str	r7, [r4, r2]
 80071f4:	b107      	cbz	r7, 80071f8 <rshift+0x68>
 80071f6:	3304      	adds	r3, #4
 80071f8:	1b1a      	subs	r2, r3, r4
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007200:	bf08      	it	eq
 8007202:	2300      	moveq	r3, #0
 8007204:	6102      	str	r2, [r0, #16]
 8007206:	bf08      	it	eq
 8007208:	6143      	streq	r3, [r0, #20]
 800720a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800720e:	f8dc c000 	ldr.w	ip, [ip]
 8007212:	fa0c fc08 	lsl.w	ip, ip, r8
 8007216:	ea4c 0707 	orr.w	r7, ip, r7
 800721a:	f849 7b04 	str.w	r7, [r9], #4
 800721e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007222:	40cf      	lsrs	r7, r1
 8007224:	e7da      	b.n	80071dc <rshift+0x4c>
 8007226:	f851 cb04 	ldr.w	ip, [r1], #4
 800722a:	f847 cf04 	str.w	ip, [r7, #4]!
 800722e:	e7c3      	b.n	80071b8 <rshift+0x28>
 8007230:	4623      	mov	r3, r4
 8007232:	e7e1      	b.n	80071f8 <rshift+0x68>

08007234 <__hexdig_fun>:
 8007234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007238:	2b09      	cmp	r3, #9
 800723a:	d802      	bhi.n	8007242 <__hexdig_fun+0xe>
 800723c:	3820      	subs	r0, #32
 800723e:	b2c0      	uxtb	r0, r0
 8007240:	4770      	bx	lr
 8007242:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007246:	2b05      	cmp	r3, #5
 8007248:	d801      	bhi.n	800724e <__hexdig_fun+0x1a>
 800724a:	3847      	subs	r0, #71	; 0x47
 800724c:	e7f7      	b.n	800723e <__hexdig_fun+0xa>
 800724e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007252:	2b05      	cmp	r3, #5
 8007254:	d801      	bhi.n	800725a <__hexdig_fun+0x26>
 8007256:	3827      	subs	r0, #39	; 0x27
 8007258:	e7f1      	b.n	800723e <__hexdig_fun+0xa>
 800725a:	2000      	movs	r0, #0
 800725c:	4770      	bx	lr
	...

08007260 <__gethex>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	ed2d 8b02 	vpush	{d8}
 8007268:	b089      	sub	sp, #36	; 0x24
 800726a:	ee08 0a10 	vmov	s16, r0
 800726e:	9304      	str	r3, [sp, #16]
 8007270:	4bbc      	ldr	r3, [pc, #752]	; (8007564 <__gethex+0x304>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9301      	str	r3, [sp, #4]
 8007276:	4618      	mov	r0, r3
 8007278:	468b      	mov	fp, r1
 800727a:	4690      	mov	r8, r2
 800727c:	f7f8 ffb0 	bl	80001e0 <strlen>
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	f8db 2000 	ldr.w	r2, [fp]
 8007286:	4403      	add	r3, r0
 8007288:	4682      	mov	sl, r0
 800728a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800728e:	9305      	str	r3, [sp, #20]
 8007290:	1c93      	adds	r3, r2, #2
 8007292:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007296:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800729a:	32fe      	adds	r2, #254	; 0xfe
 800729c:	18d1      	adds	r1, r2, r3
 800729e:	461f      	mov	r7, r3
 80072a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80072a4:	9100      	str	r1, [sp, #0]
 80072a6:	2830      	cmp	r0, #48	; 0x30
 80072a8:	d0f8      	beq.n	800729c <__gethex+0x3c>
 80072aa:	f7ff ffc3 	bl	8007234 <__hexdig_fun>
 80072ae:	4604      	mov	r4, r0
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d13a      	bne.n	800732a <__gethex+0xca>
 80072b4:	9901      	ldr	r1, [sp, #4]
 80072b6:	4652      	mov	r2, sl
 80072b8:	4638      	mov	r0, r7
 80072ba:	f001 f9ed 	bl	8008698 <strncmp>
 80072be:	4605      	mov	r5, r0
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d168      	bne.n	8007396 <__gethex+0x136>
 80072c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80072c8:	eb07 060a 	add.w	r6, r7, sl
 80072cc:	f7ff ffb2 	bl	8007234 <__hexdig_fun>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d062      	beq.n	800739a <__gethex+0x13a>
 80072d4:	4633      	mov	r3, r6
 80072d6:	7818      	ldrb	r0, [r3, #0]
 80072d8:	2830      	cmp	r0, #48	; 0x30
 80072da:	461f      	mov	r7, r3
 80072dc:	f103 0301 	add.w	r3, r3, #1
 80072e0:	d0f9      	beq.n	80072d6 <__gethex+0x76>
 80072e2:	f7ff ffa7 	bl	8007234 <__hexdig_fun>
 80072e6:	2301      	movs	r3, #1
 80072e8:	fab0 f480 	clz	r4, r0
 80072ec:	0964      	lsrs	r4, r4, #5
 80072ee:	4635      	mov	r5, r6
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	463a      	mov	r2, r7
 80072f4:	4616      	mov	r6, r2
 80072f6:	3201      	adds	r2, #1
 80072f8:	7830      	ldrb	r0, [r6, #0]
 80072fa:	f7ff ff9b 	bl	8007234 <__hexdig_fun>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d1f8      	bne.n	80072f4 <__gethex+0x94>
 8007302:	9901      	ldr	r1, [sp, #4]
 8007304:	4652      	mov	r2, sl
 8007306:	4630      	mov	r0, r6
 8007308:	f001 f9c6 	bl	8008698 <strncmp>
 800730c:	b980      	cbnz	r0, 8007330 <__gethex+0xd0>
 800730e:	b94d      	cbnz	r5, 8007324 <__gethex+0xc4>
 8007310:	eb06 050a 	add.w	r5, r6, sl
 8007314:	462a      	mov	r2, r5
 8007316:	4616      	mov	r6, r2
 8007318:	3201      	adds	r2, #1
 800731a:	7830      	ldrb	r0, [r6, #0]
 800731c:	f7ff ff8a 	bl	8007234 <__hexdig_fun>
 8007320:	2800      	cmp	r0, #0
 8007322:	d1f8      	bne.n	8007316 <__gethex+0xb6>
 8007324:	1bad      	subs	r5, r5, r6
 8007326:	00ad      	lsls	r5, r5, #2
 8007328:	e004      	b.n	8007334 <__gethex+0xd4>
 800732a:	2400      	movs	r4, #0
 800732c:	4625      	mov	r5, r4
 800732e:	e7e0      	b.n	80072f2 <__gethex+0x92>
 8007330:	2d00      	cmp	r5, #0
 8007332:	d1f7      	bne.n	8007324 <__gethex+0xc4>
 8007334:	7833      	ldrb	r3, [r6, #0]
 8007336:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800733a:	2b50      	cmp	r3, #80	; 0x50
 800733c:	d13b      	bne.n	80073b6 <__gethex+0x156>
 800733e:	7873      	ldrb	r3, [r6, #1]
 8007340:	2b2b      	cmp	r3, #43	; 0x2b
 8007342:	d02c      	beq.n	800739e <__gethex+0x13e>
 8007344:	2b2d      	cmp	r3, #45	; 0x2d
 8007346:	d02e      	beq.n	80073a6 <__gethex+0x146>
 8007348:	1c71      	adds	r1, r6, #1
 800734a:	f04f 0900 	mov.w	r9, #0
 800734e:	7808      	ldrb	r0, [r1, #0]
 8007350:	f7ff ff70 	bl	8007234 <__hexdig_fun>
 8007354:	1e43      	subs	r3, r0, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b18      	cmp	r3, #24
 800735a:	d82c      	bhi.n	80073b6 <__gethex+0x156>
 800735c:	f1a0 0210 	sub.w	r2, r0, #16
 8007360:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007364:	f7ff ff66 	bl	8007234 <__hexdig_fun>
 8007368:	1e43      	subs	r3, r0, #1
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b18      	cmp	r3, #24
 800736e:	d91d      	bls.n	80073ac <__gethex+0x14c>
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	d000      	beq.n	8007378 <__gethex+0x118>
 8007376:	4252      	negs	r2, r2
 8007378:	4415      	add	r5, r2
 800737a:	f8cb 1000 	str.w	r1, [fp]
 800737e:	b1e4      	cbz	r4, 80073ba <__gethex+0x15a>
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf14      	ite	ne
 8007386:	2700      	movne	r7, #0
 8007388:	2706      	moveq	r7, #6
 800738a:	4638      	mov	r0, r7
 800738c:	b009      	add	sp, #36	; 0x24
 800738e:	ecbd 8b02 	vpop	{d8}
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	463e      	mov	r6, r7
 8007398:	4625      	mov	r5, r4
 800739a:	2401      	movs	r4, #1
 800739c:	e7ca      	b.n	8007334 <__gethex+0xd4>
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	1cb1      	adds	r1, r6, #2
 80073a4:	e7d3      	b.n	800734e <__gethex+0xee>
 80073a6:	f04f 0901 	mov.w	r9, #1
 80073aa:	e7fa      	b.n	80073a2 <__gethex+0x142>
 80073ac:	230a      	movs	r3, #10
 80073ae:	fb03 0202 	mla	r2, r3, r2, r0
 80073b2:	3a10      	subs	r2, #16
 80073b4:	e7d4      	b.n	8007360 <__gethex+0x100>
 80073b6:	4631      	mov	r1, r6
 80073b8:	e7df      	b.n	800737a <__gethex+0x11a>
 80073ba:	1bf3      	subs	r3, r6, r7
 80073bc:	3b01      	subs	r3, #1
 80073be:	4621      	mov	r1, r4
 80073c0:	2b07      	cmp	r3, #7
 80073c2:	dc0b      	bgt.n	80073dc <__gethex+0x17c>
 80073c4:	ee18 0a10 	vmov	r0, s16
 80073c8:	f000 fa7e 	bl	80078c8 <_Balloc>
 80073cc:	4604      	mov	r4, r0
 80073ce:	b940      	cbnz	r0, 80073e2 <__gethex+0x182>
 80073d0:	4b65      	ldr	r3, [pc, #404]	; (8007568 <__gethex+0x308>)
 80073d2:	4602      	mov	r2, r0
 80073d4:	21de      	movs	r1, #222	; 0xde
 80073d6:	4865      	ldr	r0, [pc, #404]	; (800756c <__gethex+0x30c>)
 80073d8:	f001 f97e 	bl	80086d8 <__assert_func>
 80073dc:	3101      	adds	r1, #1
 80073de:	105b      	asrs	r3, r3, #1
 80073e0:	e7ee      	b.n	80073c0 <__gethex+0x160>
 80073e2:	f100 0914 	add.w	r9, r0, #20
 80073e6:	f04f 0b00 	mov.w	fp, #0
 80073ea:	f1ca 0301 	rsb	r3, sl, #1
 80073ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80073f2:	f8cd b000 	str.w	fp, [sp]
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	42b7      	cmp	r7, r6
 80073fa:	d340      	bcc.n	800747e <__gethex+0x21e>
 80073fc:	9802      	ldr	r0, [sp, #8]
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	f840 3b04 	str.w	r3, [r0], #4
 8007404:	eba0 0009 	sub.w	r0, r0, r9
 8007408:	1080      	asrs	r0, r0, #2
 800740a:	0146      	lsls	r6, r0, #5
 800740c:	6120      	str	r0, [r4, #16]
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fb50 	bl	8007ab4 <__hi0bits>
 8007414:	1a30      	subs	r0, r6, r0
 8007416:	f8d8 6000 	ldr.w	r6, [r8]
 800741a:	42b0      	cmp	r0, r6
 800741c:	dd63      	ble.n	80074e6 <__gethex+0x286>
 800741e:	1b87      	subs	r7, r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	4620      	mov	r0, r4
 8007424:	f000 feea 	bl	80081fc <__any_on>
 8007428:	4682      	mov	sl, r0
 800742a:	b1a8      	cbz	r0, 8007458 <__gethex+0x1f8>
 800742c:	1e7b      	subs	r3, r7, #1
 800742e:	1159      	asrs	r1, r3, #5
 8007430:	f003 021f 	and.w	r2, r3, #31
 8007434:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007438:	f04f 0a01 	mov.w	sl, #1
 800743c:	fa0a f202 	lsl.w	r2, sl, r2
 8007440:	420a      	tst	r2, r1
 8007442:	d009      	beq.n	8007458 <__gethex+0x1f8>
 8007444:	4553      	cmp	r3, sl
 8007446:	dd05      	ble.n	8007454 <__gethex+0x1f4>
 8007448:	1eb9      	subs	r1, r7, #2
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fed6 	bl	80081fc <__any_on>
 8007450:	2800      	cmp	r0, #0
 8007452:	d145      	bne.n	80074e0 <__gethex+0x280>
 8007454:	f04f 0a02 	mov.w	sl, #2
 8007458:	4639      	mov	r1, r7
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff fe98 	bl	8007190 <rshift>
 8007460:	443d      	add	r5, r7
 8007462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007466:	42ab      	cmp	r3, r5
 8007468:	da4c      	bge.n	8007504 <__gethex+0x2a4>
 800746a:	ee18 0a10 	vmov	r0, s16
 800746e:	4621      	mov	r1, r4
 8007470:	f000 fa6a 	bl	8007948 <_Bfree>
 8007474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007476:	2300      	movs	r3, #0
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	27a3      	movs	r7, #163	; 0xa3
 800747c:	e785      	b.n	800738a <__gethex+0x12a>
 800747e:	1e73      	subs	r3, r6, #1
 8007480:	9a05      	ldr	r2, [sp, #20]
 8007482:	9303      	str	r3, [sp, #12]
 8007484:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007488:	4293      	cmp	r3, r2
 800748a:	d019      	beq.n	80074c0 <__gethex+0x260>
 800748c:	f1bb 0f20 	cmp.w	fp, #32
 8007490:	d107      	bne.n	80074a2 <__gethex+0x242>
 8007492:	9b02      	ldr	r3, [sp, #8]
 8007494:	9a00      	ldr	r2, [sp, #0]
 8007496:	f843 2b04 	str.w	r2, [r3], #4
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	2300      	movs	r3, #0
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	469b      	mov	fp, r3
 80074a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80074a6:	f7ff fec5 	bl	8007234 <__hexdig_fun>
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	f000 000f 	and.w	r0, r0, #15
 80074b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80074b4:	4303      	orrs	r3, r0
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	f10b 0b04 	add.w	fp, fp, #4
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	e00d      	b.n	80074dc <__gethex+0x27c>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	9a06      	ldr	r2, [sp, #24]
 80074c4:	4413      	add	r3, r2
 80074c6:	42bb      	cmp	r3, r7
 80074c8:	d3e0      	bcc.n	800748c <__gethex+0x22c>
 80074ca:	4618      	mov	r0, r3
 80074cc:	9901      	ldr	r1, [sp, #4]
 80074ce:	9307      	str	r3, [sp, #28]
 80074d0:	4652      	mov	r2, sl
 80074d2:	f001 f8e1 	bl	8008698 <strncmp>
 80074d6:	9b07      	ldr	r3, [sp, #28]
 80074d8:	2800      	cmp	r0, #0
 80074da:	d1d7      	bne.n	800748c <__gethex+0x22c>
 80074dc:	461e      	mov	r6, r3
 80074de:	e78b      	b.n	80073f8 <__gethex+0x198>
 80074e0:	f04f 0a03 	mov.w	sl, #3
 80074e4:	e7b8      	b.n	8007458 <__gethex+0x1f8>
 80074e6:	da0a      	bge.n	80074fe <__gethex+0x29e>
 80074e8:	1a37      	subs	r7, r6, r0
 80074ea:	4621      	mov	r1, r4
 80074ec:	ee18 0a10 	vmov	r0, s16
 80074f0:	463a      	mov	r2, r7
 80074f2:	f000 fc45 	bl	8007d80 <__lshift>
 80074f6:	1bed      	subs	r5, r5, r7
 80074f8:	4604      	mov	r4, r0
 80074fa:	f100 0914 	add.w	r9, r0, #20
 80074fe:	f04f 0a00 	mov.w	sl, #0
 8007502:	e7ae      	b.n	8007462 <__gethex+0x202>
 8007504:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007508:	42a8      	cmp	r0, r5
 800750a:	dd72      	ble.n	80075f2 <__gethex+0x392>
 800750c:	1b45      	subs	r5, r0, r5
 800750e:	42ae      	cmp	r6, r5
 8007510:	dc36      	bgt.n	8007580 <__gethex+0x320>
 8007512:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d02a      	beq.n	8007570 <__gethex+0x310>
 800751a:	2b03      	cmp	r3, #3
 800751c:	d02c      	beq.n	8007578 <__gethex+0x318>
 800751e:	2b01      	cmp	r3, #1
 8007520:	d115      	bne.n	800754e <__gethex+0x2ee>
 8007522:	42ae      	cmp	r6, r5
 8007524:	d113      	bne.n	800754e <__gethex+0x2ee>
 8007526:	2e01      	cmp	r6, #1
 8007528:	d10b      	bne.n	8007542 <__gethex+0x2e2>
 800752a:	9a04      	ldr	r2, [sp, #16]
 800752c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	2301      	movs	r3, #1
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	f8c9 3000 	str.w	r3, [r9]
 800753a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800753c:	2762      	movs	r7, #98	; 0x62
 800753e:	601c      	str	r4, [r3, #0]
 8007540:	e723      	b.n	800738a <__gethex+0x12a>
 8007542:	1e71      	subs	r1, r6, #1
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fe59 	bl	80081fc <__any_on>
 800754a:	2800      	cmp	r0, #0
 800754c:	d1ed      	bne.n	800752a <__gethex+0x2ca>
 800754e:	ee18 0a10 	vmov	r0, s16
 8007552:	4621      	mov	r1, r4
 8007554:	f000 f9f8 	bl	8007948 <_Bfree>
 8007558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800755a:	2300      	movs	r3, #0
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	2750      	movs	r7, #80	; 0x50
 8007560:	e713      	b.n	800738a <__gethex+0x12a>
 8007562:	bf00      	nop
 8007564:	08009508 	.word	0x08009508
 8007568:	0800948c 	.word	0x0800948c
 800756c:	0800949d 	.word	0x0800949d
 8007570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1eb      	bne.n	800754e <__gethex+0x2ee>
 8007576:	e7d8      	b.n	800752a <__gethex+0x2ca>
 8007578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1d5      	bne.n	800752a <__gethex+0x2ca>
 800757e:	e7e6      	b.n	800754e <__gethex+0x2ee>
 8007580:	1e6f      	subs	r7, r5, #1
 8007582:	f1ba 0f00 	cmp.w	sl, #0
 8007586:	d131      	bne.n	80075ec <__gethex+0x38c>
 8007588:	b127      	cbz	r7, 8007594 <__gethex+0x334>
 800758a:	4639      	mov	r1, r7
 800758c:	4620      	mov	r0, r4
 800758e:	f000 fe35 	bl	80081fc <__any_on>
 8007592:	4682      	mov	sl, r0
 8007594:	117b      	asrs	r3, r7, #5
 8007596:	2101      	movs	r1, #1
 8007598:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800759c:	f007 071f 	and.w	r7, r7, #31
 80075a0:	fa01 f707 	lsl.w	r7, r1, r7
 80075a4:	421f      	tst	r7, r3
 80075a6:	4629      	mov	r1, r5
 80075a8:	4620      	mov	r0, r4
 80075aa:	bf18      	it	ne
 80075ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80075b0:	1b76      	subs	r6, r6, r5
 80075b2:	f7ff fded 	bl	8007190 <rshift>
 80075b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80075ba:	2702      	movs	r7, #2
 80075bc:	f1ba 0f00 	cmp.w	sl, #0
 80075c0:	d048      	beq.n	8007654 <__gethex+0x3f4>
 80075c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d015      	beq.n	80075f6 <__gethex+0x396>
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d017      	beq.n	80075fe <__gethex+0x39e>
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d109      	bne.n	80075e6 <__gethex+0x386>
 80075d2:	f01a 0f02 	tst.w	sl, #2
 80075d6:	d006      	beq.n	80075e6 <__gethex+0x386>
 80075d8:	f8d9 0000 	ldr.w	r0, [r9]
 80075dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80075e0:	f01a 0f01 	tst.w	sl, #1
 80075e4:	d10e      	bne.n	8007604 <__gethex+0x3a4>
 80075e6:	f047 0710 	orr.w	r7, r7, #16
 80075ea:	e033      	b.n	8007654 <__gethex+0x3f4>
 80075ec:	f04f 0a01 	mov.w	sl, #1
 80075f0:	e7d0      	b.n	8007594 <__gethex+0x334>
 80075f2:	2701      	movs	r7, #1
 80075f4:	e7e2      	b.n	80075bc <__gethex+0x35c>
 80075f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f8:	f1c3 0301 	rsb	r3, r3, #1
 80075fc:	9315      	str	r3, [sp, #84]	; 0x54
 80075fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <__gethex+0x386>
 8007604:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007608:	f104 0314 	add.w	r3, r4, #20
 800760c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007610:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007614:	f04f 0c00 	mov.w	ip, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f853 2b04 	ldr.w	r2, [r3], #4
 800761e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007622:	d01c      	beq.n	800765e <__gethex+0x3fe>
 8007624:	3201      	adds	r2, #1
 8007626:	6002      	str	r2, [r0, #0]
 8007628:	2f02      	cmp	r7, #2
 800762a:	f104 0314 	add.w	r3, r4, #20
 800762e:	d13f      	bne.n	80076b0 <__gethex+0x450>
 8007630:	f8d8 2000 	ldr.w	r2, [r8]
 8007634:	3a01      	subs	r2, #1
 8007636:	42b2      	cmp	r2, r6
 8007638:	d10a      	bne.n	8007650 <__gethex+0x3f0>
 800763a:	1171      	asrs	r1, r6, #5
 800763c:	2201      	movs	r2, #1
 800763e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007642:	f006 061f 	and.w	r6, r6, #31
 8007646:	fa02 f606 	lsl.w	r6, r2, r6
 800764a:	421e      	tst	r6, r3
 800764c:	bf18      	it	ne
 800764e:	4617      	movne	r7, r2
 8007650:	f047 0720 	orr.w	r7, r7, #32
 8007654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007656:	601c      	str	r4, [r3, #0]
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	601d      	str	r5, [r3, #0]
 800765c:	e695      	b.n	800738a <__gethex+0x12a>
 800765e:	4299      	cmp	r1, r3
 8007660:	f843 cc04 	str.w	ip, [r3, #-4]
 8007664:	d8d8      	bhi.n	8007618 <__gethex+0x3b8>
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	459b      	cmp	fp, r3
 800766a:	db19      	blt.n	80076a0 <__gethex+0x440>
 800766c:	6861      	ldr	r1, [r4, #4]
 800766e:	ee18 0a10 	vmov	r0, s16
 8007672:	3101      	adds	r1, #1
 8007674:	f000 f928 	bl	80078c8 <_Balloc>
 8007678:	4681      	mov	r9, r0
 800767a:	b918      	cbnz	r0, 8007684 <__gethex+0x424>
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <__gethex+0x488>)
 800767e:	4602      	mov	r2, r0
 8007680:	2184      	movs	r1, #132	; 0x84
 8007682:	e6a8      	b.n	80073d6 <__gethex+0x176>
 8007684:	6922      	ldr	r2, [r4, #16]
 8007686:	3202      	adds	r2, #2
 8007688:	f104 010c 	add.w	r1, r4, #12
 800768c:	0092      	lsls	r2, r2, #2
 800768e:	300c      	adds	r0, #12
 8007690:	f000 f90c 	bl	80078ac <memcpy>
 8007694:	4621      	mov	r1, r4
 8007696:	ee18 0a10 	vmov	r0, s16
 800769a:	f000 f955 	bl	8007948 <_Bfree>
 800769e:	464c      	mov	r4, r9
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076a8:	6122      	str	r2, [r4, #16]
 80076aa:	2201      	movs	r2, #1
 80076ac:	615a      	str	r2, [r3, #20]
 80076ae:	e7bb      	b.n	8007628 <__gethex+0x3c8>
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	455a      	cmp	r2, fp
 80076b4:	dd0b      	ble.n	80076ce <__gethex+0x46e>
 80076b6:	2101      	movs	r1, #1
 80076b8:	4620      	mov	r0, r4
 80076ba:	f7ff fd69 	bl	8007190 <rshift>
 80076be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076c2:	3501      	adds	r5, #1
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	f6ff aed0 	blt.w	800746a <__gethex+0x20a>
 80076ca:	2701      	movs	r7, #1
 80076cc:	e7c0      	b.n	8007650 <__gethex+0x3f0>
 80076ce:	f016 061f 	ands.w	r6, r6, #31
 80076d2:	d0fa      	beq.n	80076ca <__gethex+0x46a>
 80076d4:	449a      	add	sl, r3
 80076d6:	f1c6 0620 	rsb	r6, r6, #32
 80076da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80076de:	f000 f9e9 	bl	8007ab4 <__hi0bits>
 80076e2:	42b0      	cmp	r0, r6
 80076e4:	dbe7      	blt.n	80076b6 <__gethex+0x456>
 80076e6:	e7f0      	b.n	80076ca <__gethex+0x46a>
 80076e8:	0800948c 	.word	0x0800948c

080076ec <L_shift>:
 80076ec:	f1c2 0208 	rsb	r2, r2, #8
 80076f0:	0092      	lsls	r2, r2, #2
 80076f2:	b570      	push	{r4, r5, r6, lr}
 80076f4:	f1c2 0620 	rsb	r6, r2, #32
 80076f8:	6843      	ldr	r3, [r0, #4]
 80076fa:	6804      	ldr	r4, [r0, #0]
 80076fc:	fa03 f506 	lsl.w	r5, r3, r6
 8007700:	432c      	orrs	r4, r5
 8007702:	40d3      	lsrs	r3, r2
 8007704:	6004      	str	r4, [r0, #0]
 8007706:	f840 3f04 	str.w	r3, [r0, #4]!
 800770a:	4288      	cmp	r0, r1
 800770c:	d3f4      	bcc.n	80076f8 <L_shift+0xc>
 800770e:	bd70      	pop	{r4, r5, r6, pc}

08007710 <__match>:
 8007710:	b530      	push	{r4, r5, lr}
 8007712:	6803      	ldr	r3, [r0, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771a:	b914      	cbnz	r4, 8007722 <__match+0x12>
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	2001      	movs	r0, #1
 8007720:	bd30      	pop	{r4, r5, pc}
 8007722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007726:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800772a:	2d19      	cmp	r5, #25
 800772c:	bf98      	it	ls
 800772e:	3220      	addls	r2, #32
 8007730:	42a2      	cmp	r2, r4
 8007732:	d0f0      	beq.n	8007716 <__match+0x6>
 8007734:	2000      	movs	r0, #0
 8007736:	e7f3      	b.n	8007720 <__match+0x10>

08007738 <__hexnan>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	680b      	ldr	r3, [r1, #0]
 800773e:	6801      	ldr	r1, [r0, #0]
 8007740:	115e      	asrs	r6, r3, #5
 8007742:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007746:	f013 031f 	ands.w	r3, r3, #31
 800774a:	b087      	sub	sp, #28
 800774c:	bf18      	it	ne
 800774e:	3604      	addne	r6, #4
 8007750:	2500      	movs	r5, #0
 8007752:	1f37      	subs	r7, r6, #4
 8007754:	4682      	mov	sl, r0
 8007756:	4690      	mov	r8, r2
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	f846 5c04 	str.w	r5, [r6, #-4]
 800775e:	46b9      	mov	r9, r7
 8007760:	463c      	mov	r4, r7
 8007762:	9502      	str	r5, [sp, #8]
 8007764:	46ab      	mov	fp, r5
 8007766:	784a      	ldrb	r2, [r1, #1]
 8007768:	1c4b      	adds	r3, r1, #1
 800776a:	9303      	str	r3, [sp, #12]
 800776c:	b342      	cbz	r2, 80077c0 <__hexnan+0x88>
 800776e:	4610      	mov	r0, r2
 8007770:	9105      	str	r1, [sp, #20]
 8007772:	9204      	str	r2, [sp, #16]
 8007774:	f7ff fd5e 	bl	8007234 <__hexdig_fun>
 8007778:	2800      	cmp	r0, #0
 800777a:	d14f      	bne.n	800781c <__hexnan+0xe4>
 800777c:	9a04      	ldr	r2, [sp, #16]
 800777e:	9905      	ldr	r1, [sp, #20]
 8007780:	2a20      	cmp	r2, #32
 8007782:	d818      	bhi.n	80077b6 <__hexnan+0x7e>
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	459b      	cmp	fp, r3
 8007788:	dd13      	ble.n	80077b2 <__hexnan+0x7a>
 800778a:	454c      	cmp	r4, r9
 800778c:	d206      	bcs.n	800779c <__hexnan+0x64>
 800778e:	2d07      	cmp	r5, #7
 8007790:	dc04      	bgt.n	800779c <__hexnan+0x64>
 8007792:	462a      	mov	r2, r5
 8007794:	4649      	mov	r1, r9
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff ffa8 	bl	80076ec <L_shift>
 800779c:	4544      	cmp	r4, r8
 800779e:	d950      	bls.n	8007842 <__hexnan+0x10a>
 80077a0:	2300      	movs	r3, #0
 80077a2:	f1a4 0904 	sub.w	r9, r4, #4
 80077a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80077aa:	f8cd b008 	str.w	fp, [sp, #8]
 80077ae:	464c      	mov	r4, r9
 80077b0:	461d      	mov	r5, r3
 80077b2:	9903      	ldr	r1, [sp, #12]
 80077b4:	e7d7      	b.n	8007766 <__hexnan+0x2e>
 80077b6:	2a29      	cmp	r2, #41	; 0x29
 80077b8:	d156      	bne.n	8007868 <__hexnan+0x130>
 80077ba:	3102      	adds	r1, #2
 80077bc:	f8ca 1000 	str.w	r1, [sl]
 80077c0:	f1bb 0f00 	cmp.w	fp, #0
 80077c4:	d050      	beq.n	8007868 <__hexnan+0x130>
 80077c6:	454c      	cmp	r4, r9
 80077c8:	d206      	bcs.n	80077d8 <__hexnan+0xa0>
 80077ca:	2d07      	cmp	r5, #7
 80077cc:	dc04      	bgt.n	80077d8 <__hexnan+0xa0>
 80077ce:	462a      	mov	r2, r5
 80077d0:	4649      	mov	r1, r9
 80077d2:	4620      	mov	r0, r4
 80077d4:	f7ff ff8a 	bl	80076ec <L_shift>
 80077d8:	4544      	cmp	r4, r8
 80077da:	d934      	bls.n	8007846 <__hexnan+0x10e>
 80077dc:	f1a8 0204 	sub.w	r2, r8, #4
 80077e0:	4623      	mov	r3, r4
 80077e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80077e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80077ea:	429f      	cmp	r7, r3
 80077ec:	d2f9      	bcs.n	80077e2 <__hexnan+0xaa>
 80077ee:	1b3b      	subs	r3, r7, r4
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	3304      	adds	r3, #4
 80077f6:	3401      	adds	r4, #1
 80077f8:	3e03      	subs	r6, #3
 80077fa:	42b4      	cmp	r4, r6
 80077fc:	bf88      	it	hi
 80077fe:	2304      	movhi	r3, #4
 8007800:	4443      	add	r3, r8
 8007802:	2200      	movs	r2, #0
 8007804:	f843 2b04 	str.w	r2, [r3], #4
 8007808:	429f      	cmp	r7, r3
 800780a:	d2fb      	bcs.n	8007804 <__hexnan+0xcc>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	b91b      	cbnz	r3, 8007818 <__hexnan+0xe0>
 8007810:	4547      	cmp	r7, r8
 8007812:	d127      	bne.n	8007864 <__hexnan+0x12c>
 8007814:	2301      	movs	r3, #1
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	2005      	movs	r0, #5
 800781a:	e026      	b.n	800786a <__hexnan+0x132>
 800781c:	3501      	adds	r5, #1
 800781e:	2d08      	cmp	r5, #8
 8007820:	f10b 0b01 	add.w	fp, fp, #1
 8007824:	dd06      	ble.n	8007834 <__hexnan+0xfc>
 8007826:	4544      	cmp	r4, r8
 8007828:	d9c3      	bls.n	80077b2 <__hexnan+0x7a>
 800782a:	2300      	movs	r3, #0
 800782c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007830:	2501      	movs	r5, #1
 8007832:	3c04      	subs	r4, #4
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	f000 000f 	and.w	r0, r0, #15
 800783a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800783e:	6022      	str	r2, [r4, #0]
 8007840:	e7b7      	b.n	80077b2 <__hexnan+0x7a>
 8007842:	2508      	movs	r5, #8
 8007844:	e7b5      	b.n	80077b2 <__hexnan+0x7a>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d0df      	beq.n	800780c <__hexnan+0xd4>
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	f1c3 0320 	rsb	r3, r3, #32
 8007854:	fa22 f303 	lsr.w	r3, r2, r3
 8007858:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800785c:	401a      	ands	r2, r3
 800785e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007862:	e7d3      	b.n	800780c <__hexnan+0xd4>
 8007864:	3f04      	subs	r7, #4
 8007866:	e7d1      	b.n	800780c <__hexnan+0xd4>
 8007868:	2004      	movs	r0, #4
 800786a:	b007      	add	sp, #28
 800786c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007870 <_localeconv_r>:
 8007870:	4800      	ldr	r0, [pc, #0]	; (8007874 <_localeconv_r+0x4>)
 8007872:	4770      	bx	lr
 8007874:	20000168 	.word	0x20000168

08007878 <malloc>:
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <malloc+0xc>)
 800787a:	4601      	mov	r1, r0
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f000 bd3d 	b.w	80082fc <_malloc_r>
 8007882:	bf00      	nop
 8007884:	20000010 	.word	0x20000010

08007888 <__ascii_mbtowc>:
 8007888:	b082      	sub	sp, #8
 800788a:	b901      	cbnz	r1, 800788e <__ascii_mbtowc+0x6>
 800788c:	a901      	add	r1, sp, #4
 800788e:	b142      	cbz	r2, 80078a2 <__ascii_mbtowc+0x1a>
 8007890:	b14b      	cbz	r3, 80078a6 <__ascii_mbtowc+0x1e>
 8007892:	7813      	ldrb	r3, [r2, #0]
 8007894:	600b      	str	r3, [r1, #0]
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	1e10      	subs	r0, r2, #0
 800789a:	bf18      	it	ne
 800789c:	2001      	movne	r0, #1
 800789e:	b002      	add	sp, #8
 80078a0:	4770      	bx	lr
 80078a2:	4610      	mov	r0, r2
 80078a4:	e7fb      	b.n	800789e <__ascii_mbtowc+0x16>
 80078a6:	f06f 0001 	mvn.w	r0, #1
 80078aa:	e7f8      	b.n	800789e <__ascii_mbtowc+0x16>

080078ac <memcpy>:
 80078ac:	440a      	add	r2, r1
 80078ae:	4291      	cmp	r1, r2
 80078b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078b4:	d100      	bne.n	80078b8 <memcpy+0xc>
 80078b6:	4770      	bx	lr
 80078b8:	b510      	push	{r4, lr}
 80078ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078c2:	4291      	cmp	r1, r2
 80078c4:	d1f9      	bne.n	80078ba <memcpy+0xe>
 80078c6:	bd10      	pop	{r4, pc}

080078c8 <_Balloc>:
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	b976      	cbnz	r6, 80078f0 <_Balloc+0x28>
 80078d2:	2010      	movs	r0, #16
 80078d4:	f7ff ffd0 	bl	8007878 <malloc>
 80078d8:	4602      	mov	r2, r0
 80078da:	6260      	str	r0, [r4, #36]	; 0x24
 80078dc:	b920      	cbnz	r0, 80078e8 <_Balloc+0x20>
 80078de:	4b18      	ldr	r3, [pc, #96]	; (8007940 <_Balloc+0x78>)
 80078e0:	4818      	ldr	r0, [pc, #96]	; (8007944 <_Balloc+0x7c>)
 80078e2:	2166      	movs	r1, #102	; 0x66
 80078e4:	f000 fef8 	bl	80086d8 <__assert_func>
 80078e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078ec:	6006      	str	r6, [r0, #0]
 80078ee:	60c6      	str	r6, [r0, #12]
 80078f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078f2:	68f3      	ldr	r3, [r6, #12]
 80078f4:	b183      	cbz	r3, 8007918 <_Balloc+0x50>
 80078f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078fe:	b9b8      	cbnz	r0, 8007930 <_Balloc+0x68>
 8007900:	2101      	movs	r1, #1
 8007902:	fa01 f605 	lsl.w	r6, r1, r5
 8007906:	1d72      	adds	r2, r6, #5
 8007908:	0092      	lsls	r2, r2, #2
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fc97 	bl	800823e <_calloc_r>
 8007910:	b160      	cbz	r0, 800792c <_Balloc+0x64>
 8007912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007916:	e00e      	b.n	8007936 <_Balloc+0x6e>
 8007918:	2221      	movs	r2, #33	; 0x21
 800791a:	2104      	movs	r1, #4
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fc8e 	bl	800823e <_calloc_r>
 8007922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007924:	60f0      	str	r0, [r6, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e4      	bne.n	80078f6 <_Balloc+0x2e>
 800792c:	2000      	movs	r0, #0
 800792e:	bd70      	pop	{r4, r5, r6, pc}
 8007930:	6802      	ldr	r2, [r0, #0]
 8007932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007936:	2300      	movs	r3, #0
 8007938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800793c:	e7f7      	b.n	800792e <_Balloc+0x66>
 800793e:	bf00      	nop
 8007940:	08009416 	.word	0x08009416
 8007944:	0800951c 	.word	0x0800951c

08007948 <_Bfree>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800794c:	4605      	mov	r5, r0
 800794e:	460c      	mov	r4, r1
 8007950:	b976      	cbnz	r6, 8007970 <_Bfree+0x28>
 8007952:	2010      	movs	r0, #16
 8007954:	f7ff ff90 	bl	8007878 <malloc>
 8007958:	4602      	mov	r2, r0
 800795a:	6268      	str	r0, [r5, #36]	; 0x24
 800795c:	b920      	cbnz	r0, 8007968 <_Bfree+0x20>
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <_Bfree+0x3c>)
 8007960:	4809      	ldr	r0, [pc, #36]	; (8007988 <_Bfree+0x40>)
 8007962:	218a      	movs	r1, #138	; 0x8a
 8007964:	f000 feb8 	bl	80086d8 <__assert_func>
 8007968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800796c:	6006      	str	r6, [r0, #0]
 800796e:	60c6      	str	r6, [r0, #12]
 8007970:	b13c      	cbz	r4, 8007982 <_Bfree+0x3a>
 8007972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007974:	6862      	ldr	r2, [r4, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800797c:	6021      	str	r1, [r4, #0]
 800797e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	08009416 	.word	0x08009416
 8007988:	0800951c 	.word	0x0800951c

0800798c <__multadd>:
 800798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007990:	690e      	ldr	r6, [r1, #16]
 8007992:	4607      	mov	r7, r0
 8007994:	4698      	mov	r8, r3
 8007996:	460c      	mov	r4, r1
 8007998:	f101 0014 	add.w	r0, r1, #20
 800799c:	2300      	movs	r3, #0
 800799e:	6805      	ldr	r5, [r0, #0]
 80079a0:	b2a9      	uxth	r1, r5
 80079a2:	fb02 8101 	mla	r1, r2, r1, r8
 80079a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80079aa:	0c2d      	lsrs	r5, r5, #16
 80079ac:	fb02 c505 	mla	r5, r2, r5, ip
 80079b0:	b289      	uxth	r1, r1
 80079b2:	3301      	adds	r3, #1
 80079b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80079b8:	429e      	cmp	r6, r3
 80079ba:	f840 1b04 	str.w	r1, [r0], #4
 80079be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80079c2:	dcec      	bgt.n	800799e <__multadd+0x12>
 80079c4:	f1b8 0f00 	cmp.w	r8, #0
 80079c8:	d022      	beq.n	8007a10 <__multadd+0x84>
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	42b3      	cmp	r3, r6
 80079ce:	dc19      	bgt.n	8007a04 <__multadd+0x78>
 80079d0:	6861      	ldr	r1, [r4, #4]
 80079d2:	4638      	mov	r0, r7
 80079d4:	3101      	adds	r1, #1
 80079d6:	f7ff ff77 	bl	80078c8 <_Balloc>
 80079da:	4605      	mov	r5, r0
 80079dc:	b928      	cbnz	r0, 80079ea <__multadd+0x5e>
 80079de:	4602      	mov	r2, r0
 80079e0:	4b0d      	ldr	r3, [pc, #52]	; (8007a18 <__multadd+0x8c>)
 80079e2:	480e      	ldr	r0, [pc, #56]	; (8007a1c <__multadd+0x90>)
 80079e4:	21b5      	movs	r1, #181	; 0xb5
 80079e6:	f000 fe77 	bl	80086d8 <__assert_func>
 80079ea:	6922      	ldr	r2, [r4, #16]
 80079ec:	3202      	adds	r2, #2
 80079ee:	f104 010c 	add.w	r1, r4, #12
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	300c      	adds	r0, #12
 80079f6:	f7ff ff59 	bl	80078ac <memcpy>
 80079fa:	4621      	mov	r1, r4
 80079fc:	4638      	mov	r0, r7
 80079fe:	f7ff ffa3 	bl	8007948 <_Bfree>
 8007a02:	462c      	mov	r4, r5
 8007a04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a08:	3601      	adds	r6, #1
 8007a0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a0e:	6126      	str	r6, [r4, #16]
 8007a10:	4620      	mov	r0, r4
 8007a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a16:	bf00      	nop
 8007a18:	0800948c 	.word	0x0800948c
 8007a1c:	0800951c 	.word	0x0800951c

08007a20 <__s2b>:
 8007a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	4615      	mov	r5, r2
 8007a28:	461f      	mov	r7, r3
 8007a2a:	2209      	movs	r2, #9
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	4606      	mov	r6, r0
 8007a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a34:	2100      	movs	r1, #0
 8007a36:	2201      	movs	r2, #1
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	db09      	blt.n	8007a50 <__s2b+0x30>
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff ff43 	bl	80078c8 <_Balloc>
 8007a42:	b940      	cbnz	r0, 8007a56 <__s2b+0x36>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <__s2b+0x8c>)
 8007a48:	4819      	ldr	r0, [pc, #100]	; (8007ab0 <__s2b+0x90>)
 8007a4a:	21ce      	movs	r1, #206	; 0xce
 8007a4c:	f000 fe44 	bl	80086d8 <__assert_func>
 8007a50:	0052      	lsls	r2, r2, #1
 8007a52:	3101      	adds	r1, #1
 8007a54:	e7f0      	b.n	8007a38 <__s2b+0x18>
 8007a56:	9b08      	ldr	r3, [sp, #32]
 8007a58:	6143      	str	r3, [r0, #20]
 8007a5a:	2d09      	cmp	r5, #9
 8007a5c:	f04f 0301 	mov.w	r3, #1
 8007a60:	6103      	str	r3, [r0, #16]
 8007a62:	dd16      	ble.n	8007a92 <__s2b+0x72>
 8007a64:	f104 0909 	add.w	r9, r4, #9
 8007a68:	46c8      	mov	r8, r9
 8007a6a:	442c      	add	r4, r5
 8007a6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a70:	4601      	mov	r1, r0
 8007a72:	3b30      	subs	r3, #48	; 0x30
 8007a74:	220a      	movs	r2, #10
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7ff ff88 	bl	800798c <__multadd>
 8007a7c:	45a0      	cmp	r8, r4
 8007a7e:	d1f5      	bne.n	8007a6c <__s2b+0x4c>
 8007a80:	f1a5 0408 	sub.w	r4, r5, #8
 8007a84:	444c      	add	r4, r9
 8007a86:	1b2d      	subs	r5, r5, r4
 8007a88:	1963      	adds	r3, r4, r5
 8007a8a:	42bb      	cmp	r3, r7
 8007a8c:	db04      	blt.n	8007a98 <__s2b+0x78>
 8007a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a92:	340a      	adds	r4, #10
 8007a94:	2509      	movs	r5, #9
 8007a96:	e7f6      	b.n	8007a86 <__s2b+0x66>
 8007a98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a9c:	4601      	mov	r1, r0
 8007a9e:	3b30      	subs	r3, #48	; 0x30
 8007aa0:	220a      	movs	r2, #10
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff72 	bl	800798c <__multadd>
 8007aa8:	e7ee      	b.n	8007a88 <__s2b+0x68>
 8007aaa:	bf00      	nop
 8007aac:	0800948c 	.word	0x0800948c
 8007ab0:	0800951c 	.word	0x0800951c

08007ab4 <__hi0bits>:
 8007ab4:	0c03      	lsrs	r3, r0, #16
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	b9d3      	cbnz	r3, 8007af0 <__hi0bits+0x3c>
 8007aba:	0400      	lsls	r0, r0, #16
 8007abc:	2310      	movs	r3, #16
 8007abe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ac2:	bf04      	itt	eq
 8007ac4:	0200      	lsleq	r0, r0, #8
 8007ac6:	3308      	addeq	r3, #8
 8007ac8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007acc:	bf04      	itt	eq
 8007ace:	0100      	lsleq	r0, r0, #4
 8007ad0:	3304      	addeq	r3, #4
 8007ad2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ad6:	bf04      	itt	eq
 8007ad8:	0080      	lsleq	r0, r0, #2
 8007ada:	3302      	addeq	r3, #2
 8007adc:	2800      	cmp	r0, #0
 8007ade:	db05      	blt.n	8007aec <__hi0bits+0x38>
 8007ae0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ae4:	f103 0301 	add.w	r3, r3, #1
 8007ae8:	bf08      	it	eq
 8007aea:	2320      	moveq	r3, #32
 8007aec:	4618      	mov	r0, r3
 8007aee:	4770      	bx	lr
 8007af0:	2300      	movs	r3, #0
 8007af2:	e7e4      	b.n	8007abe <__hi0bits+0xa>

08007af4 <__lo0bits>:
 8007af4:	6803      	ldr	r3, [r0, #0]
 8007af6:	f013 0207 	ands.w	r2, r3, #7
 8007afa:	4601      	mov	r1, r0
 8007afc:	d00b      	beq.n	8007b16 <__lo0bits+0x22>
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d424      	bmi.n	8007b4c <__lo0bits+0x58>
 8007b02:	0798      	lsls	r0, r3, #30
 8007b04:	bf49      	itett	mi
 8007b06:	085b      	lsrmi	r3, r3, #1
 8007b08:	089b      	lsrpl	r3, r3, #2
 8007b0a:	2001      	movmi	r0, #1
 8007b0c:	600b      	strmi	r3, [r1, #0]
 8007b0e:	bf5c      	itt	pl
 8007b10:	600b      	strpl	r3, [r1, #0]
 8007b12:	2002      	movpl	r0, #2
 8007b14:	4770      	bx	lr
 8007b16:	b298      	uxth	r0, r3
 8007b18:	b9b0      	cbnz	r0, 8007b48 <__lo0bits+0x54>
 8007b1a:	0c1b      	lsrs	r3, r3, #16
 8007b1c:	2010      	movs	r0, #16
 8007b1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b22:	bf04      	itt	eq
 8007b24:	0a1b      	lsreq	r3, r3, #8
 8007b26:	3008      	addeq	r0, #8
 8007b28:	071a      	lsls	r2, r3, #28
 8007b2a:	bf04      	itt	eq
 8007b2c:	091b      	lsreq	r3, r3, #4
 8007b2e:	3004      	addeq	r0, #4
 8007b30:	079a      	lsls	r2, r3, #30
 8007b32:	bf04      	itt	eq
 8007b34:	089b      	lsreq	r3, r3, #2
 8007b36:	3002      	addeq	r0, #2
 8007b38:	07da      	lsls	r2, r3, #31
 8007b3a:	d403      	bmi.n	8007b44 <__lo0bits+0x50>
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	f100 0001 	add.w	r0, r0, #1
 8007b42:	d005      	beq.n	8007b50 <__lo0bits+0x5c>
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	4770      	bx	lr
 8007b48:	4610      	mov	r0, r2
 8007b4a:	e7e8      	b.n	8007b1e <__lo0bits+0x2a>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	4770      	bx	lr
 8007b50:	2020      	movs	r0, #32
 8007b52:	4770      	bx	lr

08007b54 <__i2b>:
 8007b54:	b510      	push	{r4, lr}
 8007b56:	460c      	mov	r4, r1
 8007b58:	2101      	movs	r1, #1
 8007b5a:	f7ff feb5 	bl	80078c8 <_Balloc>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	b928      	cbnz	r0, 8007b6e <__i2b+0x1a>
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <__i2b+0x24>)
 8007b64:	4805      	ldr	r0, [pc, #20]	; (8007b7c <__i2b+0x28>)
 8007b66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b6a:	f000 fdb5 	bl	80086d8 <__assert_func>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	6144      	str	r4, [r0, #20]
 8007b72:	6103      	str	r3, [r0, #16]
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	bf00      	nop
 8007b78:	0800948c 	.word	0x0800948c
 8007b7c:	0800951c 	.word	0x0800951c

08007b80 <__multiply>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4614      	mov	r4, r2
 8007b86:	690a      	ldr	r2, [r1, #16]
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	bfb8      	it	lt
 8007b8e:	460b      	movlt	r3, r1
 8007b90:	460d      	mov	r5, r1
 8007b92:	bfbc      	itt	lt
 8007b94:	4625      	movlt	r5, r4
 8007b96:	461c      	movlt	r4, r3
 8007b98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007ba0:	68ab      	ldr	r3, [r5, #8]
 8007ba2:	6869      	ldr	r1, [r5, #4]
 8007ba4:	eb0a 0709 	add.w	r7, sl, r9
 8007ba8:	42bb      	cmp	r3, r7
 8007baa:	b085      	sub	sp, #20
 8007bac:	bfb8      	it	lt
 8007bae:	3101      	addlt	r1, #1
 8007bb0:	f7ff fe8a 	bl	80078c8 <_Balloc>
 8007bb4:	b930      	cbnz	r0, 8007bc4 <__multiply+0x44>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <__multiply+0x144>)
 8007bba:	4843      	ldr	r0, [pc, #268]	; (8007cc8 <__multiply+0x148>)
 8007bbc:	f240 115d 	movw	r1, #349	; 0x15d
 8007bc0:	f000 fd8a 	bl	80086d8 <__assert_func>
 8007bc4:	f100 0614 	add.w	r6, r0, #20
 8007bc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007bcc:	4633      	mov	r3, r6
 8007bce:	2200      	movs	r2, #0
 8007bd0:	4543      	cmp	r3, r8
 8007bd2:	d31e      	bcc.n	8007c12 <__multiply+0x92>
 8007bd4:	f105 0c14 	add.w	ip, r5, #20
 8007bd8:	f104 0314 	add.w	r3, r4, #20
 8007bdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007be0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007be4:	9202      	str	r2, [sp, #8]
 8007be6:	ebac 0205 	sub.w	r2, ip, r5
 8007bea:	3a15      	subs	r2, #21
 8007bec:	f022 0203 	bic.w	r2, r2, #3
 8007bf0:	3204      	adds	r2, #4
 8007bf2:	f105 0115 	add.w	r1, r5, #21
 8007bf6:	458c      	cmp	ip, r1
 8007bf8:	bf38      	it	cc
 8007bfa:	2204      	movcc	r2, #4
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	9a02      	ldr	r2, [sp, #8]
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d808      	bhi.n	8007c18 <__multiply+0x98>
 8007c06:	2f00      	cmp	r7, #0
 8007c08:	dc55      	bgt.n	8007cb6 <__multiply+0x136>
 8007c0a:	6107      	str	r7, [r0, #16]
 8007c0c:	b005      	add	sp, #20
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	f843 2b04 	str.w	r2, [r3], #4
 8007c16:	e7db      	b.n	8007bd0 <__multiply+0x50>
 8007c18:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c1c:	f1ba 0f00 	cmp.w	sl, #0
 8007c20:	d020      	beq.n	8007c64 <__multiply+0xe4>
 8007c22:	f105 0e14 	add.w	lr, r5, #20
 8007c26:	46b1      	mov	r9, r6
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c2e:	f8d9 b000 	ldr.w	fp, [r9]
 8007c32:	b2a1      	uxth	r1, r4
 8007c34:	fa1f fb8b 	uxth.w	fp, fp
 8007c38:	fb0a b101 	mla	r1, sl, r1, fp
 8007c3c:	4411      	add	r1, r2
 8007c3e:	f8d9 2000 	ldr.w	r2, [r9]
 8007c42:	0c24      	lsrs	r4, r4, #16
 8007c44:	0c12      	lsrs	r2, r2, #16
 8007c46:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c4e:	b289      	uxth	r1, r1
 8007c50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c54:	45f4      	cmp	ip, lr
 8007c56:	f849 1b04 	str.w	r1, [r9], #4
 8007c5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c5e:	d8e4      	bhi.n	8007c2a <__multiply+0xaa>
 8007c60:	9901      	ldr	r1, [sp, #4]
 8007c62:	5072      	str	r2, [r6, r1]
 8007c64:	9a03      	ldr	r2, [sp, #12]
 8007c66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	f1b9 0f00 	cmp.w	r9, #0
 8007c70:	d01f      	beq.n	8007cb2 <__multiply+0x132>
 8007c72:	6834      	ldr	r4, [r6, #0]
 8007c74:	f105 0114 	add.w	r1, r5, #20
 8007c78:	46b6      	mov	lr, r6
 8007c7a:	f04f 0a00 	mov.w	sl, #0
 8007c7e:	880a      	ldrh	r2, [r1, #0]
 8007c80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c84:	fb09 b202 	mla	r2, r9, r2, fp
 8007c88:	4492      	add	sl, r2
 8007c8a:	b2a4      	uxth	r4, r4
 8007c8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c90:	f84e 4b04 	str.w	r4, [lr], #4
 8007c94:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c98:	f8be 2000 	ldrh.w	r2, [lr]
 8007c9c:	0c24      	lsrs	r4, r4, #16
 8007c9e:	fb09 2404 	mla	r4, r9, r4, r2
 8007ca2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007ca6:	458c      	cmp	ip, r1
 8007ca8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007cac:	d8e7      	bhi.n	8007c7e <__multiply+0xfe>
 8007cae:	9a01      	ldr	r2, [sp, #4]
 8007cb0:	50b4      	str	r4, [r6, r2]
 8007cb2:	3604      	adds	r6, #4
 8007cb4:	e7a3      	b.n	8007bfe <__multiply+0x7e>
 8007cb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1a5      	bne.n	8007c0a <__multiply+0x8a>
 8007cbe:	3f01      	subs	r7, #1
 8007cc0:	e7a1      	b.n	8007c06 <__multiply+0x86>
 8007cc2:	bf00      	nop
 8007cc4:	0800948c 	.word	0x0800948c
 8007cc8:	0800951c 	.word	0x0800951c

08007ccc <__pow5mult>:
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	4615      	mov	r5, r2
 8007cd2:	f012 0203 	ands.w	r2, r2, #3
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	d007      	beq.n	8007cec <__pow5mult+0x20>
 8007cdc:	4c25      	ldr	r4, [pc, #148]	; (8007d74 <__pow5mult+0xa8>)
 8007cde:	3a01      	subs	r2, #1
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ce6:	f7ff fe51 	bl	800798c <__multadd>
 8007cea:	4607      	mov	r7, r0
 8007cec:	10ad      	asrs	r5, r5, #2
 8007cee:	d03d      	beq.n	8007d6c <__pow5mult+0xa0>
 8007cf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cf2:	b97c      	cbnz	r4, 8007d14 <__pow5mult+0x48>
 8007cf4:	2010      	movs	r0, #16
 8007cf6:	f7ff fdbf 	bl	8007878 <malloc>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6270      	str	r0, [r6, #36]	; 0x24
 8007cfe:	b928      	cbnz	r0, 8007d0c <__pow5mult+0x40>
 8007d00:	4b1d      	ldr	r3, [pc, #116]	; (8007d78 <__pow5mult+0xac>)
 8007d02:	481e      	ldr	r0, [pc, #120]	; (8007d7c <__pow5mult+0xb0>)
 8007d04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d08:	f000 fce6 	bl	80086d8 <__assert_func>
 8007d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d10:	6004      	str	r4, [r0, #0]
 8007d12:	60c4      	str	r4, [r0, #12]
 8007d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d1c:	b94c      	cbnz	r4, 8007d32 <__pow5mult+0x66>
 8007d1e:	f240 2171 	movw	r1, #625	; 0x271
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7ff ff16 	bl	8007b54 <__i2b>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d2e:	4604      	mov	r4, r0
 8007d30:	6003      	str	r3, [r0, #0]
 8007d32:	f04f 0900 	mov.w	r9, #0
 8007d36:	07eb      	lsls	r3, r5, #31
 8007d38:	d50a      	bpl.n	8007d50 <__pow5mult+0x84>
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff1e 	bl	8007b80 <__multiply>
 8007d44:	4639      	mov	r1, r7
 8007d46:	4680      	mov	r8, r0
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f7ff fdfd 	bl	8007948 <_Bfree>
 8007d4e:	4647      	mov	r7, r8
 8007d50:	106d      	asrs	r5, r5, #1
 8007d52:	d00b      	beq.n	8007d6c <__pow5mult+0xa0>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	b938      	cbnz	r0, 8007d68 <__pow5mult+0x9c>
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff ff0f 	bl	8007b80 <__multiply>
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	f8c0 9000 	str.w	r9, [r0]
 8007d68:	4604      	mov	r4, r0
 8007d6a:	e7e4      	b.n	8007d36 <__pow5mult+0x6a>
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d72:	bf00      	nop
 8007d74:	08009670 	.word	0x08009670
 8007d78:	08009416 	.word	0x08009416
 8007d7c:	0800951c 	.word	0x0800951c

08007d80 <__lshift>:
 8007d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	460c      	mov	r4, r1
 8007d86:	6849      	ldr	r1, [r1, #4]
 8007d88:	6923      	ldr	r3, [r4, #16]
 8007d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	4607      	mov	r7, r0
 8007d92:	4691      	mov	r9, r2
 8007d94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d98:	f108 0601 	add.w	r6, r8, #1
 8007d9c:	42b3      	cmp	r3, r6
 8007d9e:	db0b      	blt.n	8007db8 <__lshift+0x38>
 8007da0:	4638      	mov	r0, r7
 8007da2:	f7ff fd91 	bl	80078c8 <_Balloc>
 8007da6:	4605      	mov	r5, r0
 8007da8:	b948      	cbnz	r0, 8007dbe <__lshift+0x3e>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b28      	ldr	r3, [pc, #160]	; (8007e50 <__lshift+0xd0>)
 8007dae:	4829      	ldr	r0, [pc, #164]	; (8007e54 <__lshift+0xd4>)
 8007db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007db4:	f000 fc90 	bl	80086d8 <__assert_func>
 8007db8:	3101      	adds	r1, #1
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	e7ee      	b.n	8007d9c <__lshift+0x1c>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f100 0114 	add.w	r1, r0, #20
 8007dc4:	f100 0210 	add.w	r2, r0, #16
 8007dc8:	4618      	mov	r0, r3
 8007dca:	4553      	cmp	r3, sl
 8007dcc:	db33      	blt.n	8007e36 <__lshift+0xb6>
 8007dce:	6920      	ldr	r0, [r4, #16]
 8007dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dd4:	f104 0314 	add.w	r3, r4, #20
 8007dd8:	f019 091f 	ands.w	r9, r9, #31
 8007ddc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007de0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007de4:	d02b      	beq.n	8007e3e <__lshift+0xbe>
 8007de6:	f1c9 0e20 	rsb	lr, r9, #32
 8007dea:	468a      	mov	sl, r1
 8007dec:	2200      	movs	r2, #0
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	fa00 f009 	lsl.w	r0, r0, r9
 8007df4:	4302      	orrs	r2, r0
 8007df6:	f84a 2b04 	str.w	r2, [sl], #4
 8007dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfe:	459c      	cmp	ip, r3
 8007e00:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e04:	d8f3      	bhi.n	8007dee <__lshift+0x6e>
 8007e06:	ebac 0304 	sub.w	r3, ip, r4
 8007e0a:	3b15      	subs	r3, #21
 8007e0c:	f023 0303 	bic.w	r3, r3, #3
 8007e10:	3304      	adds	r3, #4
 8007e12:	f104 0015 	add.w	r0, r4, #21
 8007e16:	4584      	cmp	ip, r0
 8007e18:	bf38      	it	cc
 8007e1a:	2304      	movcc	r3, #4
 8007e1c:	50ca      	str	r2, [r1, r3]
 8007e1e:	b10a      	cbz	r2, 8007e24 <__lshift+0xa4>
 8007e20:	f108 0602 	add.w	r6, r8, #2
 8007e24:	3e01      	subs	r6, #1
 8007e26:	4638      	mov	r0, r7
 8007e28:	612e      	str	r6, [r5, #16]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f7ff fd8c 	bl	8007948 <_Bfree>
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e36:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	e7c5      	b.n	8007dca <__lshift+0x4a>
 8007e3e:	3904      	subs	r1, #4
 8007e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e48:	459c      	cmp	ip, r3
 8007e4a:	d8f9      	bhi.n	8007e40 <__lshift+0xc0>
 8007e4c:	e7ea      	b.n	8007e24 <__lshift+0xa4>
 8007e4e:	bf00      	nop
 8007e50:	0800948c 	.word	0x0800948c
 8007e54:	0800951c 	.word	0x0800951c

08007e58 <__mcmp>:
 8007e58:	b530      	push	{r4, r5, lr}
 8007e5a:	6902      	ldr	r2, [r0, #16]
 8007e5c:	690c      	ldr	r4, [r1, #16]
 8007e5e:	1b12      	subs	r2, r2, r4
 8007e60:	d10e      	bne.n	8007e80 <__mcmp+0x28>
 8007e62:	f100 0314 	add.w	r3, r0, #20
 8007e66:	3114      	adds	r1, #20
 8007e68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e78:	42a5      	cmp	r5, r4
 8007e7a:	d003      	beq.n	8007e84 <__mcmp+0x2c>
 8007e7c:	d305      	bcc.n	8007e8a <__mcmp+0x32>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4610      	mov	r0, r2
 8007e82:	bd30      	pop	{r4, r5, pc}
 8007e84:	4283      	cmp	r3, r0
 8007e86:	d3f3      	bcc.n	8007e70 <__mcmp+0x18>
 8007e88:	e7fa      	b.n	8007e80 <__mcmp+0x28>
 8007e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8e:	e7f7      	b.n	8007e80 <__mcmp+0x28>

08007e90 <__mdiff>:
 8007e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	460c      	mov	r4, r1
 8007e96:	4606      	mov	r6, r0
 8007e98:	4611      	mov	r1, r2
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	4617      	mov	r7, r2
 8007e9e:	f7ff ffdb 	bl	8007e58 <__mcmp>
 8007ea2:	1e05      	subs	r5, r0, #0
 8007ea4:	d110      	bne.n	8007ec8 <__mdiff+0x38>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f7ff fd0d 	bl	80078c8 <_Balloc>
 8007eae:	b930      	cbnz	r0, 8007ebe <__mdiff+0x2e>
 8007eb0:	4b39      	ldr	r3, [pc, #228]	; (8007f98 <__mdiff+0x108>)
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	f240 2132 	movw	r1, #562	; 0x232
 8007eb8:	4838      	ldr	r0, [pc, #224]	; (8007f9c <__mdiff+0x10c>)
 8007eba:	f000 fc0d 	bl	80086d8 <__assert_func>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec8:	bfa4      	itt	ge
 8007eca:	463b      	movge	r3, r7
 8007ecc:	4627      	movge	r7, r4
 8007ece:	4630      	mov	r0, r6
 8007ed0:	6879      	ldr	r1, [r7, #4]
 8007ed2:	bfa6      	itte	ge
 8007ed4:	461c      	movge	r4, r3
 8007ed6:	2500      	movge	r5, #0
 8007ed8:	2501      	movlt	r5, #1
 8007eda:	f7ff fcf5 	bl	80078c8 <_Balloc>
 8007ede:	b920      	cbnz	r0, 8007eea <__mdiff+0x5a>
 8007ee0:	4b2d      	ldr	r3, [pc, #180]	; (8007f98 <__mdiff+0x108>)
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ee8:	e7e6      	b.n	8007eb8 <__mdiff+0x28>
 8007eea:	693e      	ldr	r6, [r7, #16]
 8007eec:	60c5      	str	r5, [r0, #12]
 8007eee:	6925      	ldr	r5, [r4, #16]
 8007ef0:	f107 0114 	add.w	r1, r7, #20
 8007ef4:	f104 0914 	add.w	r9, r4, #20
 8007ef8:	f100 0e14 	add.w	lr, r0, #20
 8007efc:	f107 0210 	add.w	r2, r7, #16
 8007f00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007f04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007f08:	46f2      	mov	sl, lr
 8007f0a:	2700      	movs	r7, #0
 8007f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f14:	fa1f f883 	uxth.w	r8, r3
 8007f18:	fa17 f78b 	uxtah	r7, r7, fp
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	eba7 0808 	sub.w	r8, r7, r8
 8007f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f2a:	fa1f f888 	uxth.w	r8, r8
 8007f2e:	141f      	asrs	r7, r3, #16
 8007f30:	454d      	cmp	r5, r9
 8007f32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f36:	f84a 3b04 	str.w	r3, [sl], #4
 8007f3a:	d8e7      	bhi.n	8007f0c <__mdiff+0x7c>
 8007f3c:	1b2b      	subs	r3, r5, r4
 8007f3e:	3b15      	subs	r3, #21
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	3304      	adds	r3, #4
 8007f46:	3415      	adds	r4, #21
 8007f48:	42a5      	cmp	r5, r4
 8007f4a:	bf38      	it	cc
 8007f4c:	2304      	movcc	r3, #4
 8007f4e:	4419      	add	r1, r3
 8007f50:	4473      	add	r3, lr
 8007f52:	469e      	mov	lr, r3
 8007f54:	460d      	mov	r5, r1
 8007f56:	4565      	cmp	r5, ip
 8007f58:	d30e      	bcc.n	8007f78 <__mdiff+0xe8>
 8007f5a:	f10c 0203 	add.w	r2, ip, #3
 8007f5e:	1a52      	subs	r2, r2, r1
 8007f60:	f022 0203 	bic.w	r2, r2, #3
 8007f64:	3903      	subs	r1, #3
 8007f66:	458c      	cmp	ip, r1
 8007f68:	bf38      	it	cc
 8007f6a:	2200      	movcc	r2, #0
 8007f6c:	441a      	add	r2, r3
 8007f6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f72:	b17b      	cbz	r3, 8007f94 <__mdiff+0x104>
 8007f74:	6106      	str	r6, [r0, #16]
 8007f76:	e7a5      	b.n	8007ec4 <__mdiff+0x34>
 8007f78:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f7c:	fa17 f488 	uxtah	r4, r7, r8
 8007f80:	1422      	asrs	r2, r4, #16
 8007f82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007f86:	b2a4      	uxth	r4, r4
 8007f88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f8c:	f84e 4b04 	str.w	r4, [lr], #4
 8007f90:	1417      	asrs	r7, r2, #16
 8007f92:	e7e0      	b.n	8007f56 <__mdiff+0xc6>
 8007f94:	3e01      	subs	r6, #1
 8007f96:	e7ea      	b.n	8007f6e <__mdiff+0xde>
 8007f98:	0800948c 	.word	0x0800948c
 8007f9c:	0800951c 	.word	0x0800951c

08007fa0 <__ulp>:
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	ed8d 0b00 	vstr	d0, [sp]
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	4912      	ldr	r1, [pc, #72]	; (8007ff4 <__ulp+0x54>)
 8007faa:	4019      	ands	r1, r3
 8007fac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	dd05      	ble.n	8007fc0 <__ulp+0x20>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	ec43 2b10 	vmov	d0, r2, r3
 8007fbc:	b002      	add	sp, #8
 8007fbe:	4770      	bx	lr
 8007fc0:	4249      	negs	r1, r1
 8007fc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007fc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	da04      	bge.n	8007fde <__ulp+0x3e>
 8007fd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007fd8:	fa41 f300 	asr.w	r3, r1, r0
 8007fdc:	e7ec      	b.n	8007fb8 <__ulp+0x18>
 8007fde:	f1a0 0114 	sub.w	r1, r0, #20
 8007fe2:	291e      	cmp	r1, #30
 8007fe4:	bfda      	itte	le
 8007fe6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007fea:	fa20 f101 	lsrle.w	r1, r0, r1
 8007fee:	2101      	movgt	r1, #1
 8007ff0:	460a      	mov	r2, r1
 8007ff2:	e7e1      	b.n	8007fb8 <__ulp+0x18>
 8007ff4:	7ff00000 	.word	0x7ff00000

08007ff8 <__b2d>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	6905      	ldr	r5, [r0, #16]
 8007ffc:	f100 0714 	add.w	r7, r0, #20
 8008000:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008004:	1f2e      	subs	r6, r5, #4
 8008006:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800800a:	4620      	mov	r0, r4
 800800c:	f7ff fd52 	bl	8007ab4 <__hi0bits>
 8008010:	f1c0 0320 	rsb	r3, r0, #32
 8008014:	280a      	cmp	r0, #10
 8008016:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008094 <__b2d+0x9c>
 800801a:	600b      	str	r3, [r1, #0]
 800801c:	dc14      	bgt.n	8008048 <__b2d+0x50>
 800801e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008022:	fa24 f10e 	lsr.w	r1, r4, lr
 8008026:	42b7      	cmp	r7, r6
 8008028:	ea41 030c 	orr.w	r3, r1, ip
 800802c:	bf34      	ite	cc
 800802e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008032:	2100      	movcs	r1, #0
 8008034:	3015      	adds	r0, #21
 8008036:	fa04 f000 	lsl.w	r0, r4, r0
 800803a:	fa21 f10e 	lsr.w	r1, r1, lr
 800803e:	ea40 0201 	orr.w	r2, r0, r1
 8008042:	ec43 2b10 	vmov	d0, r2, r3
 8008046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008048:	42b7      	cmp	r7, r6
 800804a:	bf3a      	itte	cc
 800804c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008050:	f1a5 0608 	subcc.w	r6, r5, #8
 8008054:	2100      	movcs	r1, #0
 8008056:	380b      	subs	r0, #11
 8008058:	d017      	beq.n	800808a <__b2d+0x92>
 800805a:	f1c0 0c20 	rsb	ip, r0, #32
 800805e:	fa04 f500 	lsl.w	r5, r4, r0
 8008062:	42be      	cmp	r6, r7
 8008064:	fa21 f40c 	lsr.w	r4, r1, ip
 8008068:	ea45 0504 	orr.w	r5, r5, r4
 800806c:	bf8c      	ite	hi
 800806e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008072:	2400      	movls	r4, #0
 8008074:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008078:	fa01 f000 	lsl.w	r0, r1, r0
 800807c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008080:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008084:	ea40 0204 	orr.w	r2, r0, r4
 8008088:	e7db      	b.n	8008042 <__b2d+0x4a>
 800808a:	ea44 030c 	orr.w	r3, r4, ip
 800808e:	460a      	mov	r2, r1
 8008090:	e7d7      	b.n	8008042 <__b2d+0x4a>
 8008092:	bf00      	nop
 8008094:	3ff00000 	.word	0x3ff00000

08008098 <__d2b>:
 8008098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4689      	mov	r9, r1
 800809e:	2101      	movs	r1, #1
 80080a0:	ec57 6b10 	vmov	r6, r7, d0
 80080a4:	4690      	mov	r8, r2
 80080a6:	f7ff fc0f 	bl	80078c8 <_Balloc>
 80080aa:	4604      	mov	r4, r0
 80080ac:	b930      	cbnz	r0, 80080bc <__d2b+0x24>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <__d2b+0xb0>)
 80080b2:	4826      	ldr	r0, [pc, #152]	; (800814c <__d2b+0xb4>)
 80080b4:	f240 310a 	movw	r1, #778	; 0x30a
 80080b8:	f000 fb0e 	bl	80086d8 <__assert_func>
 80080bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c4:	bb35      	cbnz	r5, 8008114 <__d2b+0x7c>
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	d028      	beq.n	800811e <__d2b+0x86>
 80080cc:	4668      	mov	r0, sp
 80080ce:	9600      	str	r6, [sp, #0]
 80080d0:	f7ff fd10 	bl	8007af4 <__lo0bits>
 80080d4:	9900      	ldr	r1, [sp, #0]
 80080d6:	b300      	cbz	r0, 800811a <__d2b+0x82>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	f1c0 0320 	rsb	r3, r0, #32
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	430b      	orrs	r3, r1
 80080e4:	40c2      	lsrs	r2, r0
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	61a3      	str	r3, [r4, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf14      	ite	ne
 80080f2:	2202      	movne	r2, #2
 80080f4:	2201      	moveq	r2, #1
 80080f6:	6122      	str	r2, [r4, #16]
 80080f8:	b1d5      	cbz	r5, 8008130 <__d2b+0x98>
 80080fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080fe:	4405      	add	r5, r0
 8008100:	f8c9 5000 	str.w	r5, [r9]
 8008104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008108:	f8c8 0000 	str.w	r0, [r8]
 800810c:	4620      	mov	r0, r4
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008118:	e7d5      	b.n	80080c6 <__d2b+0x2e>
 800811a:	6161      	str	r1, [r4, #20]
 800811c:	e7e5      	b.n	80080ea <__d2b+0x52>
 800811e:	a801      	add	r0, sp, #4
 8008120:	f7ff fce8 	bl	8007af4 <__lo0bits>
 8008124:	9b01      	ldr	r3, [sp, #4]
 8008126:	6163      	str	r3, [r4, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	3020      	adds	r0, #32
 800812e:	e7e3      	b.n	80080f8 <__d2b+0x60>
 8008130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008138:	f8c9 0000 	str.w	r0, [r9]
 800813c:	6918      	ldr	r0, [r3, #16]
 800813e:	f7ff fcb9 	bl	8007ab4 <__hi0bits>
 8008142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008146:	e7df      	b.n	8008108 <__d2b+0x70>
 8008148:	0800948c 	.word	0x0800948c
 800814c:	0800951c 	.word	0x0800951c

08008150 <__ratio>:
 8008150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	4688      	mov	r8, r1
 8008156:	4669      	mov	r1, sp
 8008158:	4681      	mov	r9, r0
 800815a:	f7ff ff4d 	bl	8007ff8 <__b2d>
 800815e:	a901      	add	r1, sp, #4
 8008160:	4640      	mov	r0, r8
 8008162:	ec55 4b10 	vmov	r4, r5, d0
 8008166:	f7ff ff47 	bl	8007ff8 <__b2d>
 800816a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800816e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008172:	eba3 0c02 	sub.w	ip, r3, r2
 8008176:	e9dd 3200 	ldrd	r3, r2, [sp]
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008180:	ec51 0b10 	vmov	r0, r1, d0
 8008184:	2b00      	cmp	r3, #0
 8008186:	bfd6      	itet	le
 8008188:	460a      	movle	r2, r1
 800818a:	462a      	movgt	r2, r5
 800818c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008190:	468b      	mov	fp, r1
 8008192:	462f      	mov	r7, r5
 8008194:	bfd4      	ite	le
 8008196:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800819a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800819e:	4620      	mov	r0, r4
 80081a0:	ee10 2a10 	vmov	r2, s0
 80081a4:	465b      	mov	r3, fp
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fb58 	bl	800085c <__aeabi_ddiv>
 80081ac:	ec41 0b10 	vmov	d0, r0, r1
 80081b0:	b003      	add	sp, #12
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081b6 <__copybits>:
 80081b6:	3901      	subs	r1, #1
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	1149      	asrs	r1, r1, #5
 80081bc:	6914      	ldr	r4, [r2, #16]
 80081be:	3101      	adds	r1, #1
 80081c0:	f102 0314 	add.w	r3, r2, #20
 80081c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081cc:	1f05      	subs	r5, r0, #4
 80081ce:	42a3      	cmp	r3, r4
 80081d0:	d30c      	bcc.n	80081ec <__copybits+0x36>
 80081d2:	1aa3      	subs	r3, r4, r2
 80081d4:	3b11      	subs	r3, #17
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	3211      	adds	r2, #17
 80081dc:	42a2      	cmp	r2, r4
 80081de:	bf88      	it	hi
 80081e0:	2300      	movhi	r3, #0
 80081e2:	4418      	add	r0, r3
 80081e4:	2300      	movs	r3, #0
 80081e6:	4288      	cmp	r0, r1
 80081e8:	d305      	bcc.n	80081f6 <__copybits+0x40>
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80081f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80081f4:	e7eb      	b.n	80081ce <__copybits+0x18>
 80081f6:	f840 3b04 	str.w	r3, [r0], #4
 80081fa:	e7f4      	b.n	80081e6 <__copybits+0x30>

080081fc <__any_on>:
 80081fc:	f100 0214 	add.w	r2, r0, #20
 8008200:	6900      	ldr	r0, [r0, #16]
 8008202:	114b      	asrs	r3, r1, #5
 8008204:	4298      	cmp	r0, r3
 8008206:	b510      	push	{r4, lr}
 8008208:	db11      	blt.n	800822e <__any_on+0x32>
 800820a:	dd0a      	ble.n	8008222 <__any_on+0x26>
 800820c:	f011 011f 	ands.w	r1, r1, #31
 8008210:	d007      	beq.n	8008222 <__any_on+0x26>
 8008212:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008216:	fa24 f001 	lsr.w	r0, r4, r1
 800821a:	fa00 f101 	lsl.w	r1, r0, r1
 800821e:	428c      	cmp	r4, r1
 8008220:	d10b      	bne.n	800823a <__any_on+0x3e>
 8008222:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008226:	4293      	cmp	r3, r2
 8008228:	d803      	bhi.n	8008232 <__any_on+0x36>
 800822a:	2000      	movs	r0, #0
 800822c:	bd10      	pop	{r4, pc}
 800822e:	4603      	mov	r3, r0
 8008230:	e7f7      	b.n	8008222 <__any_on+0x26>
 8008232:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008236:	2900      	cmp	r1, #0
 8008238:	d0f5      	beq.n	8008226 <__any_on+0x2a>
 800823a:	2001      	movs	r0, #1
 800823c:	e7f6      	b.n	800822c <__any_on+0x30>

0800823e <_calloc_r>:
 800823e:	b513      	push	{r0, r1, r4, lr}
 8008240:	434a      	muls	r2, r1
 8008242:	4611      	mov	r1, r2
 8008244:	9201      	str	r2, [sp, #4]
 8008246:	f000 f859 	bl	80082fc <_malloc_r>
 800824a:	4604      	mov	r4, r0
 800824c:	b118      	cbz	r0, 8008256 <_calloc_r+0x18>
 800824e:	9a01      	ldr	r2, [sp, #4]
 8008250:	2100      	movs	r1, #0
 8008252:	f7fc fba9 	bl	80049a8 <memset>
 8008256:	4620      	mov	r0, r4
 8008258:	b002      	add	sp, #8
 800825a:	bd10      	pop	{r4, pc}

0800825c <_free_r>:
 800825c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800825e:	2900      	cmp	r1, #0
 8008260:	d048      	beq.n	80082f4 <_free_r+0x98>
 8008262:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f1a1 0404 	sub.w	r4, r1, #4
 800826e:	bfb8      	it	lt
 8008270:	18e4      	addlt	r4, r4, r3
 8008272:	f000 fa7b 	bl	800876c <__malloc_lock>
 8008276:	4a20      	ldr	r2, [pc, #128]	; (80082f8 <_free_r+0x9c>)
 8008278:	9801      	ldr	r0, [sp, #4]
 800827a:	6813      	ldr	r3, [r2, #0]
 800827c:	4615      	mov	r5, r2
 800827e:	b933      	cbnz	r3, 800828e <_free_r+0x32>
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6014      	str	r4, [r2, #0]
 8008284:	b003      	add	sp, #12
 8008286:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800828a:	f000 ba75 	b.w	8008778 <__malloc_unlock>
 800828e:	42a3      	cmp	r3, r4
 8008290:	d90b      	bls.n	80082aa <_free_r+0x4e>
 8008292:	6821      	ldr	r1, [r4, #0]
 8008294:	1862      	adds	r2, r4, r1
 8008296:	4293      	cmp	r3, r2
 8008298:	bf04      	itt	eq
 800829a:	681a      	ldreq	r2, [r3, #0]
 800829c:	685b      	ldreq	r3, [r3, #4]
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	bf04      	itt	eq
 80082a2:	1852      	addeq	r2, r2, r1
 80082a4:	6022      	streq	r2, [r4, #0]
 80082a6:	602c      	str	r4, [r5, #0]
 80082a8:	e7ec      	b.n	8008284 <_free_r+0x28>
 80082aa:	461a      	mov	r2, r3
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	b10b      	cbz	r3, 80082b4 <_free_r+0x58>
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d9fa      	bls.n	80082aa <_free_r+0x4e>
 80082b4:	6811      	ldr	r1, [r2, #0]
 80082b6:	1855      	adds	r5, r2, r1
 80082b8:	42a5      	cmp	r5, r4
 80082ba:	d10b      	bne.n	80082d4 <_free_r+0x78>
 80082bc:	6824      	ldr	r4, [r4, #0]
 80082be:	4421      	add	r1, r4
 80082c0:	1854      	adds	r4, r2, r1
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	6011      	str	r1, [r2, #0]
 80082c6:	d1dd      	bne.n	8008284 <_free_r+0x28>
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	6053      	str	r3, [r2, #4]
 80082ce:	4421      	add	r1, r4
 80082d0:	6011      	str	r1, [r2, #0]
 80082d2:	e7d7      	b.n	8008284 <_free_r+0x28>
 80082d4:	d902      	bls.n	80082dc <_free_r+0x80>
 80082d6:	230c      	movs	r3, #12
 80082d8:	6003      	str	r3, [r0, #0]
 80082da:	e7d3      	b.n	8008284 <_free_r+0x28>
 80082dc:	6825      	ldr	r5, [r4, #0]
 80082de:	1961      	adds	r1, r4, r5
 80082e0:	428b      	cmp	r3, r1
 80082e2:	bf04      	itt	eq
 80082e4:	6819      	ldreq	r1, [r3, #0]
 80082e6:	685b      	ldreq	r3, [r3, #4]
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	bf04      	itt	eq
 80082ec:	1949      	addeq	r1, r1, r5
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	6054      	str	r4, [r2, #4]
 80082f2:	e7c7      	b.n	8008284 <_free_r+0x28>
 80082f4:	b003      	add	sp, #12
 80082f6:	bd30      	pop	{r4, r5, pc}
 80082f8:	20000224 	.word	0x20000224

080082fc <_malloc_r>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	1ccd      	adds	r5, r1, #3
 8008300:	f025 0503 	bic.w	r5, r5, #3
 8008304:	3508      	adds	r5, #8
 8008306:	2d0c      	cmp	r5, #12
 8008308:	bf38      	it	cc
 800830a:	250c      	movcc	r5, #12
 800830c:	2d00      	cmp	r5, #0
 800830e:	4606      	mov	r6, r0
 8008310:	db01      	blt.n	8008316 <_malloc_r+0x1a>
 8008312:	42a9      	cmp	r1, r5
 8008314:	d903      	bls.n	800831e <_malloc_r+0x22>
 8008316:	230c      	movs	r3, #12
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	2000      	movs	r0, #0
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	f000 fa25 	bl	800876c <__malloc_lock>
 8008322:	4921      	ldr	r1, [pc, #132]	; (80083a8 <_malloc_r+0xac>)
 8008324:	680a      	ldr	r2, [r1, #0]
 8008326:	4614      	mov	r4, r2
 8008328:	b99c      	cbnz	r4, 8008352 <_malloc_r+0x56>
 800832a:	4f20      	ldr	r7, [pc, #128]	; (80083ac <_malloc_r+0xb0>)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	b923      	cbnz	r3, 800833a <_malloc_r+0x3e>
 8008330:	4621      	mov	r1, r4
 8008332:	4630      	mov	r0, r6
 8008334:	f000 f9a0 	bl	8008678 <_sbrk_r>
 8008338:	6038      	str	r0, [r7, #0]
 800833a:	4629      	mov	r1, r5
 800833c:	4630      	mov	r0, r6
 800833e:	f000 f99b 	bl	8008678 <_sbrk_r>
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	d123      	bne.n	800838e <_malloc_r+0x92>
 8008346:	230c      	movs	r3, #12
 8008348:	6033      	str	r3, [r6, #0]
 800834a:	4630      	mov	r0, r6
 800834c:	f000 fa14 	bl	8008778 <__malloc_unlock>
 8008350:	e7e3      	b.n	800831a <_malloc_r+0x1e>
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	1b5b      	subs	r3, r3, r5
 8008356:	d417      	bmi.n	8008388 <_malloc_r+0x8c>
 8008358:	2b0b      	cmp	r3, #11
 800835a:	d903      	bls.n	8008364 <_malloc_r+0x68>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	441c      	add	r4, r3
 8008360:	6025      	str	r5, [r4, #0]
 8008362:	e004      	b.n	800836e <_malloc_r+0x72>
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	42a2      	cmp	r2, r4
 8008368:	bf0c      	ite	eq
 800836a:	600b      	streq	r3, [r1, #0]
 800836c:	6053      	strne	r3, [r2, #4]
 800836e:	4630      	mov	r0, r6
 8008370:	f000 fa02 	bl	8008778 <__malloc_unlock>
 8008374:	f104 000b 	add.w	r0, r4, #11
 8008378:	1d23      	adds	r3, r4, #4
 800837a:	f020 0007 	bic.w	r0, r0, #7
 800837e:	1ac2      	subs	r2, r0, r3
 8008380:	d0cc      	beq.n	800831c <_malloc_r+0x20>
 8008382:	1a1b      	subs	r3, r3, r0
 8008384:	50a3      	str	r3, [r4, r2]
 8008386:	e7c9      	b.n	800831c <_malloc_r+0x20>
 8008388:	4622      	mov	r2, r4
 800838a:	6864      	ldr	r4, [r4, #4]
 800838c:	e7cc      	b.n	8008328 <_malloc_r+0x2c>
 800838e:	1cc4      	adds	r4, r0, #3
 8008390:	f024 0403 	bic.w	r4, r4, #3
 8008394:	42a0      	cmp	r0, r4
 8008396:	d0e3      	beq.n	8008360 <_malloc_r+0x64>
 8008398:	1a21      	subs	r1, r4, r0
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f96c 	bl	8008678 <_sbrk_r>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d1dd      	bne.n	8008360 <_malloc_r+0x64>
 80083a4:	e7cf      	b.n	8008346 <_malloc_r+0x4a>
 80083a6:	bf00      	nop
 80083a8:	20000224 	.word	0x20000224
 80083ac:	20000228 	.word	0x20000228

080083b0 <__ssputs_r>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	688e      	ldr	r6, [r1, #8]
 80083b6:	429e      	cmp	r6, r3
 80083b8:	4682      	mov	sl, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4690      	mov	r8, r2
 80083be:	461f      	mov	r7, r3
 80083c0:	d838      	bhi.n	8008434 <__ssputs_r+0x84>
 80083c2:	898a      	ldrh	r2, [r1, #12]
 80083c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083c8:	d032      	beq.n	8008430 <__ssputs_r+0x80>
 80083ca:	6825      	ldr	r5, [r4, #0]
 80083cc:	6909      	ldr	r1, [r1, #16]
 80083ce:	eba5 0901 	sub.w	r9, r5, r1
 80083d2:	6965      	ldr	r5, [r4, #20]
 80083d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083dc:	3301      	adds	r3, #1
 80083de:	444b      	add	r3, r9
 80083e0:	106d      	asrs	r5, r5, #1
 80083e2:	429d      	cmp	r5, r3
 80083e4:	bf38      	it	cc
 80083e6:	461d      	movcc	r5, r3
 80083e8:	0553      	lsls	r3, r2, #21
 80083ea:	d531      	bpl.n	8008450 <__ssputs_r+0xa0>
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7ff ff85 	bl	80082fc <_malloc_r>
 80083f2:	4606      	mov	r6, r0
 80083f4:	b950      	cbnz	r0, 800840c <__ssputs_r+0x5c>
 80083f6:	230c      	movs	r3, #12
 80083f8:	f8ca 3000 	str.w	r3, [sl]
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	6921      	ldr	r1, [r4, #16]
 800840e:	464a      	mov	r2, r9
 8008410:	f7ff fa4c 	bl	80078ac <memcpy>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800841a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841e:	81a3      	strh	r3, [r4, #12]
 8008420:	6126      	str	r6, [r4, #16]
 8008422:	6165      	str	r5, [r4, #20]
 8008424:	444e      	add	r6, r9
 8008426:	eba5 0509 	sub.w	r5, r5, r9
 800842a:	6026      	str	r6, [r4, #0]
 800842c:	60a5      	str	r5, [r4, #8]
 800842e:	463e      	mov	r6, r7
 8008430:	42be      	cmp	r6, r7
 8008432:	d900      	bls.n	8008436 <__ssputs_r+0x86>
 8008434:	463e      	mov	r6, r7
 8008436:	4632      	mov	r2, r6
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	4641      	mov	r1, r8
 800843c:	f000 f97c 	bl	8008738 <memmove>
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	1b9b      	subs	r3, r3, r6
 8008446:	4432      	add	r2, r6
 8008448:	60a3      	str	r3, [r4, #8]
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	2000      	movs	r0, #0
 800844e:	e7db      	b.n	8008408 <__ssputs_r+0x58>
 8008450:	462a      	mov	r2, r5
 8008452:	f000 f997 	bl	8008784 <_realloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	2800      	cmp	r0, #0
 800845a:	d1e1      	bne.n	8008420 <__ssputs_r+0x70>
 800845c:	6921      	ldr	r1, [r4, #16]
 800845e:	4650      	mov	r0, sl
 8008460:	f7ff fefc 	bl	800825c <_free_r>
 8008464:	e7c7      	b.n	80083f6 <__ssputs_r+0x46>
	...

08008468 <_svfiprintf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4698      	mov	r8, r3
 800846e:	898b      	ldrh	r3, [r1, #12]
 8008470:	061b      	lsls	r3, r3, #24
 8008472:	b09d      	sub	sp, #116	; 0x74
 8008474:	4607      	mov	r7, r0
 8008476:	460d      	mov	r5, r1
 8008478:	4614      	mov	r4, r2
 800847a:	d50e      	bpl.n	800849a <_svfiprintf_r+0x32>
 800847c:	690b      	ldr	r3, [r1, #16]
 800847e:	b963      	cbnz	r3, 800849a <_svfiprintf_r+0x32>
 8008480:	2140      	movs	r1, #64	; 0x40
 8008482:	f7ff ff3b 	bl	80082fc <_malloc_r>
 8008486:	6028      	str	r0, [r5, #0]
 8008488:	6128      	str	r0, [r5, #16]
 800848a:	b920      	cbnz	r0, 8008496 <_svfiprintf_r+0x2e>
 800848c:	230c      	movs	r3, #12
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e0d1      	b.n	800863a <_svfiprintf_r+0x1d2>
 8008496:	2340      	movs	r3, #64	; 0x40
 8008498:	616b      	str	r3, [r5, #20]
 800849a:	2300      	movs	r3, #0
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	2320      	movs	r3, #32
 80084a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a8:	2330      	movs	r3, #48	; 0x30
 80084aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008654 <_svfiprintf_r+0x1ec>
 80084ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084b2:	f04f 0901 	mov.w	r9, #1
 80084b6:	4623      	mov	r3, r4
 80084b8:	469a      	mov	sl, r3
 80084ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084be:	b10a      	cbz	r2, 80084c4 <_svfiprintf_r+0x5c>
 80084c0:	2a25      	cmp	r2, #37	; 0x25
 80084c2:	d1f9      	bne.n	80084b8 <_svfiprintf_r+0x50>
 80084c4:	ebba 0b04 	subs.w	fp, sl, r4
 80084c8:	d00b      	beq.n	80084e2 <_svfiprintf_r+0x7a>
 80084ca:	465b      	mov	r3, fp
 80084cc:	4622      	mov	r2, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ff6d 	bl	80083b0 <__ssputs_r>
 80084d6:	3001      	adds	r0, #1
 80084d8:	f000 80aa 	beq.w	8008630 <_svfiprintf_r+0x1c8>
 80084dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084de:	445a      	add	r2, fp
 80084e0:	9209      	str	r2, [sp, #36]	; 0x24
 80084e2:	f89a 3000 	ldrb.w	r3, [sl]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 80a2 	beq.w	8008630 <_svfiprintf_r+0x1c8>
 80084ec:	2300      	movs	r3, #0
 80084ee:	f04f 32ff 	mov.w	r2, #4294967295
 80084f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f6:	f10a 0a01 	add.w	sl, sl, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008502:	931a      	str	r3, [sp, #104]	; 0x68
 8008504:	4654      	mov	r4, sl
 8008506:	2205      	movs	r2, #5
 8008508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850c:	4851      	ldr	r0, [pc, #324]	; (8008654 <_svfiprintf_r+0x1ec>)
 800850e:	f7f7 fe6f 	bl	80001f0 <memchr>
 8008512:	9a04      	ldr	r2, [sp, #16]
 8008514:	b9d8      	cbnz	r0, 800854e <_svfiprintf_r+0xe6>
 8008516:	06d0      	lsls	r0, r2, #27
 8008518:	bf44      	itt	mi
 800851a:	2320      	movmi	r3, #32
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008520:	0711      	lsls	r1, r2, #28
 8008522:	bf44      	itt	mi
 8008524:	232b      	movmi	r3, #43	; 0x2b
 8008526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b2a      	cmp	r3, #42	; 0x2a
 8008530:	d015      	beq.n	800855e <_svfiprintf_r+0xf6>
 8008532:	9a07      	ldr	r2, [sp, #28]
 8008534:	4654      	mov	r4, sl
 8008536:	2000      	movs	r0, #0
 8008538:	f04f 0c0a 	mov.w	ip, #10
 800853c:	4621      	mov	r1, r4
 800853e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008542:	3b30      	subs	r3, #48	; 0x30
 8008544:	2b09      	cmp	r3, #9
 8008546:	d94e      	bls.n	80085e6 <_svfiprintf_r+0x17e>
 8008548:	b1b0      	cbz	r0, 8008578 <_svfiprintf_r+0x110>
 800854a:	9207      	str	r2, [sp, #28]
 800854c:	e014      	b.n	8008578 <_svfiprintf_r+0x110>
 800854e:	eba0 0308 	sub.w	r3, r0, r8
 8008552:	fa09 f303 	lsl.w	r3, r9, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	46a2      	mov	sl, r4
 800855c:	e7d2      	b.n	8008504 <_svfiprintf_r+0x9c>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	1d19      	adds	r1, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	9103      	str	r1, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfbb      	ittet	lt
 800856a:	425b      	neglt	r3, r3
 800856c:	f042 0202 	orrlt.w	r2, r2, #2
 8008570:	9307      	strge	r3, [sp, #28]
 8008572:	9307      	strlt	r3, [sp, #28]
 8008574:	bfb8      	it	lt
 8008576:	9204      	strlt	r2, [sp, #16]
 8008578:	7823      	ldrb	r3, [r4, #0]
 800857a:	2b2e      	cmp	r3, #46	; 0x2e
 800857c:	d10c      	bne.n	8008598 <_svfiprintf_r+0x130>
 800857e:	7863      	ldrb	r3, [r4, #1]
 8008580:	2b2a      	cmp	r3, #42	; 0x2a
 8008582:	d135      	bne.n	80085f0 <_svfiprintf_r+0x188>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	9203      	str	r2, [sp, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfb8      	it	lt
 8008590:	f04f 33ff 	movlt.w	r3, #4294967295
 8008594:	3402      	adds	r4, #2
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008664 <_svfiprintf_r+0x1fc>
 800859c:	7821      	ldrb	r1, [r4, #0]
 800859e:	2203      	movs	r2, #3
 80085a0:	4650      	mov	r0, sl
 80085a2:	f7f7 fe25 	bl	80001f0 <memchr>
 80085a6:	b140      	cbz	r0, 80085ba <_svfiprintf_r+0x152>
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	eba0 000a 	sub.w	r0, r0, sl
 80085ae:	fa03 f000 	lsl.w	r0, r3, r0
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	4303      	orrs	r3, r0
 80085b6:	3401      	adds	r4, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085be:	4826      	ldr	r0, [pc, #152]	; (8008658 <_svfiprintf_r+0x1f0>)
 80085c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c4:	2206      	movs	r2, #6
 80085c6:	f7f7 fe13 	bl	80001f0 <memchr>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d038      	beq.n	8008640 <_svfiprintf_r+0x1d8>
 80085ce:	4b23      	ldr	r3, [pc, #140]	; (800865c <_svfiprintf_r+0x1f4>)
 80085d0:	bb1b      	cbnz	r3, 800861a <_svfiprintf_r+0x1b2>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	3307      	adds	r3, #7
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	3308      	adds	r3, #8
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	4433      	add	r3, r6
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	e767      	b.n	80084b6 <_svfiprintf_r+0x4e>
 80085e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ea:	460c      	mov	r4, r1
 80085ec:	2001      	movs	r0, #1
 80085ee:	e7a5      	b.n	800853c <_svfiprintf_r+0xd4>
 80085f0:	2300      	movs	r3, #0
 80085f2:	3401      	adds	r4, #1
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	4619      	mov	r1, r3
 80085f8:	f04f 0c0a 	mov.w	ip, #10
 80085fc:	4620      	mov	r0, r4
 80085fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008602:	3a30      	subs	r2, #48	; 0x30
 8008604:	2a09      	cmp	r2, #9
 8008606:	d903      	bls.n	8008610 <_svfiprintf_r+0x1a8>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0c5      	beq.n	8008598 <_svfiprintf_r+0x130>
 800860c:	9105      	str	r1, [sp, #20]
 800860e:	e7c3      	b.n	8008598 <_svfiprintf_r+0x130>
 8008610:	fb0c 2101 	mla	r1, ip, r1, r2
 8008614:	4604      	mov	r4, r0
 8008616:	2301      	movs	r3, #1
 8008618:	e7f0      	b.n	80085fc <_svfiprintf_r+0x194>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <_svfiprintf_r+0x1f8>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4638      	mov	r0, r7
 8008626:	f7fc fa67 	bl	8004af8 <_printf_float>
 800862a:	1c42      	adds	r2, r0, #1
 800862c:	4606      	mov	r6, r0
 800862e:	d1d6      	bne.n	80085de <_svfiprintf_r+0x176>
 8008630:	89ab      	ldrh	r3, [r5, #12]
 8008632:	065b      	lsls	r3, r3, #25
 8008634:	f53f af2c 	bmi.w	8008490 <_svfiprintf_r+0x28>
 8008638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863a:	b01d      	add	sp, #116	; 0x74
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	462a      	mov	r2, r5
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <_svfiprintf_r+0x1f8>)
 8008648:	a904      	add	r1, sp, #16
 800864a:	4638      	mov	r0, r7
 800864c:	f7fc fcf8 	bl	8005040 <_printf_i>
 8008650:	e7eb      	b.n	800862a <_svfiprintf_r+0x1c2>
 8008652:	bf00      	nop
 8008654:	0800967c 	.word	0x0800967c
 8008658:	08009686 	.word	0x08009686
 800865c:	08004af9 	.word	0x08004af9
 8008660:	080083b1 	.word	0x080083b1
 8008664:	08009682 	.word	0x08009682

08008668 <nan>:
 8008668:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008670 <nan+0x8>
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	00000000 	.word	0x00000000
 8008674:	7ff80000 	.word	0x7ff80000

08008678 <_sbrk_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d06      	ldr	r5, [pc, #24]	; (8008694 <_sbrk_r+0x1c>)
 800867c:	2300      	movs	r3, #0
 800867e:	4604      	mov	r4, r0
 8008680:	4608      	mov	r0, r1
 8008682:	602b      	str	r3, [r5, #0]
 8008684:	f7f9 fd06 	bl	8002094 <_sbrk>
 8008688:	1c43      	adds	r3, r0, #1
 800868a:	d102      	bne.n	8008692 <_sbrk_r+0x1a>
 800868c:	682b      	ldr	r3, [r5, #0]
 800868e:	b103      	cbz	r3, 8008692 <_sbrk_r+0x1a>
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	20000310 	.word	0x20000310

08008698 <strncmp>:
 8008698:	b510      	push	{r4, lr}
 800869a:	b16a      	cbz	r2, 80086b8 <strncmp+0x20>
 800869c:	3901      	subs	r1, #1
 800869e:	1884      	adds	r4, r0, r2
 80086a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80086a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d103      	bne.n	80086b4 <strncmp+0x1c>
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d001      	beq.n	80086b4 <strncmp+0x1c>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f5      	bne.n	80086a0 <strncmp+0x8>
 80086b4:	1a98      	subs	r0, r3, r2
 80086b6:	bd10      	pop	{r4, pc}
 80086b8:	4610      	mov	r0, r2
 80086ba:	e7fc      	b.n	80086b6 <strncmp+0x1e>

080086bc <__ascii_wctomb>:
 80086bc:	b149      	cbz	r1, 80086d2 <__ascii_wctomb+0x16>
 80086be:	2aff      	cmp	r2, #255	; 0xff
 80086c0:	bf85      	ittet	hi
 80086c2:	238a      	movhi	r3, #138	; 0x8a
 80086c4:	6003      	strhi	r3, [r0, #0]
 80086c6:	700a      	strbls	r2, [r1, #0]
 80086c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80086cc:	bf98      	it	ls
 80086ce:	2001      	movls	r0, #1
 80086d0:	4770      	bx	lr
 80086d2:	4608      	mov	r0, r1
 80086d4:	4770      	bx	lr
	...

080086d8 <__assert_func>:
 80086d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086da:	4614      	mov	r4, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4b09      	ldr	r3, [pc, #36]	; (8008704 <__assert_func+0x2c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4605      	mov	r5, r0
 80086e4:	68d8      	ldr	r0, [r3, #12]
 80086e6:	b14c      	cbz	r4, 80086fc <__assert_func+0x24>
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <__assert_func+0x30>)
 80086ea:	9100      	str	r1, [sp, #0]
 80086ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086f0:	4906      	ldr	r1, [pc, #24]	; (800870c <__assert_func+0x34>)
 80086f2:	462b      	mov	r3, r5
 80086f4:	f000 f80e 	bl	8008714 <fiprintf>
 80086f8:	f000 fa84 	bl	8008c04 <abort>
 80086fc:	4b04      	ldr	r3, [pc, #16]	; (8008710 <__assert_func+0x38>)
 80086fe:	461c      	mov	r4, r3
 8008700:	e7f3      	b.n	80086ea <__assert_func+0x12>
 8008702:	bf00      	nop
 8008704:	20000010 	.word	0x20000010
 8008708:	0800968d 	.word	0x0800968d
 800870c:	0800969a 	.word	0x0800969a
 8008710:	080096c8 	.word	0x080096c8

08008714 <fiprintf>:
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	b503      	push	{r0, r1, lr}
 8008718:	4601      	mov	r1, r0
 800871a:	ab03      	add	r3, sp, #12
 800871c:	4805      	ldr	r0, [pc, #20]	; (8008734 <fiprintf+0x20>)
 800871e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008722:	6800      	ldr	r0, [r0, #0]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	f000 f87d 	bl	8008824 <_vfiprintf_r>
 800872a:	b002      	add	sp, #8
 800872c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008730:	b003      	add	sp, #12
 8008732:	4770      	bx	lr
 8008734:	20000010 	.word	0x20000010

08008738 <memmove>:
 8008738:	4288      	cmp	r0, r1
 800873a:	b510      	push	{r4, lr}
 800873c:	eb01 0402 	add.w	r4, r1, r2
 8008740:	d902      	bls.n	8008748 <memmove+0x10>
 8008742:	4284      	cmp	r4, r0
 8008744:	4623      	mov	r3, r4
 8008746:	d807      	bhi.n	8008758 <memmove+0x20>
 8008748:	1e43      	subs	r3, r0, #1
 800874a:	42a1      	cmp	r1, r4
 800874c:	d008      	beq.n	8008760 <memmove+0x28>
 800874e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008756:	e7f8      	b.n	800874a <memmove+0x12>
 8008758:	4402      	add	r2, r0
 800875a:	4601      	mov	r1, r0
 800875c:	428a      	cmp	r2, r1
 800875e:	d100      	bne.n	8008762 <memmove+0x2a>
 8008760:	bd10      	pop	{r4, pc}
 8008762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800876a:	e7f7      	b.n	800875c <memmove+0x24>

0800876c <__malloc_lock>:
 800876c:	4801      	ldr	r0, [pc, #4]	; (8008774 <__malloc_lock+0x8>)
 800876e:	f000 bc09 	b.w	8008f84 <__retarget_lock_acquire_recursive>
 8008772:	bf00      	nop
 8008774:	20000318 	.word	0x20000318

08008778 <__malloc_unlock>:
 8008778:	4801      	ldr	r0, [pc, #4]	; (8008780 <__malloc_unlock+0x8>)
 800877a:	f000 bc04 	b.w	8008f86 <__retarget_lock_release_recursive>
 800877e:	bf00      	nop
 8008780:	20000318 	.word	0x20000318

08008784 <_realloc_r>:
 8008784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008786:	4607      	mov	r7, r0
 8008788:	4614      	mov	r4, r2
 800878a:	460e      	mov	r6, r1
 800878c:	b921      	cbnz	r1, 8008798 <_realloc_r+0x14>
 800878e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008792:	4611      	mov	r1, r2
 8008794:	f7ff bdb2 	b.w	80082fc <_malloc_r>
 8008798:	b922      	cbnz	r2, 80087a4 <_realloc_r+0x20>
 800879a:	f7ff fd5f 	bl	800825c <_free_r>
 800879e:	4625      	mov	r5, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a4:	f000 fc54 	bl	8009050 <_malloc_usable_size_r>
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d20f      	bcs.n	80087cc <_realloc_r+0x48>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff fda4 	bl	80082fc <_malloc_r>
 80087b4:	4605      	mov	r5, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d0f2      	beq.n	80087a0 <_realloc_r+0x1c>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4622      	mov	r2, r4
 80087be:	f7ff f875 	bl	80078ac <memcpy>
 80087c2:	4631      	mov	r1, r6
 80087c4:	4638      	mov	r0, r7
 80087c6:	f7ff fd49 	bl	800825c <_free_r>
 80087ca:	e7e9      	b.n	80087a0 <_realloc_r+0x1c>
 80087cc:	4635      	mov	r5, r6
 80087ce:	e7e7      	b.n	80087a0 <_realloc_r+0x1c>

080087d0 <__sfputc_r>:
 80087d0:	6893      	ldr	r3, [r2, #8]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	b410      	push	{r4}
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	da08      	bge.n	80087ee <__sfputc_r+0x1e>
 80087dc:	6994      	ldr	r4, [r2, #24]
 80087de:	42a3      	cmp	r3, r4
 80087e0:	db01      	blt.n	80087e6 <__sfputc_r+0x16>
 80087e2:	290a      	cmp	r1, #10
 80087e4:	d103      	bne.n	80087ee <__sfputc_r+0x1e>
 80087e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ea:	f000 b94b 	b.w	8008a84 <__swbuf_r>
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	1c58      	adds	r0, r3, #1
 80087f2:	6010      	str	r0, [r2, #0]
 80087f4:	7019      	strb	r1, [r3, #0]
 80087f6:	4608      	mov	r0, r1
 80087f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <__sfputs_r>:
 80087fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008800:	4606      	mov	r6, r0
 8008802:	460f      	mov	r7, r1
 8008804:	4614      	mov	r4, r2
 8008806:	18d5      	adds	r5, r2, r3
 8008808:	42ac      	cmp	r4, r5
 800880a:	d101      	bne.n	8008810 <__sfputs_r+0x12>
 800880c:	2000      	movs	r0, #0
 800880e:	e007      	b.n	8008820 <__sfputs_r+0x22>
 8008810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008814:	463a      	mov	r2, r7
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffda 	bl	80087d0 <__sfputc_r>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d1f3      	bne.n	8008808 <__sfputs_r+0xa>
 8008820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008824 <_vfiprintf_r>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	460d      	mov	r5, r1
 800882a:	b09d      	sub	sp, #116	; 0x74
 800882c:	4614      	mov	r4, r2
 800882e:	4698      	mov	r8, r3
 8008830:	4606      	mov	r6, r0
 8008832:	b118      	cbz	r0, 800883c <_vfiprintf_r+0x18>
 8008834:	6983      	ldr	r3, [r0, #24]
 8008836:	b90b      	cbnz	r3, 800883c <_vfiprintf_r+0x18>
 8008838:	f000 fb06 	bl	8008e48 <__sinit>
 800883c:	4b89      	ldr	r3, [pc, #548]	; (8008a64 <_vfiprintf_r+0x240>)
 800883e:	429d      	cmp	r5, r3
 8008840:	d11b      	bne.n	800887a <_vfiprintf_r+0x56>
 8008842:	6875      	ldr	r5, [r6, #4]
 8008844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008846:	07d9      	lsls	r1, r3, #31
 8008848:	d405      	bmi.n	8008856 <_vfiprintf_r+0x32>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	059a      	lsls	r2, r3, #22
 800884e:	d402      	bmi.n	8008856 <_vfiprintf_r+0x32>
 8008850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008852:	f000 fb97 	bl	8008f84 <__retarget_lock_acquire_recursive>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	071b      	lsls	r3, r3, #28
 800885a:	d501      	bpl.n	8008860 <_vfiprintf_r+0x3c>
 800885c:	692b      	ldr	r3, [r5, #16]
 800885e:	b9eb      	cbnz	r3, 800889c <_vfiprintf_r+0x78>
 8008860:	4629      	mov	r1, r5
 8008862:	4630      	mov	r0, r6
 8008864:	f000 f960 	bl	8008b28 <__swsetup_r>
 8008868:	b1c0      	cbz	r0, 800889c <_vfiprintf_r+0x78>
 800886a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800886c:	07dc      	lsls	r4, r3, #31
 800886e:	d50e      	bpl.n	800888e <_vfiprintf_r+0x6a>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295
 8008874:	b01d      	add	sp, #116	; 0x74
 8008876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887a:	4b7b      	ldr	r3, [pc, #492]	; (8008a68 <_vfiprintf_r+0x244>)
 800887c:	429d      	cmp	r5, r3
 800887e:	d101      	bne.n	8008884 <_vfiprintf_r+0x60>
 8008880:	68b5      	ldr	r5, [r6, #8]
 8008882:	e7df      	b.n	8008844 <_vfiprintf_r+0x20>
 8008884:	4b79      	ldr	r3, [pc, #484]	; (8008a6c <_vfiprintf_r+0x248>)
 8008886:	429d      	cmp	r5, r3
 8008888:	bf08      	it	eq
 800888a:	68f5      	ldreq	r5, [r6, #12]
 800888c:	e7da      	b.n	8008844 <_vfiprintf_r+0x20>
 800888e:	89ab      	ldrh	r3, [r5, #12]
 8008890:	0598      	lsls	r0, r3, #22
 8008892:	d4ed      	bmi.n	8008870 <_vfiprintf_r+0x4c>
 8008894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008896:	f000 fb76 	bl	8008f86 <__retarget_lock_release_recursive>
 800889a:	e7e9      	b.n	8008870 <_vfiprintf_r+0x4c>
 800889c:	2300      	movs	r3, #0
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	2320      	movs	r3, #32
 80088a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088aa:	2330      	movs	r3, #48	; 0x30
 80088ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a70 <_vfiprintf_r+0x24c>
 80088b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088b4:	f04f 0901 	mov.w	r9, #1
 80088b8:	4623      	mov	r3, r4
 80088ba:	469a      	mov	sl, r3
 80088bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c0:	b10a      	cbz	r2, 80088c6 <_vfiprintf_r+0xa2>
 80088c2:	2a25      	cmp	r2, #37	; 0x25
 80088c4:	d1f9      	bne.n	80088ba <_vfiprintf_r+0x96>
 80088c6:	ebba 0b04 	subs.w	fp, sl, r4
 80088ca:	d00b      	beq.n	80088e4 <_vfiprintf_r+0xc0>
 80088cc:	465b      	mov	r3, fp
 80088ce:	4622      	mov	r2, r4
 80088d0:	4629      	mov	r1, r5
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7ff ff93 	bl	80087fe <__sfputs_r>
 80088d8:	3001      	adds	r0, #1
 80088da:	f000 80aa 	beq.w	8008a32 <_vfiprintf_r+0x20e>
 80088de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e0:	445a      	add	r2, fp
 80088e2:	9209      	str	r2, [sp, #36]	; 0x24
 80088e4:	f89a 3000 	ldrb.w	r3, [sl]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80a2 	beq.w	8008a32 <_vfiprintf_r+0x20e>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f04f 32ff 	mov.w	r2, #4294967295
 80088f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f8:	f10a 0a01 	add.w	sl, sl, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008904:	931a      	str	r3, [sp, #104]	; 0x68
 8008906:	4654      	mov	r4, sl
 8008908:	2205      	movs	r2, #5
 800890a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890e:	4858      	ldr	r0, [pc, #352]	; (8008a70 <_vfiprintf_r+0x24c>)
 8008910:	f7f7 fc6e 	bl	80001f0 <memchr>
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	b9d8      	cbnz	r0, 8008950 <_vfiprintf_r+0x12c>
 8008918:	06d1      	lsls	r1, r2, #27
 800891a:	bf44      	itt	mi
 800891c:	2320      	movmi	r3, #32
 800891e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008922:	0713      	lsls	r3, r2, #28
 8008924:	bf44      	itt	mi
 8008926:	232b      	movmi	r3, #43	; 0x2b
 8008928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892c:	f89a 3000 	ldrb.w	r3, [sl]
 8008930:	2b2a      	cmp	r3, #42	; 0x2a
 8008932:	d015      	beq.n	8008960 <_vfiprintf_r+0x13c>
 8008934:	9a07      	ldr	r2, [sp, #28]
 8008936:	4654      	mov	r4, sl
 8008938:	2000      	movs	r0, #0
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4621      	mov	r1, r4
 8008940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008944:	3b30      	subs	r3, #48	; 0x30
 8008946:	2b09      	cmp	r3, #9
 8008948:	d94e      	bls.n	80089e8 <_vfiprintf_r+0x1c4>
 800894a:	b1b0      	cbz	r0, 800897a <_vfiprintf_r+0x156>
 800894c:	9207      	str	r2, [sp, #28]
 800894e:	e014      	b.n	800897a <_vfiprintf_r+0x156>
 8008950:	eba0 0308 	sub.w	r3, r0, r8
 8008954:	fa09 f303 	lsl.w	r3, r9, r3
 8008958:	4313      	orrs	r3, r2
 800895a:	9304      	str	r3, [sp, #16]
 800895c:	46a2      	mov	sl, r4
 800895e:	e7d2      	b.n	8008906 <_vfiprintf_r+0xe2>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	1d19      	adds	r1, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	9103      	str	r1, [sp, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfbb      	ittet	lt
 800896c:	425b      	neglt	r3, r3
 800896e:	f042 0202 	orrlt.w	r2, r2, #2
 8008972:	9307      	strge	r3, [sp, #28]
 8008974:	9307      	strlt	r3, [sp, #28]
 8008976:	bfb8      	it	lt
 8008978:	9204      	strlt	r2, [sp, #16]
 800897a:	7823      	ldrb	r3, [r4, #0]
 800897c:	2b2e      	cmp	r3, #46	; 0x2e
 800897e:	d10c      	bne.n	800899a <_vfiprintf_r+0x176>
 8008980:	7863      	ldrb	r3, [r4, #1]
 8008982:	2b2a      	cmp	r3, #42	; 0x2a
 8008984:	d135      	bne.n	80089f2 <_vfiprintf_r+0x1ce>
 8008986:	9b03      	ldr	r3, [sp, #12]
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	9203      	str	r2, [sp, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfb8      	it	lt
 8008992:	f04f 33ff 	movlt.w	r3, #4294967295
 8008996:	3402      	adds	r4, #2
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a80 <_vfiprintf_r+0x25c>
 800899e:	7821      	ldrb	r1, [r4, #0]
 80089a0:	2203      	movs	r2, #3
 80089a2:	4650      	mov	r0, sl
 80089a4:	f7f7 fc24 	bl	80001f0 <memchr>
 80089a8:	b140      	cbz	r0, 80089bc <_vfiprintf_r+0x198>
 80089aa:	2340      	movs	r3, #64	; 0x40
 80089ac:	eba0 000a 	sub.w	r0, r0, sl
 80089b0:	fa03 f000 	lsl.w	r0, r3, r0
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	4303      	orrs	r3, r0
 80089b8:	3401      	adds	r4, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	482c      	ldr	r0, [pc, #176]	; (8008a74 <_vfiprintf_r+0x250>)
 80089c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089c6:	2206      	movs	r2, #6
 80089c8:	f7f7 fc12 	bl	80001f0 <memchr>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d03f      	beq.n	8008a50 <_vfiprintf_r+0x22c>
 80089d0:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <_vfiprintf_r+0x254>)
 80089d2:	bb1b      	cbnz	r3, 8008a1c <_vfiprintf_r+0x1f8>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	3307      	adds	r3, #7
 80089d8:	f023 0307 	bic.w	r3, r3, #7
 80089dc:	3308      	adds	r3, #8
 80089de:	9303      	str	r3, [sp, #12]
 80089e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e2:	443b      	add	r3, r7
 80089e4:	9309      	str	r3, [sp, #36]	; 0x24
 80089e6:	e767      	b.n	80088b8 <_vfiprintf_r+0x94>
 80089e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ec:	460c      	mov	r4, r1
 80089ee:	2001      	movs	r0, #1
 80089f0:	e7a5      	b.n	800893e <_vfiprintf_r+0x11a>
 80089f2:	2300      	movs	r3, #0
 80089f4:	3401      	adds	r4, #1
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	4619      	mov	r1, r3
 80089fa:	f04f 0c0a 	mov.w	ip, #10
 80089fe:	4620      	mov	r0, r4
 8008a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a04:	3a30      	subs	r2, #48	; 0x30
 8008a06:	2a09      	cmp	r2, #9
 8008a08:	d903      	bls.n	8008a12 <_vfiprintf_r+0x1ee>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0c5      	beq.n	800899a <_vfiprintf_r+0x176>
 8008a0e:	9105      	str	r1, [sp, #20]
 8008a10:	e7c3      	b.n	800899a <_vfiprintf_r+0x176>
 8008a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a16:	4604      	mov	r4, r0
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e7f0      	b.n	80089fe <_vfiprintf_r+0x1da>
 8008a1c:	ab03      	add	r3, sp, #12
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	462a      	mov	r2, r5
 8008a22:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <_vfiprintf_r+0x258>)
 8008a24:	a904      	add	r1, sp, #16
 8008a26:	4630      	mov	r0, r6
 8008a28:	f7fc f866 	bl	8004af8 <_printf_float>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	1c78      	adds	r0, r7, #1
 8008a30:	d1d6      	bne.n	80089e0 <_vfiprintf_r+0x1bc>
 8008a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a34:	07d9      	lsls	r1, r3, #31
 8008a36:	d405      	bmi.n	8008a44 <_vfiprintf_r+0x220>
 8008a38:	89ab      	ldrh	r3, [r5, #12]
 8008a3a:	059a      	lsls	r2, r3, #22
 8008a3c:	d402      	bmi.n	8008a44 <_vfiprintf_r+0x220>
 8008a3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a40:	f000 faa1 	bl	8008f86 <__retarget_lock_release_recursive>
 8008a44:	89ab      	ldrh	r3, [r5, #12]
 8008a46:	065b      	lsls	r3, r3, #25
 8008a48:	f53f af12 	bmi.w	8008870 <_vfiprintf_r+0x4c>
 8008a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a4e:	e711      	b.n	8008874 <_vfiprintf_r+0x50>
 8008a50:	ab03      	add	r3, sp, #12
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <_vfiprintf_r+0x258>)
 8008a58:	a904      	add	r1, sp, #16
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	f7fc faf0 	bl	8005040 <_printf_i>
 8008a60:	e7e4      	b.n	8008a2c <_vfiprintf_r+0x208>
 8008a62:	bf00      	nop
 8008a64:	080096ec 	.word	0x080096ec
 8008a68:	0800970c 	.word	0x0800970c
 8008a6c:	080096cc 	.word	0x080096cc
 8008a70:	0800967c 	.word	0x0800967c
 8008a74:	08009686 	.word	0x08009686
 8008a78:	08004af9 	.word	0x08004af9
 8008a7c:	080087ff 	.word	0x080087ff
 8008a80:	08009682 	.word	0x08009682

08008a84 <__swbuf_r>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	460e      	mov	r6, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	4605      	mov	r5, r0
 8008a8c:	b118      	cbz	r0, 8008a96 <__swbuf_r+0x12>
 8008a8e:	6983      	ldr	r3, [r0, #24]
 8008a90:	b90b      	cbnz	r3, 8008a96 <__swbuf_r+0x12>
 8008a92:	f000 f9d9 	bl	8008e48 <__sinit>
 8008a96:	4b21      	ldr	r3, [pc, #132]	; (8008b1c <__swbuf_r+0x98>)
 8008a98:	429c      	cmp	r4, r3
 8008a9a:	d12b      	bne.n	8008af4 <__swbuf_r+0x70>
 8008a9c:	686c      	ldr	r4, [r5, #4]
 8008a9e:	69a3      	ldr	r3, [r4, #24]
 8008aa0:	60a3      	str	r3, [r4, #8]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	071a      	lsls	r2, r3, #28
 8008aa6:	d52f      	bpl.n	8008b08 <__swbuf_r+0x84>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	b36b      	cbz	r3, 8008b08 <__swbuf_r+0x84>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6820      	ldr	r0, [r4, #0]
 8008ab0:	1ac0      	subs	r0, r0, r3
 8008ab2:	6963      	ldr	r3, [r4, #20]
 8008ab4:	b2f6      	uxtb	r6, r6
 8008ab6:	4283      	cmp	r3, r0
 8008ab8:	4637      	mov	r7, r6
 8008aba:	dc04      	bgt.n	8008ac6 <__swbuf_r+0x42>
 8008abc:	4621      	mov	r1, r4
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 f92e 	bl	8008d20 <_fflush_r>
 8008ac4:	bb30      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	60a3      	str	r3, [r4, #8]
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	6022      	str	r2, [r4, #0]
 8008ad2:	701e      	strb	r6, [r3, #0]
 8008ad4:	6963      	ldr	r3, [r4, #20]
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	4283      	cmp	r3, r0
 8008ada:	d004      	beq.n	8008ae6 <__swbuf_r+0x62>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	07db      	lsls	r3, r3, #31
 8008ae0:	d506      	bpl.n	8008af0 <__swbuf_r+0x6c>
 8008ae2:	2e0a      	cmp	r6, #10
 8008ae4:	d104      	bne.n	8008af0 <__swbuf_r+0x6c>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f919 	bl	8008d20 <_fflush_r>
 8008aee:	b988      	cbnz	r0, 8008b14 <__swbuf_r+0x90>
 8008af0:	4638      	mov	r0, r7
 8008af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <__swbuf_r+0x9c>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d101      	bne.n	8008afe <__swbuf_r+0x7a>
 8008afa:	68ac      	ldr	r4, [r5, #8]
 8008afc:	e7cf      	b.n	8008a9e <__swbuf_r+0x1a>
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <__swbuf_r+0xa0>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	bf08      	it	eq
 8008b04:	68ec      	ldreq	r4, [r5, #12]
 8008b06:	e7ca      	b.n	8008a9e <__swbuf_r+0x1a>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 f80c 	bl	8008b28 <__swsetup_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0cb      	beq.n	8008aac <__swbuf_r+0x28>
 8008b14:	f04f 37ff 	mov.w	r7, #4294967295
 8008b18:	e7ea      	b.n	8008af0 <__swbuf_r+0x6c>
 8008b1a:	bf00      	nop
 8008b1c:	080096ec 	.word	0x080096ec
 8008b20:	0800970c 	.word	0x0800970c
 8008b24:	080096cc 	.word	0x080096cc

08008b28 <__swsetup_r>:
 8008b28:	4b32      	ldr	r3, [pc, #200]	; (8008bf4 <__swsetup_r+0xcc>)
 8008b2a:	b570      	push	{r4, r5, r6, lr}
 8008b2c:	681d      	ldr	r5, [r3, #0]
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	b125      	cbz	r5, 8008b3e <__swsetup_r+0x16>
 8008b34:	69ab      	ldr	r3, [r5, #24]
 8008b36:	b913      	cbnz	r3, 8008b3e <__swsetup_r+0x16>
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 f985 	bl	8008e48 <__sinit>
 8008b3e:	4b2e      	ldr	r3, [pc, #184]	; (8008bf8 <__swsetup_r+0xd0>)
 8008b40:	429c      	cmp	r4, r3
 8008b42:	d10f      	bne.n	8008b64 <__swsetup_r+0x3c>
 8008b44:	686c      	ldr	r4, [r5, #4]
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b4c:	0719      	lsls	r1, r3, #28
 8008b4e:	d42c      	bmi.n	8008baa <__swsetup_r+0x82>
 8008b50:	06dd      	lsls	r5, r3, #27
 8008b52:	d411      	bmi.n	8008b78 <__swsetup_r+0x50>
 8008b54:	2309      	movs	r3, #9
 8008b56:	6033      	str	r3, [r6, #0]
 8008b58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b62:	e03e      	b.n	8008be2 <__swsetup_r+0xba>
 8008b64:	4b25      	ldr	r3, [pc, #148]	; (8008bfc <__swsetup_r+0xd4>)
 8008b66:	429c      	cmp	r4, r3
 8008b68:	d101      	bne.n	8008b6e <__swsetup_r+0x46>
 8008b6a:	68ac      	ldr	r4, [r5, #8]
 8008b6c:	e7eb      	b.n	8008b46 <__swsetup_r+0x1e>
 8008b6e:	4b24      	ldr	r3, [pc, #144]	; (8008c00 <__swsetup_r+0xd8>)
 8008b70:	429c      	cmp	r4, r3
 8008b72:	bf08      	it	eq
 8008b74:	68ec      	ldreq	r4, [r5, #12]
 8008b76:	e7e6      	b.n	8008b46 <__swsetup_r+0x1e>
 8008b78:	0758      	lsls	r0, r3, #29
 8008b7a:	d512      	bpl.n	8008ba2 <__swsetup_r+0x7a>
 8008b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7e:	b141      	cbz	r1, 8008b92 <__swsetup_r+0x6a>
 8008b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b84:	4299      	cmp	r1, r3
 8008b86:	d002      	beq.n	8008b8e <__swsetup_r+0x66>
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7ff fb67 	bl	800825c <_free_r>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6363      	str	r3, [r4, #52]	; 0x34
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b98:	81a3      	strh	r3, [r4, #12]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	6923      	ldr	r3, [r4, #16]
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f043 0308 	orr.w	r3, r3, #8
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	b94b      	cbnz	r3, 8008bc2 <__swsetup_r+0x9a>
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb8:	d003      	beq.n	8008bc2 <__swsetup_r+0x9a>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f000 fa07 	bl	8008fd0 <__smakebuf_r>
 8008bc2:	89a0      	ldrh	r0, [r4, #12]
 8008bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bc8:	f010 0301 	ands.w	r3, r0, #1
 8008bcc:	d00a      	beq.n	8008be4 <__swsetup_r+0xbc>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60a3      	str	r3, [r4, #8]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	425b      	negs	r3, r3
 8008bd6:	61a3      	str	r3, [r4, #24]
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	b943      	cbnz	r3, 8008bee <__swsetup_r+0xc6>
 8008bdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008be0:	d1ba      	bne.n	8008b58 <__swsetup_r+0x30>
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	0781      	lsls	r1, r0, #30
 8008be6:	bf58      	it	pl
 8008be8:	6963      	ldrpl	r3, [r4, #20]
 8008bea:	60a3      	str	r3, [r4, #8]
 8008bec:	e7f4      	b.n	8008bd8 <__swsetup_r+0xb0>
 8008bee:	2000      	movs	r0, #0
 8008bf0:	e7f7      	b.n	8008be2 <__swsetup_r+0xba>
 8008bf2:	bf00      	nop
 8008bf4:	20000010 	.word	0x20000010
 8008bf8:	080096ec 	.word	0x080096ec
 8008bfc:	0800970c 	.word	0x0800970c
 8008c00:	080096cc 	.word	0x080096cc

08008c04 <abort>:
 8008c04:	b508      	push	{r3, lr}
 8008c06:	2006      	movs	r0, #6
 8008c08:	f000 fa52 	bl	80090b0 <raise>
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	f7f9 f9c9 	bl	8001fa4 <_exit>
	...

08008c14 <__sflush_r>:
 8008c14:	898a      	ldrh	r2, [r1, #12]
 8008c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	0710      	lsls	r0, r2, #28
 8008c1e:	460c      	mov	r4, r1
 8008c20:	d458      	bmi.n	8008cd4 <__sflush_r+0xc0>
 8008c22:	684b      	ldr	r3, [r1, #4]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	dc05      	bgt.n	8008c34 <__sflush_r+0x20>
 8008c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	dc02      	bgt.n	8008c34 <__sflush_r+0x20>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c36:	2e00      	cmp	r6, #0
 8008c38:	d0f9      	beq.n	8008c2e <__sflush_r+0x1a>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c40:	682f      	ldr	r7, [r5, #0]
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	d032      	beq.n	8008cac <__sflush_r+0x98>
 8008c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	075a      	lsls	r2, r3, #29
 8008c4c:	d505      	bpl.n	8008c5a <__sflush_r+0x46>
 8008c4e:	6863      	ldr	r3, [r4, #4]
 8008c50:	1ac0      	subs	r0, r0, r3
 8008c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c54:	b10b      	cbz	r3, 8008c5a <__sflush_r+0x46>
 8008c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c58:	1ac0      	subs	r0, r0, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c60:	6a21      	ldr	r1, [r4, #32]
 8008c62:	4628      	mov	r0, r5
 8008c64:	47b0      	blx	r6
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	d106      	bne.n	8008c7a <__sflush_r+0x66>
 8008c6c:	6829      	ldr	r1, [r5, #0]
 8008c6e:	291d      	cmp	r1, #29
 8008c70:	d82c      	bhi.n	8008ccc <__sflush_r+0xb8>
 8008c72:	4a2a      	ldr	r2, [pc, #168]	; (8008d1c <__sflush_r+0x108>)
 8008c74:	40ca      	lsrs	r2, r1
 8008c76:	07d6      	lsls	r6, r2, #31
 8008c78:	d528      	bpl.n	8008ccc <__sflush_r+0xb8>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	6062      	str	r2, [r4, #4]
 8008c7e:	04d9      	lsls	r1, r3, #19
 8008c80:	6922      	ldr	r2, [r4, #16]
 8008c82:	6022      	str	r2, [r4, #0]
 8008c84:	d504      	bpl.n	8008c90 <__sflush_r+0x7c>
 8008c86:	1c42      	adds	r2, r0, #1
 8008c88:	d101      	bne.n	8008c8e <__sflush_r+0x7a>
 8008c8a:	682b      	ldr	r3, [r5, #0]
 8008c8c:	b903      	cbnz	r3, 8008c90 <__sflush_r+0x7c>
 8008c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c92:	602f      	str	r7, [r5, #0]
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d0ca      	beq.n	8008c2e <__sflush_r+0x1a>
 8008c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d002      	beq.n	8008ca6 <__sflush_r+0x92>
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f7ff fadb 	bl	800825c <_free_r>
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8008caa:	e7c1      	b.n	8008c30 <__sflush_r+0x1c>
 8008cac:	6a21      	ldr	r1, [r4, #32]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b0      	blx	r6
 8008cb4:	1c41      	adds	r1, r0, #1
 8008cb6:	d1c7      	bne.n	8008c48 <__sflush_r+0x34>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0c4      	beq.n	8008c48 <__sflush_r+0x34>
 8008cbe:	2b1d      	cmp	r3, #29
 8008cc0:	d001      	beq.n	8008cc6 <__sflush_r+0xb2>
 8008cc2:	2b16      	cmp	r3, #22
 8008cc4:	d101      	bne.n	8008cca <__sflush_r+0xb6>
 8008cc6:	602f      	str	r7, [r5, #0]
 8008cc8:	e7b1      	b.n	8008c2e <__sflush_r+0x1a>
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd0:	81a3      	strh	r3, [r4, #12]
 8008cd2:	e7ad      	b.n	8008c30 <__sflush_r+0x1c>
 8008cd4:	690f      	ldr	r7, [r1, #16]
 8008cd6:	2f00      	cmp	r7, #0
 8008cd8:	d0a9      	beq.n	8008c2e <__sflush_r+0x1a>
 8008cda:	0793      	lsls	r3, r2, #30
 8008cdc:	680e      	ldr	r6, [r1, #0]
 8008cde:	bf08      	it	eq
 8008ce0:	694b      	ldreq	r3, [r1, #20]
 8008ce2:	600f      	str	r7, [r1, #0]
 8008ce4:	bf18      	it	ne
 8008ce6:	2300      	movne	r3, #0
 8008ce8:	eba6 0807 	sub.w	r8, r6, r7
 8008cec:	608b      	str	r3, [r1, #8]
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	dd9c      	ble.n	8008c2e <__sflush_r+0x1a>
 8008cf4:	6a21      	ldr	r1, [r4, #32]
 8008cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cf8:	4643      	mov	r3, r8
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	47b0      	blx	r6
 8008d00:	2800      	cmp	r0, #0
 8008d02:	dc06      	bgt.n	8008d12 <__sflush_r+0xfe>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d0a:	81a3      	strh	r3, [r4, #12]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	e78e      	b.n	8008c30 <__sflush_r+0x1c>
 8008d12:	4407      	add	r7, r0
 8008d14:	eba8 0800 	sub.w	r8, r8, r0
 8008d18:	e7e9      	b.n	8008cee <__sflush_r+0xda>
 8008d1a:	bf00      	nop
 8008d1c:	20400001 	.word	0x20400001

08008d20 <_fflush_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	690b      	ldr	r3, [r1, #16]
 8008d24:	4605      	mov	r5, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	b913      	cbnz	r3, 8008d30 <_fflush_r+0x10>
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	b118      	cbz	r0, 8008d3a <_fflush_r+0x1a>
 8008d32:	6983      	ldr	r3, [r0, #24]
 8008d34:	b90b      	cbnz	r3, 8008d3a <_fflush_r+0x1a>
 8008d36:	f000 f887 	bl	8008e48 <__sinit>
 8008d3a:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <_fflush_r+0x6c>)
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d11b      	bne.n	8008d78 <_fflush_r+0x58>
 8008d40:	686c      	ldr	r4, [r5, #4]
 8008d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0ef      	beq.n	8008d2a <_fflush_r+0xa>
 8008d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d4c:	07d0      	lsls	r0, r2, #31
 8008d4e:	d404      	bmi.n	8008d5a <_fflush_r+0x3a>
 8008d50:	0599      	lsls	r1, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_fflush_r+0x3a>
 8008d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d56:	f000 f915 	bl	8008f84 <__retarget_lock_acquire_recursive>
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7ff ff59 	bl	8008c14 <__sflush_r>
 8008d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d64:	07da      	lsls	r2, r3, #31
 8008d66:	4605      	mov	r5, r0
 8008d68:	d4e0      	bmi.n	8008d2c <_fflush_r+0xc>
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	059b      	lsls	r3, r3, #22
 8008d6e:	d4dd      	bmi.n	8008d2c <_fflush_r+0xc>
 8008d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d72:	f000 f908 	bl	8008f86 <__retarget_lock_release_recursive>
 8008d76:	e7d9      	b.n	8008d2c <_fflush_r+0xc>
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <_fflush_r+0x70>)
 8008d7a:	429c      	cmp	r4, r3
 8008d7c:	d101      	bne.n	8008d82 <_fflush_r+0x62>
 8008d7e:	68ac      	ldr	r4, [r5, #8]
 8008d80:	e7df      	b.n	8008d42 <_fflush_r+0x22>
 8008d82:	4b04      	ldr	r3, [pc, #16]	; (8008d94 <_fflush_r+0x74>)
 8008d84:	429c      	cmp	r4, r3
 8008d86:	bf08      	it	eq
 8008d88:	68ec      	ldreq	r4, [r5, #12]
 8008d8a:	e7da      	b.n	8008d42 <_fflush_r+0x22>
 8008d8c:	080096ec 	.word	0x080096ec
 8008d90:	0800970c 	.word	0x0800970c
 8008d94:	080096cc 	.word	0x080096cc

08008d98 <std>:
 8008d98:	2300      	movs	r3, #0
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008da6:	6083      	str	r3, [r0, #8]
 8008da8:	8181      	strh	r1, [r0, #12]
 8008daa:	6643      	str	r3, [r0, #100]	; 0x64
 8008dac:	81c2      	strh	r2, [r0, #14]
 8008dae:	6183      	str	r3, [r0, #24]
 8008db0:	4619      	mov	r1, r3
 8008db2:	2208      	movs	r2, #8
 8008db4:	305c      	adds	r0, #92	; 0x5c
 8008db6:	f7fb fdf7 	bl	80049a8 <memset>
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <std+0x38>)
 8008dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <std+0x3c>)
 8008dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <std+0x40>)
 8008dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <std+0x44>)
 8008dc8:	6224      	str	r4, [r4, #32]
 8008dca:	6323      	str	r3, [r4, #48]	; 0x30
 8008dcc:	bd10      	pop	{r4, pc}
 8008dce:	bf00      	nop
 8008dd0:	080090e9 	.word	0x080090e9
 8008dd4:	0800910b 	.word	0x0800910b
 8008dd8:	08009143 	.word	0x08009143
 8008ddc:	08009167 	.word	0x08009167

08008de0 <_cleanup_r>:
 8008de0:	4901      	ldr	r1, [pc, #4]	; (8008de8 <_cleanup_r+0x8>)
 8008de2:	f000 b8af 	b.w	8008f44 <_fwalk_reent>
 8008de6:	bf00      	nop
 8008de8:	08008d21 	.word	0x08008d21

08008dec <__sfmoreglue>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	1e4a      	subs	r2, r1, #1
 8008df0:	2568      	movs	r5, #104	; 0x68
 8008df2:	4355      	muls	r5, r2
 8008df4:	460e      	mov	r6, r1
 8008df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dfa:	f7ff fa7f 	bl	80082fc <_malloc_r>
 8008dfe:	4604      	mov	r4, r0
 8008e00:	b140      	cbz	r0, 8008e14 <__sfmoreglue+0x28>
 8008e02:	2100      	movs	r1, #0
 8008e04:	e9c0 1600 	strd	r1, r6, [r0]
 8008e08:	300c      	adds	r0, #12
 8008e0a:	60a0      	str	r0, [r4, #8]
 8008e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e10:	f7fb fdca 	bl	80049a8 <memset>
 8008e14:	4620      	mov	r0, r4
 8008e16:	bd70      	pop	{r4, r5, r6, pc}

08008e18 <__sfp_lock_acquire>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__sfp_lock_acquire+0x8>)
 8008e1a:	f000 b8b3 	b.w	8008f84 <__retarget_lock_acquire_recursive>
 8008e1e:	bf00      	nop
 8008e20:	2000031c 	.word	0x2000031c

08008e24 <__sfp_lock_release>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__sfp_lock_release+0x8>)
 8008e26:	f000 b8ae 	b.w	8008f86 <__retarget_lock_release_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	2000031c 	.word	0x2000031c

08008e30 <__sinit_lock_acquire>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__sinit_lock_acquire+0x8>)
 8008e32:	f000 b8a7 	b.w	8008f84 <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	20000317 	.word	0x20000317

08008e3c <__sinit_lock_release>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sinit_lock_release+0x8>)
 8008e3e:	f000 b8a2 	b.w	8008f86 <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000317 	.word	0x20000317

08008e48 <__sinit>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	f7ff fff0 	bl	8008e30 <__sinit_lock_acquire>
 8008e50:	69a3      	ldr	r3, [r4, #24]
 8008e52:	b11b      	cbz	r3, 8008e5c <__sinit+0x14>
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	f7ff bff0 	b.w	8008e3c <__sinit_lock_release>
 8008e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e60:	6523      	str	r3, [r4, #80]	; 0x50
 8008e62:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <__sinit+0x68>)
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <__sinit+0x6c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	bf04      	itt	eq
 8008e6e:	2301      	moveq	r3, #1
 8008e70:	61a3      	streq	r3, [r4, #24]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f820 	bl	8008eb8 <__sfp>
 8008e78:	6060      	str	r0, [r4, #4]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f81c 	bl	8008eb8 <__sfp>
 8008e80:	60a0      	str	r0, [r4, #8]
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f818 	bl	8008eb8 <__sfp>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	60e0      	str	r0, [r4, #12]
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	6860      	ldr	r0, [r4, #4]
 8008e90:	f7ff ff82 	bl	8008d98 <std>
 8008e94:	68a0      	ldr	r0, [r4, #8]
 8008e96:	2201      	movs	r2, #1
 8008e98:	2109      	movs	r1, #9
 8008e9a:	f7ff ff7d 	bl	8008d98 <std>
 8008e9e:	68e0      	ldr	r0, [r4, #12]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	2112      	movs	r1, #18
 8008ea4:	f7ff ff78 	bl	8008d98 <std>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	61a3      	str	r3, [r4, #24]
 8008eac:	e7d2      	b.n	8008e54 <__sinit+0xc>
 8008eae:	bf00      	nop
 8008eb0:	08009278 	.word	0x08009278
 8008eb4:	08008de1 	.word	0x08008de1

08008eb8 <__sfp>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	4607      	mov	r7, r0
 8008ebc:	f7ff ffac 	bl	8008e18 <__sfp_lock_acquire>
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <__sfp+0x84>)
 8008ec2:	681e      	ldr	r6, [r3, #0]
 8008ec4:	69b3      	ldr	r3, [r6, #24]
 8008ec6:	b913      	cbnz	r3, 8008ece <__sfp+0x16>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ffbd 	bl	8008e48 <__sinit>
 8008ece:	3648      	adds	r6, #72	; 0x48
 8008ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	d503      	bpl.n	8008ee0 <__sfp+0x28>
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	b30b      	cbz	r3, 8008f20 <__sfp+0x68>
 8008edc:	6836      	ldr	r6, [r6, #0]
 8008ede:	e7f7      	b.n	8008ed0 <__sfp+0x18>
 8008ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ee4:	b9d5      	cbnz	r5, 8008f1c <__sfp+0x64>
 8008ee6:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <__sfp+0x88>)
 8008ee8:	60e3      	str	r3, [r4, #12]
 8008eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eee:	6665      	str	r5, [r4, #100]	; 0x64
 8008ef0:	f000 f847 	bl	8008f82 <__retarget_lock_init_recursive>
 8008ef4:	f7ff ff96 	bl	8008e24 <__sfp_lock_release>
 8008ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f00:	6025      	str	r5, [r4, #0]
 8008f02:	61a5      	str	r5, [r4, #24]
 8008f04:	2208      	movs	r2, #8
 8008f06:	4629      	mov	r1, r5
 8008f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f0c:	f7fb fd4c 	bl	80049a8 <memset>
 8008f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	3468      	adds	r4, #104	; 0x68
 8008f1e:	e7d9      	b.n	8008ed4 <__sfp+0x1c>
 8008f20:	2104      	movs	r1, #4
 8008f22:	4638      	mov	r0, r7
 8008f24:	f7ff ff62 	bl	8008dec <__sfmoreglue>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	6030      	str	r0, [r6, #0]
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1d5      	bne.n	8008edc <__sfp+0x24>
 8008f30:	f7ff ff78 	bl	8008e24 <__sfp_lock_release>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	e7ee      	b.n	8008f18 <__sfp+0x60>
 8008f3a:	bf00      	nop
 8008f3c:	08009278 	.word	0x08009278
 8008f40:	ffff0001 	.word	0xffff0001

08008f44 <_fwalk_reent>:
 8008f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f48:	4606      	mov	r6, r0
 8008f4a:	4688      	mov	r8, r1
 8008f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f50:	2700      	movs	r7, #0
 8008f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f56:	f1b9 0901 	subs.w	r9, r9, #1
 8008f5a:	d505      	bpl.n	8008f68 <_fwalk_reent+0x24>
 8008f5c:	6824      	ldr	r4, [r4, #0]
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d1f7      	bne.n	8008f52 <_fwalk_reent+0xe>
 8008f62:	4638      	mov	r0, r7
 8008f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d907      	bls.n	8008f7e <_fwalk_reent+0x3a>
 8008f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f72:	3301      	adds	r3, #1
 8008f74:	d003      	beq.n	8008f7e <_fwalk_reent+0x3a>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4630      	mov	r0, r6
 8008f7a:	47c0      	blx	r8
 8008f7c:	4307      	orrs	r7, r0
 8008f7e:	3568      	adds	r5, #104	; 0x68
 8008f80:	e7e9      	b.n	8008f56 <_fwalk_reent+0x12>

08008f82 <__retarget_lock_init_recursive>:
 8008f82:	4770      	bx	lr

08008f84 <__retarget_lock_acquire_recursive>:
 8008f84:	4770      	bx	lr

08008f86 <__retarget_lock_release_recursive>:
 8008f86:	4770      	bx	lr

08008f88 <__swhatbuf_r>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	460e      	mov	r6, r1
 8008f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f90:	2900      	cmp	r1, #0
 8008f92:	b096      	sub	sp, #88	; 0x58
 8008f94:	4614      	mov	r4, r2
 8008f96:	461d      	mov	r5, r3
 8008f98:	da07      	bge.n	8008faa <__swhatbuf_r+0x22>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	602b      	str	r3, [r5, #0]
 8008f9e:	89b3      	ldrh	r3, [r6, #12]
 8008fa0:	061a      	lsls	r2, r3, #24
 8008fa2:	d410      	bmi.n	8008fc6 <__swhatbuf_r+0x3e>
 8008fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fa8:	e00e      	b.n	8008fc8 <__swhatbuf_r+0x40>
 8008faa:	466a      	mov	r2, sp
 8008fac:	f000 f902 	bl	80091b4 <_fstat_r>
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dbf2      	blt.n	8008f9a <__swhatbuf_r+0x12>
 8008fb4:	9a01      	ldr	r2, [sp, #4]
 8008fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fbe:	425a      	negs	r2, r3
 8008fc0:	415a      	adcs	r2, r3
 8008fc2:	602a      	str	r2, [r5, #0]
 8008fc4:	e7ee      	b.n	8008fa4 <__swhatbuf_r+0x1c>
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	2000      	movs	r0, #0
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	b016      	add	sp, #88	; 0x58
 8008fce:	bd70      	pop	{r4, r5, r6, pc}

08008fd0 <__smakebuf_r>:
 8008fd0:	898b      	ldrh	r3, [r1, #12]
 8008fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fd4:	079d      	lsls	r5, r3, #30
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	460c      	mov	r4, r1
 8008fda:	d507      	bpl.n	8008fec <__smakebuf_r+0x1c>
 8008fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	6123      	str	r3, [r4, #16]
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	6163      	str	r3, [r4, #20]
 8008fe8:	b002      	add	sp, #8
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	ab01      	add	r3, sp, #4
 8008fee:	466a      	mov	r2, sp
 8008ff0:	f7ff ffca 	bl	8008f88 <__swhatbuf_r>
 8008ff4:	9900      	ldr	r1, [sp, #0]
 8008ff6:	4605      	mov	r5, r0
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff f97f 	bl	80082fc <_malloc_r>
 8008ffe:	b948      	cbnz	r0, 8009014 <__smakebuf_r+0x44>
 8009000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009004:	059a      	lsls	r2, r3, #22
 8009006:	d4ef      	bmi.n	8008fe8 <__smakebuf_r+0x18>
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	f043 0302 	orr.w	r3, r3, #2
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	e7e3      	b.n	8008fdc <__smakebuf_r+0xc>
 8009014:	4b0d      	ldr	r3, [pc, #52]	; (800904c <__smakebuf_r+0x7c>)
 8009016:	62b3      	str	r3, [r6, #40]	; 0x28
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	6020      	str	r0, [r4, #0]
 800901c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	9b00      	ldr	r3, [sp, #0]
 8009024:	6163      	str	r3, [r4, #20]
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	6120      	str	r0, [r4, #16]
 800902a:	b15b      	cbz	r3, 8009044 <__smakebuf_r+0x74>
 800902c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009030:	4630      	mov	r0, r6
 8009032:	f000 f8d1 	bl	80091d8 <_isatty_r>
 8009036:	b128      	cbz	r0, 8009044 <__smakebuf_r+0x74>
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	f043 0301 	orr.w	r3, r3, #1
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	89a0      	ldrh	r0, [r4, #12]
 8009046:	4305      	orrs	r5, r0
 8009048:	81a5      	strh	r5, [r4, #12]
 800904a:	e7cd      	b.n	8008fe8 <__smakebuf_r+0x18>
 800904c:	08008de1 	.word	0x08008de1

08009050 <_malloc_usable_size_r>:
 8009050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009054:	1f18      	subs	r0, r3, #4
 8009056:	2b00      	cmp	r3, #0
 8009058:	bfbc      	itt	lt
 800905a:	580b      	ldrlt	r3, [r1, r0]
 800905c:	18c0      	addlt	r0, r0, r3
 800905e:	4770      	bx	lr

08009060 <_raise_r>:
 8009060:	291f      	cmp	r1, #31
 8009062:	b538      	push	{r3, r4, r5, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	460d      	mov	r5, r1
 8009068:	d904      	bls.n	8009074 <_raise_r+0x14>
 800906a:	2316      	movs	r3, #22
 800906c:	6003      	str	r3, [r0, #0]
 800906e:	f04f 30ff 	mov.w	r0, #4294967295
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009076:	b112      	cbz	r2, 800907e <_raise_r+0x1e>
 8009078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800907c:	b94b      	cbnz	r3, 8009092 <_raise_r+0x32>
 800907e:	4620      	mov	r0, r4
 8009080:	f000 f830 	bl	80090e4 <_getpid_r>
 8009084:	462a      	mov	r2, r5
 8009086:	4601      	mov	r1, r0
 8009088:	4620      	mov	r0, r4
 800908a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908e:	f000 b817 	b.w	80090c0 <_kill_r>
 8009092:	2b01      	cmp	r3, #1
 8009094:	d00a      	beq.n	80090ac <_raise_r+0x4c>
 8009096:	1c59      	adds	r1, r3, #1
 8009098:	d103      	bne.n	80090a2 <_raise_r+0x42>
 800909a:	2316      	movs	r3, #22
 800909c:	6003      	str	r3, [r0, #0]
 800909e:	2001      	movs	r0, #1
 80090a0:	e7e7      	b.n	8009072 <_raise_r+0x12>
 80090a2:	2400      	movs	r4, #0
 80090a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090a8:	4628      	mov	r0, r5
 80090aa:	4798      	blx	r3
 80090ac:	2000      	movs	r0, #0
 80090ae:	e7e0      	b.n	8009072 <_raise_r+0x12>

080090b0 <raise>:
 80090b0:	4b02      	ldr	r3, [pc, #8]	; (80090bc <raise+0xc>)
 80090b2:	4601      	mov	r1, r0
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	f7ff bfd3 	b.w	8009060 <_raise_r>
 80090ba:	bf00      	nop
 80090bc:	20000010 	.word	0x20000010

080090c0 <_kill_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_kill_r+0x20>)
 80090c4:	2300      	movs	r3, #0
 80090c6:	4604      	mov	r4, r0
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	f7f8 ff59 	bl	8001f84 <_kill>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d102      	bne.n	80090dc <_kill_r+0x1c>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	b103      	cbz	r3, 80090dc <_kill_r+0x1c>
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	bd38      	pop	{r3, r4, r5, pc}
 80090de:	bf00      	nop
 80090e0:	20000310 	.word	0x20000310

080090e4 <_getpid_r>:
 80090e4:	f7f8 bf46 	b.w	8001f74 <_getpid>

080090e8 <__sread>:
 80090e8:	b510      	push	{r4, lr}
 80090ea:	460c      	mov	r4, r1
 80090ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f0:	f000 f894 	bl	800921c <_read_r>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	bfab      	itete	ge
 80090f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80090fa:	89a3      	ldrhlt	r3, [r4, #12]
 80090fc:	181b      	addge	r3, r3, r0
 80090fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009102:	bfac      	ite	ge
 8009104:	6563      	strge	r3, [r4, #84]	; 0x54
 8009106:	81a3      	strhlt	r3, [r4, #12]
 8009108:	bd10      	pop	{r4, pc}

0800910a <__swrite>:
 800910a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910e:	461f      	mov	r7, r3
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	05db      	lsls	r3, r3, #23
 8009114:	4605      	mov	r5, r0
 8009116:	460c      	mov	r4, r1
 8009118:	4616      	mov	r6, r2
 800911a:	d505      	bpl.n	8009128 <__swrite+0x1e>
 800911c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009120:	2302      	movs	r3, #2
 8009122:	2200      	movs	r2, #0
 8009124:	f000 f868 	bl	80091f8 <_lseek_r>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800912e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	4632      	mov	r2, r6
 8009136:	463b      	mov	r3, r7
 8009138:	4628      	mov	r0, r5
 800913a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800913e:	f000 b817 	b.w	8009170 <_write_r>

08009142 <__sseek>:
 8009142:	b510      	push	{r4, lr}
 8009144:	460c      	mov	r4, r1
 8009146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914a:	f000 f855 	bl	80091f8 <_lseek_r>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	bf15      	itete	ne
 8009154:	6560      	strne	r0, [r4, #84]	; 0x54
 8009156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800915a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800915e:	81a3      	strheq	r3, [r4, #12]
 8009160:	bf18      	it	ne
 8009162:	81a3      	strhne	r3, [r4, #12]
 8009164:	bd10      	pop	{r4, pc}

08009166 <__sclose>:
 8009166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916a:	f000 b813 	b.w	8009194 <_close_r>
	...

08009170 <_write_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d07      	ldr	r5, [pc, #28]	; (8009190 <_write_r+0x20>)
 8009174:	4604      	mov	r4, r0
 8009176:	4608      	mov	r0, r1
 8009178:	4611      	mov	r1, r2
 800917a:	2200      	movs	r2, #0
 800917c:	602a      	str	r2, [r5, #0]
 800917e:	461a      	mov	r2, r3
 8009180:	f7f8 ff37 	bl	8001ff2 <_write>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d102      	bne.n	800918e <_write_r+0x1e>
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	b103      	cbz	r3, 800918e <_write_r+0x1e>
 800918c:	6023      	str	r3, [r4, #0]
 800918e:	bd38      	pop	{r3, r4, r5, pc}
 8009190:	20000310 	.word	0x20000310

08009194 <_close_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d06      	ldr	r5, [pc, #24]	; (80091b0 <_close_r+0x1c>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	602b      	str	r3, [r5, #0]
 80091a0:	f7f8 ff43 	bl	800202a <_close>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_close_r+0x1a>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_close_r+0x1a>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20000310 	.word	0x20000310

080091b4 <_fstat_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d07      	ldr	r5, [pc, #28]	; (80091d4 <_fstat_r+0x20>)
 80091b8:	2300      	movs	r3, #0
 80091ba:	4604      	mov	r4, r0
 80091bc:	4608      	mov	r0, r1
 80091be:	4611      	mov	r1, r2
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f7f8 ff3e 	bl	8002042 <_fstat>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	d102      	bne.n	80091d0 <_fstat_r+0x1c>
 80091ca:	682b      	ldr	r3, [r5, #0]
 80091cc:	b103      	cbz	r3, 80091d0 <_fstat_r+0x1c>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	bf00      	nop
 80091d4:	20000310 	.word	0x20000310

080091d8 <_isatty_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d06      	ldr	r5, [pc, #24]	; (80091f4 <_isatty_r+0x1c>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	602b      	str	r3, [r5, #0]
 80091e4:	f7f8 ff3d 	bl	8002062 <_isatty>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_isatty_r+0x1a>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_isatty_r+0x1a>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20000310 	.word	0x20000310

080091f8 <_lseek_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d07      	ldr	r5, [pc, #28]	; (8009218 <_lseek_r+0x20>)
 80091fc:	4604      	mov	r4, r0
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	2200      	movs	r2, #0
 8009204:	602a      	str	r2, [r5, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	f7f8 ff36 	bl	8002078 <_lseek>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_lseek_r+0x1e>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_lseek_r+0x1e>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20000310 	.word	0x20000310

0800921c <_read_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	; (800923c <_read_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f8 fec4 	bl	8001fb8 <_read>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_read_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_read_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000310 	.word	0x20000310

08009240 <_init>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	bf00      	nop
 8009244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009246:	bc08      	pop	{r3}
 8009248:	469e      	mov	lr, r3
 800924a:	4770      	bx	lr

0800924c <_fini>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr
